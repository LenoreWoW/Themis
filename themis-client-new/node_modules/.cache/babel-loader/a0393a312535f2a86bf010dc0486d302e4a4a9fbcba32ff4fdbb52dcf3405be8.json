{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  // Check if we're in production mode and serviceWorker is supported\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${window.location.origin}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Check if a service worker still exists.\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('Web app is being served cache-first by a service worker.');\n        });\n      } else {\n        // Not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('New content is available');\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            console.log('Content is cached for offline use.');\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't, reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","addEventListener","swUrl","origin","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-new/src/serviceWorkerRegistration.ts"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  // Check if we're in production mode and serviceWorker is supported\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${window.location.origin}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Check if a service worker still exists.\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('Web app is being served cache-first by a service worker.');\n        });\n      } else {\n        // Not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available');\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't, reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}