const fs = require('fs'); const filePath = 'themis-client-final/src/pages/ProjectDetailPage.tsx'; fs.readFile(filePath, 'utf8', (err, data) => { if (err) { console.error('Error reading file:', err); process.exit(1); } const startPattern = '        // Try to get project logs'; const endPattern = '        } catch (err) {'; const startIndex = data.indexOf(startPattern); const endIndex = data.indexOf(endPattern, startIndex); if (startIndex === -1 || endIndex === -1) { console.error('Could not find the section to replace'); process.exit(1); } const newCode = `        // Try to get project logs\n        try {\n          // Use the API to get dynamic audit logs\n          if (id && user?.token) {\n            console.log(\`Fetching audit logs for project \${id}\`);\n            const logsResponse = await api.auditLogs.getAuditLogsByProject(id, user.token);\n            \n            if (logsResponse && Array.isArray(logsResponse)) {\n              console.log(\`Found \${logsResponse.length} audit logs for project \${id}\`);\n              setProjectLogs(logsResponse);\n            } else {\n              console.warn(\`No audit logs found for project \${id}, creating initial logs\`);\n              \n              // Create initial logs for the project\n              const initialLogs = [\n                {\n                  id: \`log-create-\${id}\`,\n                  action: AuditAction.CREATE,\n                  details: \`Project created with name \${projectWithTeam.name}\`,\n                  user: {\n                    id: user.id,\n                    firstName: user.firstName,\n                    lastName: user.lastName\n                  },\n                  timestamp: projectWithTeam.createdAt,\n                  projectId: id\n                }\n              ];\n              \n              // Add status logs based on current status\n              if (projectWithTeam.status !== ProjectStatus.DRAFT) {\n                initialLogs.push({\n                  id: \`log-status-\${id}\`,\n                  action: AuditAction.UPDATE,\n                  details: \`Project status updated to \${getStatusLabel(projectWithTeam.status)}\`,\n                  user: {\n                    id: user.id,\n                    firstName: user.firstName,\n                    lastName: user.lastName\n                  },\n                  timestamp: new Date(new Date(projectWithTeam.createdAt).getTime() + 86400000).toISOString(),\n                  projectId: id\n                });\n              }\n              \n              setProjectLogs(initialLogs);\n              \n              // Save these logs to localStorage via the API\n              initialLogs.forEach(log => {\n                try {\n                  api.auditLogs.createAuditLog(log, user.token);\n                } catch (err) {\n                  console.error('Error saving initial audit log:', err);\n                }\n              });\n            }\n          } else {\n            // Fallback to mock data if no ID or token\n            console.warn('Using mock project logs as fallback');\n            setProjectLogs(mockProjectLogs);\n          }`; const modifiedData = data.substring(0, startIndex) + newCode + data.substring(endIndex); fs.writeFile(filePath, modifiedData, 'utf8', (err) => { if (err) { console.error('Error writing file:', err); process.exit(1); } console.log('Successfully updated the project logs section'); }); });
