{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5095';\nclass ProjectService {\n  async getProjects() {\n    const response = await fetch(`${API_BASE_URL}/api/projects`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch projects');\n    }\n    return response.json();\n  }\n  async getProjectById(id) {\n    const response = await fetch(`${API_BASE_URL}/api/projects/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch project');\n    }\n    return response.json();\n  }\n  async createProject(project) {\n    const response = await fetch(`${API_BASE_URL}/api/projects`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(project)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create project');\n    }\n    return response.json();\n  }\n  async updateProject(id, project) {\n    const response = await fetch(`${API_BASE_URL}/api/projects/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(project)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update project');\n    }\n    return response.json();\n  }\n  async deleteProject(id) {\n    const response = await fetch(`${API_BASE_URL}/api/projects/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete project');\n    }\n  }\n}\nexport const projectService = new ProjectService();","map":{"version":3,"names":["API_BASE_URL","ProjectService","getProjects","response","fetch","ok","Error","json","getProjectById","id","createProject","project","method","headers","body","JSON","stringify","updateProject","deleteProject","credentials","projectService"],"sources":["/Users/hassanalsahli/Desktop/Themis/project-collector/src/services/projectService.ts"],"sourcesContent":["import { Project } from '../types';\n\nconst API_BASE_URL = 'http://localhost:5095';\n\nclass ProjectService {\n  async getProjects(): Promise<Project[]> {\n    const response = await fetch(`${API_BASE_URL}/api/projects`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch projects');\n    }\n    return response.json();\n  }\n\n  async getProjectById(id: string): Promise<Project> {\n    const response = await fetch(`${API_BASE_URL}/api/projects/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch project');\n    }\n    return response.json();\n  }\n\n  async createProject(project: Omit<Project, 'id'>): Promise<Project> {\n    const response = await fetch(`${API_BASE_URL}/api/projects`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(project),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create project');\n    }\n    return response.json();\n  }\n\n  async updateProject(id: string, project: Partial<Project>): Promise<Project> {\n    const response = await fetch(`${API_BASE_URL}/api/projects/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(project),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update project');\n    }\n    return response.json();\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    const response = await fetch(`${API_BASE_URL}/api/projects/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete project');\n    }\n  }\n}\n\nexport const projectService = new ProjectService(); "],"mappings":"AAEA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,cAAc,CAAC;EACnB,MAAMC,WAAWA,CAAA,EAAuB;IACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,eAAe,CAAC;IAC5D,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMC,cAAcA,CAACC,EAAU,EAAoB;IACjD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,iBAAiBS,EAAE,EAAE,CAAC;IAClE,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMG,aAAaA,CAACC,OAA4B,EAAoB;IAClE,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,eAAe,EAAE;MAC3DY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMU,aAAaA,CAACR,EAAU,EAAEE,OAAyB,EAAoB;IAC3E,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,iBAAiBS,EAAE,EAAE,EAAE;MACjEG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMW,aAAaA,CAACT,EAAU,EAAiB;IAC7C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,iBAAiBS,EAAE,EAAE,EAAE;MACjEG,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDM,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EACF;AACF;AAEA,OAAO,MAAMc,cAAc,GAAG,IAAInB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}