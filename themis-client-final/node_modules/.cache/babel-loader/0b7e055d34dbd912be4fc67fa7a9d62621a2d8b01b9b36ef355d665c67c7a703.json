{"ast":null,"code":"var _jsxFileName = \"/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/TaskRequestContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { TaskPriority, TaskStatus } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskRequestContext = /*#__PURE__*/createContext(undefined);\nexport const useTaskRequests = () => {\n  _s();\n  const context = useContext(TaskRequestContext);\n  if (!context) {\n    throw new Error('useTaskRequests must be used within a TaskRequestProvider');\n  }\n  return context;\n};\n_s(useTaskRequests, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const TaskRequestProvider = ({\n  children\n}) => {\n  _s2();\n  const [taskRequests, setTaskRequests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchTaskRequests = async () => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // const response = await api.get('/task-requests');\n      // setTaskRequests(response.data);\n\n      // Mock data for now\n      const mockRequests = [{\n        id: '1',\n        title: 'Create user documentation',\n        description: 'We need comprehensive user documentation for the new features',\n        priority: TaskPriority.MEDIUM,\n        status: TaskStatus.TODO,\n        dueDate: '2024-07-15',\n        projectId: '1',\n        requestedBy: {\n          id: '3',\n          firstName: 'Carol',\n          lastName: 'Williams'\n        },\n        createdAt: '2024-06-01',\n        updatedAt: '2024-06-01'\n      }];\n      setTaskRequests(mockRequests);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching task requests:', err);\n      setError('Failed to fetch task requests');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createTaskRequest = async taskRequest => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // const response = await api.post('/task-requests', taskRequest);\n      // const newTaskRequest = response.data;\n\n      // Mock data for now\n      const newTaskRequest = {\n        ...taskRequest,\n        id: `req-${Date.now()}`,\n        requestedBy: {\n          id: '3',\n          firstName: 'Carol',\n          lastName: 'Williams'\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      setTaskRequests(prev => [...prev, newTaskRequest]);\n      setError(null);\n    } catch (err) {\n      console.error('Error creating task request:', err);\n      setError('Failed to create task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const approveTaskRequest = async id => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // await api.put(`/task-requests/${id}/approve`);\n\n      // Update local state\n      setTaskRequests(prev => prev.map(req => req.id === id ? {\n        ...req,\n        status: TaskStatus.IN_PROGRESS,\n        updatedAt: new Date().toISOString()\n      } : req));\n      setError(null);\n    } catch (err) {\n      console.error('Error approving task request:', err);\n      setError('Failed to approve task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const rejectTaskRequest = async (id, reason) => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // await api.put(`/task-requests/${id}/reject`, { reason });\n\n      // Update local state\n      setTaskRequests(prev => prev.filter(req => req.id !== id));\n      setError(null);\n    } catch (err) {\n      console.error('Error rejecting task request:', err);\n      setError('Failed to reject task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch task requests on initial load\n  React.useEffect(() => {\n    fetchTaskRequests();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TaskRequestContext.Provider, {\n    value: {\n      taskRequests,\n      loading,\n      error,\n      createTaskRequest,\n      approveTaskRequest,\n      rejectTaskRequest\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s2(TaskRequestProvider, \"HYykVlEbE2pGhsr+SzQTc9MHoCo=\");\n_c = TaskRequestProvider;\nexport default TaskRequestContext;\nvar _c;\n$RefreshReg$(_c, \"TaskRequestProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","TaskPriority","TaskStatus","jsxDEV","_jsxDEV","TaskRequestContext","undefined","useTaskRequests","_s","context","Error","TaskRequestProvider","children","_s2","taskRequests","setTaskRequests","loading","setLoading","error","setError","fetchTaskRequests","mockRequests","id","title","description","priority","MEDIUM","status","TODO","dueDate","projectId","requestedBy","firstName","lastName","createdAt","updatedAt","err","console","createTaskRequest","taskRequest","newTaskRequest","Date","now","toISOString","prev","approveTaskRequest","map","req","IN_PROGRESS","rejectTaskRequest","reason","filter","useEffect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/TaskRequestContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { TaskPriority, TaskStatus } from '../types';\nimport api from '../services/api';\n\ninterface TaskRequest {\n  id?: string;\n  title: string;\n  description: string;\n  priority: TaskPriority;\n  status: TaskStatus;\n  dueDate: string;\n  projectId: string;\n  requestedBy?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface TaskRequestContextType {\n  taskRequests: TaskRequest[];\n  loading: boolean;\n  error: string | null;\n  createTaskRequest: (taskRequest: TaskRequest) => Promise<void>;\n  approveTaskRequest: (id: string) => Promise<void>;\n  rejectTaskRequest: (id: string, reason: string) => Promise<void>;\n}\n\nconst TaskRequestContext = createContext<TaskRequestContextType | undefined>(undefined);\n\nexport const useTaskRequests = (): TaskRequestContextType => {\n  const context = useContext(TaskRequestContext);\n  if (!context) {\n    throw new Error('useTaskRequests must be used within a TaskRequestProvider');\n  }\n  return context;\n};\n\nexport const TaskRequestProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [taskRequests, setTaskRequests] = useState<TaskRequest[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchTaskRequests = async () => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // const response = await api.get('/task-requests');\n      // setTaskRequests(response.data);\n      \n      // Mock data for now\n      const mockRequests: TaskRequest[] = [\n        {\n          id: '1',\n          title: 'Create user documentation',\n          description: 'We need comprehensive user documentation for the new features',\n          priority: TaskPriority.MEDIUM,\n          status: TaskStatus.TODO,\n          dueDate: '2024-07-15',\n          projectId: '1',\n          requestedBy: {\n            id: '3',\n            firstName: 'Carol',\n            lastName: 'Williams'\n          },\n          createdAt: '2024-06-01',\n          updatedAt: '2024-06-01'\n        }\n      ];\n      \n      setTaskRequests(mockRequests);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching task requests:', err);\n      setError('Failed to fetch task requests');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createTaskRequest = async (taskRequest: TaskRequest): Promise<void> => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // const response = await api.post('/task-requests', taskRequest);\n      // const newTaskRequest = response.data;\n      \n      // Mock data for now\n      const newTaskRequest: TaskRequest = {\n        ...taskRequest,\n        id: `req-${Date.now()}`,\n        requestedBy: {\n          id: '3',\n          firstName: 'Carol',\n          lastName: 'Williams'\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      setTaskRequests(prev => [...prev, newTaskRequest]);\n      setError(null);\n    } catch (err) {\n      console.error('Error creating task request:', err);\n      setError('Failed to create task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const approveTaskRequest = async (id: string): Promise<void> => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // await api.put(`/task-requests/${id}/approve`);\n      \n      // Update local state\n      setTaskRequests(prev => \n        prev.map(req => \n          req.id === id \n            ? { ...req, status: TaskStatus.IN_PROGRESS, updatedAt: new Date().toISOString() } \n            : req\n        )\n      );\n      setError(null);\n    } catch (err) {\n      console.error('Error approving task request:', err);\n      setError('Failed to approve task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const rejectTaskRequest = async (id: string, reason: string): Promise<void> => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // await api.put(`/task-requests/${id}/reject`, { reason });\n      \n      // Update local state\n      setTaskRequests(prev => prev.filter(req => req.id !== id));\n      setError(null);\n    } catch (err) {\n      console.error('Error rejecting task request:', err);\n      setError('Failed to reject task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch task requests on initial load\n  React.useEffect(() => {\n    fetchTaskRequests();\n  }, []);\n\n  return (\n    <TaskRequestContext.Provider\n      value={{\n        taskRequests,\n        loading,\n        error,\n        createTaskRequest,\n        approveTaskRequest,\n        rejectTaskRequest\n      }}\n    >\n      {children}\n    </TaskRequestContext.Provider>\n  );\n};\n\nexport default TaskRequestContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}