{"ast":null,"code":"import{TaskStatus}from'../types';// Backend task status enum values matching the C# enum\nexport let BackendTaskStatus=/*#__PURE__*/function(BackendTaskStatus){BackendTaskStatus[BackendTaskStatus[\"NotStarted\"]=0]=\"NotStarted\";BackendTaskStatus[BackendTaskStatus[\"InProgress\"]=1]=\"InProgress\";BackendTaskStatus[BackendTaskStatus[\"Completed\"]=2]=\"Completed\";BackendTaskStatus[BackendTaskStatus[\"Delayed\"]=3]=\"Delayed\";BackendTaskStatus[BackendTaskStatus[\"Blocked\"]=4]=\"Blocked\";BackendTaskStatus[BackendTaskStatus[\"Cancelled\"]=5]=\"Cancelled\";return BackendTaskStatus;}({});/**\n * Maps frontend TaskStatus to backend TaskStatus values\n * @param status Frontend task status\n * @returns Backend task status value\n */export const mapToBackendStatus=frontendStatus=>{switch(frontendStatus){case TaskStatus.TODO:return BackendTaskStatus.NotStarted;case TaskStatus.IN_PROGRESS:return BackendTaskStatus.InProgress;case TaskStatus.REVIEW:return BackendTaskStatus.InProgress;// Map REVIEW to InProgress in backend\ncase TaskStatus.DONE:return BackendTaskStatus.Completed;default:console.warn(`Unknown frontend task status: ${frontendStatus}`);return BackendTaskStatus.NotStarted;}};/**\n * Maps backend TaskStatus values to frontend TaskStatus\n * @param status Backend task status value or string\n * @returns Frontend task status\n */export const mapToFrontendStatus=backendStatus=>{// Handle string status values (sometimes the API returns string values directly)\nif(typeof backendStatus==='string'){switch(backendStatus){case'TODO':return TaskStatus.TODO;case'IN_PROGRESS':return TaskStatus.IN_PROGRESS;case'REVIEW':return TaskStatus.REVIEW;case'DONE':return TaskStatus.DONE;case'NotStarted':return TaskStatus.TODO;case'InProgress':return TaskStatus.IN_PROGRESS;case'Completed':return TaskStatus.DONE;case'Delayed':case'Blocked':return TaskStatus.IN_PROGRESS;case'Cancelled':return TaskStatus.DONE;default:console.warn(`Unknown backend task status string: ${backendStatus}`);return TaskStatus.TODO;}}// Handle numeric status values\nswitch(backendStatus){case BackendTaskStatus.NotStarted:return TaskStatus.TODO;case BackendTaskStatus.InProgress:return TaskStatus.IN_PROGRESS;case BackendTaskStatus.Completed:return TaskStatus.DONE;case BackendTaskStatus.Delayed:return TaskStatus.IN_PROGRESS;// Map Delayed to IN_PROGRESS in frontend\ncase BackendTaskStatus.Blocked:return TaskStatus.IN_PROGRESS;// Map Blocked to IN_PROGRESS in frontend\ncase BackendTaskStatus.Cancelled:return TaskStatus.DONE;// Map Cancelled to DONE in frontend\ndefault:console.warn(`Unknown backend task status number: ${backendStatus}`);return TaskStatus.TODO;}};","map":{"version":3,"names":["TaskStatus","BackendTaskStatus","mapToBackendStatus","frontendStatus","TODO","NotStarted","IN_PROGRESS","InProgress","REVIEW","DONE","Completed","console","warn","mapToFrontendStatus","backendStatus","Delayed","Blocked","Cancelled"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/taskStatusMapper.ts"],"sourcesContent":["import { TaskStatus } from '../types';\n\n// Backend task status enum values matching the C# enum\nexport enum BackendTaskStatus {\n  NotStarted = 0,\n  InProgress = 1,\n  Completed = 2,\n  Delayed = 3,\n  Blocked = 4,\n  Cancelled = 5\n}\n\n/**\n * Maps frontend TaskStatus to backend TaskStatus values\n * @param status Frontend task status\n * @returns Backend task status value\n */\nexport const mapToBackendStatus = (frontendStatus: TaskStatus): BackendTaskStatus => {\n  switch (frontendStatus) {\n    case TaskStatus.TODO:\n      return BackendTaskStatus.NotStarted;\n    case TaskStatus.IN_PROGRESS:\n      return BackendTaskStatus.InProgress;\n    case TaskStatus.REVIEW:\n      return BackendTaskStatus.InProgress; // Map REVIEW to InProgress in backend\n    case TaskStatus.DONE:\n      return BackendTaskStatus.Completed;\n    default:\n      console.warn(`Unknown frontend task status: ${frontendStatus}`);\n      return BackendTaskStatus.NotStarted;\n  }\n};\n\n/**\n * Maps backend TaskStatus values to frontend TaskStatus\n * @param status Backend task status value or string\n * @returns Frontend task status\n */\nexport const mapToFrontendStatus = (backendStatus: number | string): TaskStatus => {\n  // Handle string status values (sometimes the API returns string values directly)\n  if (typeof backendStatus === 'string') {\n    switch (backendStatus) {\n      case 'TODO':\n        return TaskStatus.TODO;\n      case 'IN_PROGRESS':\n        return TaskStatus.IN_PROGRESS;\n      case 'REVIEW':\n        return TaskStatus.REVIEW;\n      case 'DONE':\n        return TaskStatus.DONE;\n      case 'NotStarted':\n        return TaskStatus.TODO;\n      case 'InProgress':\n        return TaskStatus.IN_PROGRESS;\n      case 'Completed':\n        return TaskStatus.DONE;\n      case 'Delayed':\n      case 'Blocked':\n        return TaskStatus.IN_PROGRESS;\n      case 'Cancelled':\n        return TaskStatus.DONE;\n      default:\n        console.warn(`Unknown backend task status string: ${backendStatus}`);\n        return TaskStatus.TODO;\n    }\n  }\n  \n  // Handle numeric status values\n  switch (backendStatus) {\n    case BackendTaskStatus.NotStarted:\n      return TaskStatus.TODO;\n    case BackendTaskStatus.InProgress:\n      return TaskStatus.IN_PROGRESS;\n    case BackendTaskStatus.Completed:\n      return TaskStatus.DONE;\n    case BackendTaskStatus.Delayed:\n      return TaskStatus.IN_PROGRESS; // Map Delayed to IN_PROGRESS in frontend\n    case BackendTaskStatus.Blocked:\n      return TaskStatus.IN_PROGRESS; // Map Blocked to IN_PROGRESS in frontend\n    case BackendTaskStatus.Cancelled:\n      return TaskStatus.DONE; // Map Cancelled to DONE in frontend\n    default:\n      console.warn(`Unknown backend task status number: ${backendStatus}`);\n      return TaskStatus.TODO;\n  }\n}; "],"mappings":"AAAA,OAASA,UAAU,KAAQ,UAAU,CAErC;AACA,UAAY,CAAAC,iBAAiB,uBAAjBA,iBAAiB,EAAjBA,iBAAiB,CAAjBA,iBAAiB,+BAAjBA,iBAAiB,CAAjBA,iBAAiB,+BAAjBA,iBAAiB,CAAjBA,iBAAiB,6BAAjBA,iBAAiB,CAAjBA,iBAAiB,yBAAjBA,iBAAiB,CAAjBA,iBAAiB,yBAAjBA,iBAAiB,CAAjBA,iBAAiB,mCAAjB,CAAAA,iBAAiB,OAS7B;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,kBAAkB,CAAIC,cAA0B,EAAwB,CACnF,OAAQA,cAAc,EACpB,IAAK,CAAAH,UAAU,CAACI,IAAI,CAClB,MAAO,CAAAH,iBAAiB,CAACI,UAAU,CACrC,IAAK,CAAAL,UAAU,CAACM,WAAW,CACzB,MAAO,CAAAL,iBAAiB,CAACM,UAAU,CACrC,IAAK,CAAAP,UAAU,CAACQ,MAAM,CACpB,MAAO,CAAAP,iBAAiB,CAACM,UAAU,CAAE;AACvC,IAAK,CAAAP,UAAU,CAACS,IAAI,CAClB,MAAO,CAAAR,iBAAiB,CAACS,SAAS,CACpC,QACEC,OAAO,CAACC,IAAI,CAAC,iCAAiCT,cAAc,EAAE,CAAC,CAC/D,MAAO,CAAAF,iBAAiB,CAACI,UAAU,CACvC,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAQ,mBAAmB,CAAIC,aAA8B,EAAiB,CACjF;AACA,GAAI,MAAO,CAAAA,aAAa,GAAK,QAAQ,CAAE,CACrC,OAAQA,aAAa,EACnB,IAAK,MAAM,CACT,MAAO,CAAAd,UAAU,CAACI,IAAI,CACxB,IAAK,aAAa,CAChB,MAAO,CAAAJ,UAAU,CAACM,WAAW,CAC/B,IAAK,QAAQ,CACX,MAAO,CAAAN,UAAU,CAACQ,MAAM,CAC1B,IAAK,MAAM,CACT,MAAO,CAAAR,UAAU,CAACS,IAAI,CACxB,IAAK,YAAY,CACf,MAAO,CAAAT,UAAU,CAACI,IAAI,CACxB,IAAK,YAAY,CACf,MAAO,CAAAJ,UAAU,CAACM,WAAW,CAC/B,IAAK,WAAW,CACd,MAAO,CAAAN,UAAU,CAACS,IAAI,CACxB,IAAK,SAAS,CACd,IAAK,SAAS,CACZ,MAAO,CAAAT,UAAU,CAACM,WAAW,CAC/B,IAAK,WAAW,CACd,MAAO,CAAAN,UAAU,CAACS,IAAI,CACxB,QACEE,OAAO,CAACC,IAAI,CAAC,uCAAuCE,aAAa,EAAE,CAAC,CACpE,MAAO,CAAAd,UAAU,CAACI,IAAI,CAC1B,CACF,CAEA;AACA,OAAQU,aAAa,EACnB,IAAK,CAAAb,iBAAiB,CAACI,UAAU,CAC/B,MAAO,CAAAL,UAAU,CAACI,IAAI,CACxB,IAAK,CAAAH,iBAAiB,CAACM,UAAU,CAC/B,MAAO,CAAAP,UAAU,CAACM,WAAW,CAC/B,IAAK,CAAAL,iBAAiB,CAACS,SAAS,CAC9B,MAAO,CAAAV,UAAU,CAACS,IAAI,CACxB,IAAK,CAAAR,iBAAiB,CAACc,OAAO,CAC5B,MAAO,CAAAf,UAAU,CAACM,WAAW,CAAE;AACjC,IAAK,CAAAL,iBAAiB,CAACe,OAAO,CAC5B,MAAO,CAAAhB,UAAU,CAACM,WAAW,CAAE;AACjC,IAAK,CAAAL,iBAAiB,CAACgB,SAAS,CAC9B,MAAO,CAAAjB,UAAU,CAACS,IAAI,CAAE;AAC1B,QACEE,OAAO,CAACC,IAAI,CAAC,uCAAuCE,aAAa,EAAE,CAAC,CACpE,MAAO,CAAAd,UAAU,CAACI,IAAI,CAC1B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}