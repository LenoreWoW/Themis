{"ast":null,"code":"var _jsxFileName = \"/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/components/common/TranslatedButton.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Button } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\n// Common button texts that should be translated\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * A button component that automatically translates common button labels\n */\nconst TranslatedButton = ({\n  text,\n  children,\n  ...buttonProps\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n\n  // Check if the text is a common button text that needs translation\n  const isCommonText = ['submit', 'cancel', 'save', 'delete', 'edit', 'add', 'close', 'next', 'previous', 'ok', 'yes', 'no', 'back', 'continue', 'approve', 'reject', 'apply', 'confirm', 'done'].includes(text.toLowerCase());\n\n  // If it's a common text, use the translation\n  const buttonText = isCommonText ? t(`common.${text.toLowerCase()}`) : text;\n  return /*#__PURE__*/_jsxDEV(Button, {\n    ...buttonProps,\n    children: children || buttonText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TranslatedButton, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n_c = TranslatedButton;\nexport default TranslatedButton;\nvar _c;\n$RefreshReg$(_c, \"TranslatedButton\");","map":{"version":3,"names":["React","Button","useTranslation","jsxDEV","_jsxDEV","TranslatedButton","text","children","buttonProps","_s","t","isCommonText","includes","toLowerCase","buttonText","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/components/common/TranslatedButton.tsx"],"sourcesContent":["import React from 'react';\nimport { Button, ButtonProps } from '@mui/material';\nimport { useTranslation } from 'react-i18next';\n\n// Common button texts that should be translated\ntype CommonButtonText = \n  'submit' | 'cancel' | 'save' | 'delete' | 'edit' | 'add' | 'close' | \n  'next' | 'previous' | 'ok' | 'yes' | 'no' | 'back' | 'continue' | \n  'approve' | 'reject' | 'apply' | 'confirm' | 'done';\n\ninterface TranslatedButtonProps extends Omit<ButtonProps, 'children'> {\n  text: CommonButtonText | string;\n  children?: React.ReactNode;\n}\n\n/**\n * A button component that automatically translates common button labels\n */\nconst TranslatedButton: React.FC<TranslatedButtonProps> = ({ \n  text,\n  children,\n  ...buttonProps \n}) => {\n  const { t } = useTranslation();\n  \n  // Check if the text is a common button text that needs translation\n  const isCommonText = [\n    'submit', 'cancel', 'save', 'delete', 'edit', 'add', 'close',\n    'next', 'previous', 'ok', 'yes', 'no', 'back', 'continue',\n    'approve', 'reject', 'apply', 'confirm', 'done'\n  ].includes(text.toLowerCase());\n  \n  // If it's a common text, use the translation\n  const buttonText = isCommonText \n    ? t(`common.${text.toLowerCase()}`) \n    : text;\n  \n  return (\n    <Button {...buttonProps}>\n      {children || buttonText}\n    </Button>\n  );\n};\n\nexport default TranslatedButton; "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAqB,eAAe;AACnD,SAASC,cAAc,QAAQ,eAAe;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAWA;AACA;AACA;AACA,MAAMC,gBAAiD,GAAGA,CAAC;EACzDC,IAAI;EACJC,QAAQ;EACR,GAAGC;AACL,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC;EAAE,CAAC,GAAGR,cAAc,CAAC,CAAC;;EAE9B;EACA,MAAMS,YAAY,GAAG,CACnB,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAC5D,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EACzD,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAChD,CAACC,QAAQ,CAACN,IAAI,CAACO,WAAW,CAAC,CAAC,CAAC;;EAE9B;EACA,MAAMC,UAAU,GAAGH,YAAY,GAC3BD,CAAC,CAAC,UAAUJ,IAAI,CAACO,WAAW,CAAC,CAAC,EAAE,CAAC,GACjCP,IAAI;EAER,oBACEF,OAAA,CAACH,MAAM;IAAA,GAAKO,WAAW;IAAAD,QAAA,EACpBA,QAAQ,IAAIO;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEb,CAAC;AAACT,EAAA,CAxBIJ,gBAAiD;EAAA,QAKvCH,cAAc;AAAA;AAAAiB,EAAA,GALxBd,gBAAiD;AA0BvD,eAAeA,gBAAgB;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}