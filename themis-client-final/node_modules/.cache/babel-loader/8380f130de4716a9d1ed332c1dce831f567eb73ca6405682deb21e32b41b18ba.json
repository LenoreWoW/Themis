{"ast":null,"code":"import{ProjectTemplateType}from'../types';// Function to generate placeholder images for template previews\nexport const generateTemplatePlaceholder=templateType=>{// Create a unique color for each template type\nconst getColorForTemplate=type=>{switch(type){case ProjectTemplateType.DEFAULT:return'#4A6572';case ProjectTemplateType.ERP:return'#0277BD';case ProjectTemplateType.MARKETING:return'#C2185B';case ProjectTemplateType.FINANCE:return'#00796B';case ProjectTemplateType.SUPPLY_CHAIN:return'#E65100';case ProjectTemplateType.WEBSITE:return'#6A1B9A';case ProjectTemplateType.INFRASTRUCTURE:return'#283593';default:return'#757575';}};// Get a name for the template\nconst getTemplateName=type=>{switch(type){case ProjectTemplateType.DEFAULT:return'Default';case ProjectTemplateType.ERP:return'ERP';case ProjectTemplateType.MARKETING:return'Marketing';case ProjectTemplateType.FINANCE:return'Finance';case ProjectTemplateType.SUPPLY_CHAIN:return'Supply Chain';case ProjectTemplateType.WEBSITE:return'Website';case ProjectTemplateType.INFRASTRUCTURE:return'Infrastructure';default:return'Template';}};// Generate an SVG placeholder with unique styling per template\nconst color=getColorForTemplate(templateType);const name=getTemplateName(templateType);// Create an SVG with a styled layout that resembles a project dashboard\nconst svgContent=`\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f0f0f0\" />\n      \n      <!-- Header bar -->\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"20\" y=\"38\" font-family=\"Arial\" font-size=\"18\" fill=\"white\">${name} Project Template</text>\n      \n      <!-- Left sidebar -->\n      <rect x=\"0\" y=\"60\" width=\"200\" height=\"540\" fill=\"#e0e0e0\" />\n      \n      <!-- Main content area with mock sections -->\n      <rect x=\"220\" y=\"80\" width=\"560\" height=\"120\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <rect x=\"240\" y=\"100\" width=\"300\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"240\" y=\"130\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"150\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"170\" width=\"400\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      \n      <!-- Chart area -->\n      <rect x=\"220\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"${color}\" stroke-width=\"30\" stroke-dasharray=\"180 100\" />\n      \n      <!-- Task list area -->\n      <rect x=\"510\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <rect x=\"530\" y=\"240\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      <rect x=\"530\" y=\"280\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      <rect x=\"530\" y=\"320\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      <rect x=\"530\" y=\"360\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      \n      <!-- Calendar/timeline area -->\n      <rect x=\"220\" y=\"420\" width=\"560\" height=\"160\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <rect x=\"240\" y=\"450\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"490\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"530\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      \n      <rect x=\"280\" y=\"460\" width=\"100\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      <rect x=\"420\" y=\"460\" width=\"150\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.4\" />\n      <rect x=\"320\" y=\"500\" width=\"120\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.5\" />\n      <rect x=\"580\" y=\"500\" width=\"80\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"480\" y=\"540\" width=\"130\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      \n      <!-- Sidebar items -->\n      <rect x=\"20\" y=\"100\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"140\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"180\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"220\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"260\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      \n      <!-- Template name overlay for clarity -->\n      <rect x=\"230\" y=\"540\" width=\"300\" height=\"30\" rx=\"15\" fill=\"rgba(255,255,255,0.9)\" />\n      <text x=\"250\" y=\"562\" font-family=\"Arial\" font-size=\"16\" fill=\"${color}\">${name} Template Preview</text>\n    </svg>\n  `;// Convert the SVG to a data URL\nconst svgBase64=btoa(svgContent);return`data:image/svg+xml;base64,${svgBase64}`;};// Export template image URLs\nexport const getTemplatePreviewPath=templateType=>{return generateTemplatePlaceholder(templateType);};// Get template description based on type\nexport const getTemplateDescription=templateType=>{switch(templateType){case ProjectTemplateType.DEFAULT:return'A standard project layout with basic task tracking and team management.';case ProjectTemplateType.ERP:return'Enterprise Resource Planning template with modules for operations, HR, and finance integration.';case ProjectTemplateType.MARKETING:return'Campaign-focused template with audience analytics, content calendar, and conversion tracking.';case ProjectTemplateType.FINANCE:return'Financial project template with budget forecasting, expense tracking, and ROI analysis tools.';case ProjectTemplateType.SUPPLY_CHAIN:return'Supply chain management template with inventory tracking, logistics planning, and vendor management.';case ProjectTemplateType.WEBSITE:return'Website development template with design, development, and launch phases plus SEO tracking.';case ProjectTemplateType.INFRASTRUCTURE:return'IT infrastructure template with network diagrams, deployment planning, and maintenance scheduling.';default:return'Select a template to see more details.';}};","map":{"version":3,"names":["ProjectTemplateType","generateTemplatePlaceholder","templateType","getColorForTemplate","type","DEFAULT","ERP","MARKETING","FINANCE","SUPPLY_CHAIN","WEBSITE","INFRASTRUCTURE","getTemplateName","color","name","svgContent","svgBase64","btoa","getTemplatePreviewPath","getTemplateDescription"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/imagePlaceholders.ts"],"sourcesContent":["import { ProjectTemplateType } from '../types';\n\n// Function to generate placeholder images for template previews\nexport const generateTemplatePlaceholder = (templateType: ProjectTemplateType): string => {\n  // Create a unique color for each template type\n  const getColorForTemplate = (type: ProjectTemplateType): string => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return '#4A6572';\n      case ProjectTemplateType.ERP:\n        return '#0277BD';\n      case ProjectTemplateType.MARKETING:\n        return '#C2185B';\n      case ProjectTemplateType.FINANCE:\n        return '#00796B';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return '#E65100';\n      case ProjectTemplateType.WEBSITE:\n        return '#6A1B9A';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return '#283593';\n      default:\n        return '#757575';\n    }\n  };\n\n  // Get a name for the template\n  const getTemplateName = (type: ProjectTemplateType): string => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return 'Default';\n      case ProjectTemplateType.ERP:\n        return 'ERP';\n      case ProjectTemplateType.MARKETING:\n        return 'Marketing';\n      case ProjectTemplateType.FINANCE:\n        return 'Finance';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return 'Supply Chain';\n      case ProjectTemplateType.WEBSITE:\n        return 'Website';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return 'Infrastructure';\n      default:\n        return 'Template';\n    }\n  };\n\n  // Generate an SVG placeholder with unique styling per template\n  const color = getColorForTemplate(templateType);\n  const name = getTemplateName(templateType);\n  \n  // Create an SVG with a styled layout that resembles a project dashboard\n  const svgContent = `\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f0f0f0\" />\n      \n      <!-- Header bar -->\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"20\" y=\"38\" font-family=\"Arial\" font-size=\"18\" fill=\"white\">${name} Project Template</text>\n      \n      <!-- Left sidebar -->\n      <rect x=\"0\" y=\"60\" width=\"200\" height=\"540\" fill=\"#e0e0e0\" />\n      \n      <!-- Main content area with mock sections -->\n      <rect x=\"220\" y=\"80\" width=\"560\" height=\"120\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <rect x=\"240\" y=\"100\" width=\"300\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"240\" y=\"130\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"150\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"170\" width=\"400\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      \n      <!-- Chart area -->\n      <rect x=\"220\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"${color}\" stroke-width=\"30\" stroke-dasharray=\"180 100\" />\n      \n      <!-- Task list area -->\n      <rect x=\"510\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <rect x=\"530\" y=\"240\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      <rect x=\"530\" y=\"280\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      <rect x=\"530\" y=\"320\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      <rect x=\"530\" y=\"360\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n      \n      <!-- Calendar/timeline area -->\n      <rect x=\"220\" y=\"420\" width=\"560\" height=\"160\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <rect x=\"240\" y=\"450\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"490\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"530\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      \n      <rect x=\"280\" y=\"460\" width=\"100\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      <rect x=\"420\" y=\"460\" width=\"150\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.4\" />\n      <rect x=\"320\" y=\"500\" width=\"120\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.5\" />\n      <rect x=\"580\" y=\"500\" width=\"80\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"480\" y=\"540\" width=\"130\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      \n      <!-- Sidebar items -->\n      <rect x=\"20\" y=\"100\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"140\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"180\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"220\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"260\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      \n      <!-- Template name overlay for clarity -->\n      <rect x=\"230\" y=\"540\" width=\"300\" height=\"30\" rx=\"15\" fill=\"rgba(255,255,255,0.9)\" />\n      <text x=\"250\" y=\"562\" font-family=\"Arial\" font-size=\"16\" fill=\"${color}\">${name} Template Preview</text>\n    </svg>\n  `;\n  \n  // Convert the SVG to a data URL\n  const svgBase64 = btoa(svgContent);\n  return `data:image/svg+xml;base64,${svgBase64}`;\n};\n\n// Export template image URLs\nexport const getTemplatePreviewPath = (templateType: ProjectTemplateType): string => {\n  return generateTemplatePlaceholder(templateType);\n};\n\n// Get template description based on type\nexport const getTemplateDescription = (templateType: ProjectTemplateType): string => {\n  switch (templateType) {\n    case ProjectTemplateType.DEFAULT:\n      return 'A standard project layout with basic task tracking and team management.';\n    case ProjectTemplateType.ERP:\n      return 'Enterprise Resource Planning template with modules for operations, HR, and finance integration.';\n    case ProjectTemplateType.MARKETING:\n      return 'Campaign-focused template with audience analytics, content calendar, and conversion tracking.';\n    case ProjectTemplateType.FINANCE:\n      return 'Financial project template with budget forecasting, expense tracking, and ROI analysis tools.';\n    case ProjectTemplateType.SUPPLY_CHAIN:\n      return 'Supply chain management template with inventory tracking, logistics planning, and vendor management.';\n    case ProjectTemplateType.WEBSITE:\n      return 'Website development template with design, development, and launch phases plus SEO tracking.';\n    case ProjectTemplateType.INFRASTRUCTURE:\n      return 'IT infrastructure template with network diagrams, deployment planning, and maintenance scheduling.';\n    default:\n      return 'Select a template to see more details.';\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}