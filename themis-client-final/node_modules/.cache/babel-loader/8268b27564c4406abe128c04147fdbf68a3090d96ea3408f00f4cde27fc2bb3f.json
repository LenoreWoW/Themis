{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';// Define the context type\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the context\nconst TaskContext=/*#__PURE__*/createContext(undefined);// Create the provider component\nexport const TaskProvider=_ref=>{let{children,projectId}=_ref;const[tasks,setTasks]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const{user,token}=useAuth();// Mock implementation of task operations\nconst addTask=async task=>{if(!token)return;setLoading(true);setError(null);try{// In a real app, you would call API here\n// const response = await api.tasks.createTask(task, token);\n// Mock successful response\nconst newTask={...task,id:Date.now().toString()};setTasks(prev=>[...prev,newTask]);}catch(err){console.error('Error adding task:',err);setError('Failed to add task');}finally{setLoading(false);}};const updateTask=async(taskId,updatedTask)=>{if(!token)return;setLoading(true);setError(null);try{// In a real app, you would call API here\n// const response = await api.tasks.updateTask(taskId, updatedTask, token);\n// Mock successful update\nsetTasks(prev=>prev.map(task=>task.id===taskId?{...task,...updatedTask}:task));}catch(err){console.error('Error updating task:',err);setError('Failed to update task');}finally{setLoading(false);}};const deleteTask=async taskId=>{if(!token)return;setLoading(true);setError(null);try{// In a real app, you would call API here\n// await api.tasks.deleteTask(taskId, token);\n// Mock successful delete\nsetTasks(prev=>prev.filter(task=>task.id!==taskId));}catch(err){console.error('Error deleting task:',err);setError('Failed to delete task');}finally{setLoading(false);}};const moveTask=async(taskId,newStatus)=>{updateTask(taskId,{status:newStatus});};// Fetch tasks when component mounts\nuseEffect(()=>{const fetchTasks=async()=>{if(!token)return;setLoading(true);setError(null);try{// In a real app, you would fetch tasks from API\n// const response = await api.tasks.getTasks(token);\n// setTasks(response.data || []);\n// For now, just use empty array\nsetTasks([]);}catch(err){console.error('Error fetching tasks:',err);setError('Failed to fetch tasks');}finally{setLoading(false);}};fetchTasks();},[token]);return/*#__PURE__*/_jsx(TaskContext.Provider,{value:{tasks,addTask,updateTask,deleteTask,moveTask,loading,error},children:children});};// Create a hook to use the task context\nexport const useTasks=()=>{const context=useContext(TaskContext);if(context===undefined){throw new Error('useTasks must be used within a TaskProvider');}return context;};export default TaskContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsx","_jsx","TaskContext","undefined","TaskProvider","_ref","children","projectId","tasks","setTasks","loading","setLoading","error","setError","user","token","addTask","task","newTask","id","Date","now","toString","prev","err","console","updateTask","taskId","updatedTask","map","deleteTask","filter","moveTask","newStatus","status","fetchTasks","Provider","value","useTasks","context","Error"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/TaskContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Task, TaskStatus } from '../types';\nimport api from '../services/api';\nimport { useAuth } from './AuthContext';\n\n// Define the context type\ninterface TaskContextType {\n  tasks: Task[];\n  addTask: (task: Task) => Promise<void>;\n  updateTask: (taskId: string, updatedTask: Partial<Task>) => Promise<void>;\n  deleteTask: (taskId: string) => Promise<void>;\n  moveTask: (taskId: string, newStatus: TaskStatus) => Promise<void>;\n  loading: boolean;\n  error: string | null;\n}\n\n// Create the context\nconst TaskContext = createContext<TaskContextType | undefined>(undefined);\n\n// Create the provider component\nexport const TaskProvider: React.FC<{ children: React.ReactNode, projectId?: string }> = ({ children, projectId }) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user, token } = useAuth();\n\n  // Mock implementation of task operations\n  const addTask = async (task: Task): Promise<void> => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real app, you would call API here\n      // const response = await api.tasks.createTask(task, token);\n      // Mock successful response\n      const newTask = { ...task, id: Date.now().toString() };\n      setTasks(prev => [...prev, newTask]);\n    } catch (err) {\n      console.error('Error adding task:', err);\n      setError('Failed to add task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateTask = async (taskId: string, updatedTask: Partial<Task>): Promise<void> => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real app, you would call API here\n      // const response = await api.tasks.updateTask(taskId, updatedTask, token);\n      // Mock successful update\n      setTasks(prev => prev.map(task => \n        task.id === taskId ? { ...task, ...updatedTask } : task\n      ));\n    } catch (err) {\n      console.error('Error updating task:', err);\n      setError('Failed to update task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteTask = async (taskId: string): Promise<void> => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real app, you would call API here\n      // await api.tasks.deleteTask(taskId, token);\n      // Mock successful delete\n      setTasks(prev => prev.filter(task => task.id !== taskId));\n    } catch (err) {\n      console.error('Error deleting task:', err);\n      setError('Failed to delete task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const moveTask = async (taskId: string, newStatus: TaskStatus): Promise<void> => {\n    updateTask(taskId, { status: newStatus });\n  };\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    const fetchTasks = async () => {\n      if (!token) return;\n      setLoading(true);\n      setError(null);\n      \n      try {\n        // In a real app, you would fetch tasks from API\n        // const response = await api.tasks.getTasks(token);\n        // setTasks(response.data || []);\n        \n        // For now, just use empty array\n        setTasks([]);\n      } catch (err) {\n        console.error('Error fetching tasks:', err);\n        setError('Failed to fetch tasks');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchTasks();\n  }, [token]);\n\n  return (\n    <TaskContext.Provider value={{ \n      tasks, \n      addTask, \n      updateTask, \n      deleteTask, \n      moveTask,\n      loading,\n      error\n    }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n\n// Create a hook to use the task context\nexport const useTasks = (): TaskContextType => {\n  const context = useContext(TaskContext);\n  if (context === undefined) {\n    throw new Error('useTasks must be used within a TaskProvider');\n  }\n  return context;\n};\n\nexport default TaskContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}