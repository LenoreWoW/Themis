{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{projectService}from'../services/ProjectService';import{jsx as _jsx}from\"react/jsx-runtime\";const ProjectContext=/*#__PURE__*/createContext(undefined);export const ProjectProvider=_ref=>{let{children}=_ref;const[projects,setProjects]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const fetchProjects=async()=>{try{setLoading(true);setError(null);const data=await projectService.getProjects();setProjects(data);}catch(err){setError(err instanceof Error?err.message:'Failed to fetch projects');}finally{setLoading(false);}};useEffect(()=>{fetchProjects();},[]);return/*#__PURE__*/_jsx(ProjectContext.Provider,{value:{projects,loading,error,fetchProjects},children:children});};export const useProjects=()=>{const context=useContext(ProjectContext);if(context===undefined){throw new Error('useProjects must be used within a ProjectProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","projectService","jsx","_jsx","ProjectContext","undefined","ProjectProvider","_ref","children","projects","setProjects","loading","setLoading","error","setError","fetchProjects","data","getProjects","err","Error","message","Provider","value","useProjects","context"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/ProjectContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Project } from '../types';\nimport { projectService } from '../services/ProjectService';\n\ninterface ProjectContextType {\n  projects: Project[];\n  loading: boolean;\n  error: string | null;\n  fetchProjects: () => Promise<void>;\n}\n\nconst ProjectContext = createContext<ProjectContextType | undefined>(undefined);\n\nexport const ProjectProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchProjects = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.getProjects();\n      setProjects(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch projects');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n\n  return (\n    <ProjectContext.Provider value={{ projects, loading, error, fetchProjects }}>\n      {children}\n    </ProjectContext.Provider>\n  );\n};\n\nexport const useProjects = () => {\n  const context = useContext(ProjectContext);\n  if (context === undefined) {\n    throw new Error('useProjects must be used within a ProjectProvider');\n  }\n  return context;\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE7E,OAASC,cAAc,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAS5D,KAAM,CAAAC,cAAc,cAAGP,aAAa,CAAiCQ,SAAS,CAAC,CAE/E,MAAO,MAAM,CAAAC,eAAwD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACnF,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAY,EAAE,CAAC,CACvD,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACc,KAAK,CAAEC,QAAQ,CAAC,CAAGf,QAAQ,CAAgB,IAAI,CAAC,CAEvD,KAAM,CAAAgB,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAE,IAAI,CAAG,KAAM,CAAAf,cAAc,CAACgB,WAAW,CAAC,CAAC,CAC/CP,WAAW,CAACM,IAAI,CAAC,CACnB,CAAE,MAAOE,GAAG,CAAE,CACZJ,QAAQ,CAACI,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,0BAA0B,CAAC,CAC3E,CAAC,OAAS,CACRR,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDZ,SAAS,CAAC,IAAM,CACde,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEZ,IAAA,CAACC,cAAc,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEb,QAAQ,CAAEE,OAAO,CAAEE,KAAK,CAAEE,aAAc,CAAE,CAAAP,QAAA,CACzEA,QAAQ,CACc,CAAC,CAE9B,CAAC,CAED,MAAO,MAAM,CAAAe,WAAW,CAAGA,CAAA,GAAM,CAC/B,KAAM,CAAAC,OAAO,CAAG1B,UAAU,CAACM,cAAc,CAAC,CAC1C,GAAIoB,OAAO,GAAKnB,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAc,KAAK,CAAC,mDAAmD,CAAC,CACtE,CACA,MAAO,CAAAK,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}