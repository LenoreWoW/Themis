{"ast":null,"code":"// Add this import at the top of the file\n\n// User-related types\nexport let UserRole = /*#__PURE__*/function (UserRole) {\n  UserRole[\"ADMIN\"] = \"ADMIN\";\n  UserRole[\"PROJECT_MANAGER\"] = \"PROJECT_MANAGER\";\n  UserRole[\"SUB_PMO\"] = \"SUB_PMO\";\n  UserRole[\"MAIN_PMO\"] = \"MAIN_PMO\";\n  UserRole[\"DEPARTMENT_DIRECTOR\"] = \"DEPARTMENT_DIRECTOR\";\n  UserRole[\"EXECUTIVE\"] = \"EXECUTIVE\";\n  UserRole[\"TEAM_LEAD\"] = \"TEAM_LEAD\";\n  UserRole[\"DEVELOPER\"] = \"DEVELOPER\";\n  UserRole[\"PENDING\"] = \"PENDING\";\n  return UserRole;\n}({});\n\n// Helper functions for role-based permissions\nexport const canManageProjects = role => {\n  return role === UserRole.ADMIN || role === UserRole.PROJECT_MANAGER || role === UserRole.SUB_PMO || role === UserRole.MAIN_PMO;\n};\nexport const canApproveProjects = role => {\n  return role === UserRole.ADMIN || role === UserRole.SUB_PMO || role === UserRole.MAIN_PMO;\n};\nexport const canAddTasks = role => {\n  return role === UserRole.ADMIN || role === UserRole.PROJECT_MANAGER || role === UserRole.SUB_PMO || role === UserRole.MAIN_PMO;\n};\nexport const canRequestTasks = role => {\n  return role === UserRole.ADMIN || role === UserRole.PROJECT_MANAGER || role === UserRole.SUB_PMO || role === UserRole.MAIN_PMO;\n};\nexport const canViewAllProjects = role => {\n  return role === UserRole.ADMIN || role === UserRole.MAIN_PMO || role === UserRole.EXECUTIVE;\n};\n\n// Department interface\n\n// Project-related types\nexport let ProjectStatus = /*#__PURE__*/function (ProjectStatus) {\n  ProjectStatus[\"PLANNING\"] = \"PLANNING\";\n  ProjectStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  ProjectStatus[\"ON_HOLD\"] = \"ON_HOLD\";\n  ProjectStatus[\"COMPLETED\"] = \"COMPLETED\";\n  ProjectStatus[\"CANCELLED\"] = \"CANCELLED\";\n  return ProjectStatus;\n}({});\nexport let ProjectPriority = /*#__PURE__*/function (ProjectPriority) {\n  ProjectPriority[\"LOW\"] = \"LOW\";\n  ProjectPriority[\"MEDIUM\"] = \"MEDIUM\";\n  ProjectPriority[\"HIGH\"] = \"HIGH\";\n  ProjectPriority[\"CRITICAL\"] = \"CRITICAL\";\n  return ProjectPriority;\n}({});\nexport let ProjectRiskLevel = /*#__PURE__*/function (ProjectRiskLevel) {\n  ProjectRiskLevel[\"LOW\"] = \"LOW\";\n  ProjectRiskLevel[\"MEDIUM\"] = \"MEDIUM\";\n  ProjectRiskLevel[\"HIGH\"] = \"HIGH\";\n  ProjectRiskLevel[\"CRITICAL\"] = \"CRITICAL\";\n  return ProjectRiskLevel;\n}({});\n\n// Attachment interface\n\n// Task-related types\nexport let TaskStatus = /*#__PURE__*/function (TaskStatus) {\n  TaskStatus[\"TODO\"] = \"TODO\";\n  TaskStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  TaskStatus[\"REVIEW\"] = \"REVIEW\";\n  TaskStatus[\"DONE\"] = \"DONE\";\n  return TaskStatus;\n}({});\nexport let TaskPriority = /*#__PURE__*/function (TaskPriority) {\n  TaskPriority[\"LOW\"] = \"LOW\";\n  TaskPriority[\"MEDIUM\"] = \"MEDIUM\";\n  TaskPriority[\"HIGH\"] = \"HIGH\";\n  return TaskPriority;\n}({});\n\n// Task comment interface\n\n// Risk-related types\nexport let RiskStatus = /*#__PURE__*/function (RiskStatus) {\n  RiskStatus[\"IDENTIFIED\"] = \"IDENTIFIED\";\n  RiskStatus[\"ASSESSED\"] = \"ASSESSED\";\n  RiskStatus[\"MITIGATED\"] = \"MITIGATED\";\n  RiskStatus[\"CLOSED\"] = \"CLOSED\";\n  return RiskStatus;\n}({});\nexport let RiskImpact = /*#__PURE__*/function (RiskImpact) {\n  RiskImpact[\"LOW\"] = \"LOW\";\n  RiskImpact[\"MEDIUM\"] = \"MEDIUM\";\n  RiskImpact[\"HIGH\"] = \"HIGH\";\n  RiskImpact[\"CRITICAL\"] = \"CRITICAL\";\n  return RiskImpact;\n}({});\n// Issue-related types\nexport let IssueStatus = /*#__PURE__*/function (IssueStatus) {\n  IssueStatus[\"OPEN\"] = \"OPEN\";\n  IssueStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  IssueStatus[\"RESOLVED\"] = \"RESOLVED\";\n  IssueStatus[\"CLOSED\"] = \"CLOSED\";\n  return IssueStatus;\n}({});\n// Weekly update types\nexport let UpdateStatus = /*#__PURE__*/function (UpdateStatus) {\n  UpdateStatus[\"DRAFT\"] = \"DRAFT\";\n  UpdateStatus[\"SUBMITTED\"] = \"SUBMITTED\";\n  UpdateStatus[\"APPROVED_BY_SUB_PMO\"] = \"APPROVED_BY_SUB_PMO\";\n  UpdateStatus[\"APPROVED_BY_MAIN_PMO\"] = \"APPROVED_BY_MAIN_PMO\";\n  UpdateStatus[\"REJECTED\"] = \"REJECTED\";\n  return UpdateStatus;\n}({});\n\n// Weekly Update interface for project update tracking\n\n// Change Request Types\nexport let ChangeRequestType = /*#__PURE__*/function (ChangeRequestType) {\n  ChangeRequestType[\"SCHEDULE\"] = \"SCHEDULE\";\n  ChangeRequestType[\"BUDGET\"] = \"BUDGET\";\n  ChangeRequestType[\"SCOPE\"] = \"SCOPE\";\n  ChangeRequestType[\"RESOURCE\"] = \"RESOURCE\";\n  ChangeRequestType[\"CLOSURE\"] = \"CLOSURE\";\n  ChangeRequestType[\"OTHER\"] = \"OTHER\";\n  return ChangeRequestType;\n}({});\nexport let ChangeRequestStatus = /*#__PURE__*/function (ChangeRequestStatus) {\n  ChangeRequestStatus[\"PENDING\"] = \"PENDING\";\n  ChangeRequestStatus[\"APPROVED\"] = \"APPROVED\";\n  ChangeRequestStatus[\"REJECTED\"] = \"REJECTED\";\n  return ChangeRequestStatus;\n}({});\n\n// Financial types\n\n// Notification types\nexport let NotificationType = /*#__PURE__*/function (NotificationType) {\n  NotificationType[\"TASK_ASSIGNED\"] = \"TASK_ASSIGNED\";\n  NotificationType[\"TASK_DUE_SOON\"] = \"TASK_DUE_SOON\";\n  NotificationType[\"TASK_OVERDUE\"] = \"TASK_OVERDUE\";\n  NotificationType[\"UPDATE_DUE\"] = \"UPDATE_DUE\";\n  NotificationType[\"UPDATE_APPROVED\"] = \"UPDATE_APPROVED\";\n  NotificationType[\"UPDATE_REJECTED\"] = \"UPDATE_REJECTED\";\n  NotificationType[\"CHANGE_REQUEST_APPROVED\"] = \"CHANGE_REQUEST_APPROVED\";\n  NotificationType[\"CHANGE_REQUEST_REJECTED\"] = \"CHANGE_REQUEST_REJECTED\";\n  NotificationType[\"APPROVAL_NEEDED\"] = \"APPROVAL_NEEDED\";\n  return NotificationType;\n}({});\n// Audit log types\nexport let AuditAction = /*#__PURE__*/function (AuditAction) {\n  AuditAction[\"CREATE\"] = \"CREATE\";\n  AuditAction[\"UPDATE\"] = \"UPDATE\";\n  AuditAction[\"DELETE\"] = \"DELETE\";\n  AuditAction[\"LOGIN\"] = \"LOGIN\";\n  AuditAction[\"LOGOUT\"] = \"LOGOUT\";\n  AuditAction[\"APPROVE\"] = \"APPROVE\";\n  AuditAction[\"REJECT\"] = \"REJECT\";\n  AuditAction[\"SUBMIT\"] = \"SUBMIT\";\n  return AuditAction;\n}({});\n\n// KPI types\n\n// Project Charter types\n\n// Meeting-related types\nexport let MeetingStatus = /*#__PURE__*/function (MeetingStatus) {\n  MeetingStatus[\"SCHEDULED\"] = \"SCHEDULED\";\n  MeetingStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  MeetingStatus[\"COMPLETED\"] = \"COMPLETED\";\n  MeetingStatus[\"CANCELLED\"] = \"CANCELLED\";\n  return MeetingStatus;\n}({});\nexport let AssignmentStatus = /*#__PURE__*/function (AssignmentStatus) {\n  AssignmentStatus[\"PENDING\"] = \"PENDING\";\n  AssignmentStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  AssignmentStatus[\"COMPLETED\"] = \"COMPLETED\";\n  AssignmentStatus[\"CANCELLED\"] = \"CANCELLED\";\n  return AssignmentStatus;\n}({});\n\n// API Response type\n\nexport let TaskRequestStatus = /*#__PURE__*/function (TaskRequestStatus) {\n  TaskRequestStatus[\"PENDING\"] = \"PENDING\";\n  TaskRequestStatus[\"APPROVED\"] = \"APPROVED\";\n  TaskRequestStatus[\"REJECTED\"] = \"REJECTED\";\n  TaskRequestStatus[\"IN_REVIEW\"] = \"IN_REVIEW\";\n  return TaskRequestStatus;\n}({});\n// Goal-related types\nexport let GoalType = /*#__PURE__*/function (GoalType) {\n  GoalType[\"STRATEGIC\"] = \"STRATEGIC\";\n  GoalType[\"ANNUAL\"] = \"ANNUAL\";\n  GoalType[\"QUARTERLY\"] = \"QUARTERLY\";\n  GoalType[\"MONTHLY\"] = \"MONTHLY\";\n  return GoalType;\n}({});\nexport let GoalCategory = /*#__PURE__*/function (GoalCategory) {\n  GoalCategory[\"PERFORMANCE\"] = \"PERFORMANCE\";\n  GoalCategory[\"FINANCIAL\"] = \"FINANCIAL\";\n  GoalCategory[\"CUSTOMER\"] = \"CUSTOMER\";\n  GoalCategory[\"LEARNING\"] = \"LEARNING\";\n  GoalCategory[\"PROCESS\"] = \"PROCESS\";\n  return GoalCategory;\n}({});\nexport let GoalStatus = /*#__PURE__*/function (GoalStatus) {\n  GoalStatus[\"NOT_STARTED\"] = \"NOT_STARTED\";\n  GoalStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  GoalStatus[\"COMPLETED\"] = \"COMPLETED\";\n  GoalStatus[\"ON_HOLD\"] = \"ON_HOLD\";\n  return GoalStatus;\n}({});\n\n// Define an interface for weighted project links\n\n// Add a new interface for review comments\n\nexport * from './project-closure';\nexport * from './change-request';","map":{"version":3,"names":["UserRole","canManageProjects","role","ADMIN","PROJECT_MANAGER","SUB_PMO","MAIN_PMO","canApproveProjects","canAddTasks","canRequestTasks","canViewAllProjects","EXECUTIVE","ProjectStatus","ProjectPriority","ProjectRiskLevel","TaskStatus","TaskPriority","RiskStatus","RiskImpact","IssueStatus","UpdateStatus","ChangeRequestType","ChangeRequestStatus","NotificationType","AuditAction","MeetingStatus","AssignmentStatus","TaskRequestStatus","GoalType","GoalCategory","GoalStatus"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/types/index.ts"],"sourcesContent":["// Add this import at the top of the file\nimport { ApprovalStatus } from '../context/AuthContext';\n\n// User-related types\nexport enum UserRole {\n  ADMIN = 'ADMIN',\n  PROJECT_MANAGER = 'PROJECT_MANAGER',\n  SUB_PMO = 'SUB_PMO',\n  MAIN_PMO = 'MAIN_PMO',\n  DEPARTMENT_DIRECTOR = 'DEPARTMENT_DIRECTOR',\n  EXECUTIVE = 'EXECUTIVE',\n  TEAM_LEAD = 'TEAM_LEAD',\n  DEVELOPER = 'DEVELOPER',\n  PENDING = 'PENDING'\n}\n\n// Helper functions for role-based permissions\nexport const canManageProjects = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.PROJECT_MANAGER || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canApproveProjects = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canAddTasks = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.PROJECT_MANAGER || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canRequestTasks = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN ||\n         role === UserRole.PROJECT_MANAGER || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canViewAllProjects = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.MAIN_PMO || \n         role === UserRole.EXECUTIVE;\n};\n\n// Department interface\nexport interface Department {\n  id: string;\n  name: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface User {\n  id: string;\n  username: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: UserRole;\n  department: Department;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AuthResponse {\n  userId: string;\n  username: string;\n  role: UserRole;\n  departmentId?: string;\n  token: string;\n  success: boolean;\n  message: string;\n  user?: User; // Keep for backward compatibility\n}\n\n// Project-related types\nexport enum ProjectStatus {\n  PLANNING = 'PLANNING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  ON_HOLD = 'ON_HOLD',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED'\n}\n\nexport enum ProjectPriority {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\nexport enum ProjectRiskLevel {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\n// Attachment interface\nexport interface Attachment {\n  id: string;\n  name: string;\n  filename: string;\n  type: string;\n  size: number;\n  url: string;\n  uploadedBy: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Project {\n  id: string;\n  name: string;\n  description: string;\n  startDate: string;\n  endDate: string;\n  status: ProjectStatus;\n  projectManager?: User;\n  department?: Department;\n  budget: number;\n  goalsLink?: string;\n  client?: string;\n  actualCost?: number;\n  priority: ProjectPriority;\n  createdAt: string;\n  updatedAt: string;\n  // Add approval workflow properties\n  approvalStatus?: ApprovalStatus;\n  comments?: string;\n  reviewHistory?: ReviewComment[];\n  lastReviewedBy?: User;\n  lastReviewedAt?: string;\n  progress?: number;\n  // Legacy project properties\n  legacyImport?: boolean;\n  isDraft?: boolean;\n}\n\n// Task-related types\nexport enum TaskStatus {\n  TODO = 'TODO',\n  IN_PROGRESS = 'IN_PROGRESS',\n  REVIEW = 'REVIEW',\n  DONE = 'DONE'\n}\n\nexport enum TaskPriority {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH'\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  description: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  startDate: string;\n  dueDate: string;\n  projectId: string;\n  assignee?: User;\n  createdAt: string;\n  updatedAt: string;\n  comments?: TaskComment[];\n}\n\n// Task comment interface\nexport interface TaskComment {\n  id: string;\n  taskId: string;\n  text: string;\n  createdAt: string;\n  updatedAt: string;\n  author: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n}\n\n// Risk-related types\nexport enum RiskStatus {\n  IDENTIFIED = 'IDENTIFIED',\n  ASSESSED = 'ASSESSED',\n  MITIGATED = 'MITIGATED',\n  CLOSED = 'CLOSED'\n}\n\nexport enum RiskImpact {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\nexport interface Risk {\n  id: string;\n  projectId: string;\n  title: string;\n  description: string;\n  status: RiskStatus;\n  impact: RiskImpact;\n  probability: number; // 0-100\n  mitigation: string;\n  owner: User;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Issue-related types\nexport enum IssueStatus {\n  OPEN = 'OPEN',\n  IN_PROGRESS = 'IN_PROGRESS',\n  RESOLVED = 'RESOLVED',\n  CLOSED = 'CLOSED'\n}\n\nexport interface Issue {\n  id: string;\n  projectId: string;\n  title: string;\n  description: string;\n  status: IssueStatus;\n  impact: RiskImpact;\n  owner: User;\n  resolutionSummary?: string;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Weekly update types\nexport enum UpdateStatus {\n  DRAFT = 'DRAFT',\n  SUBMITTED = 'SUBMITTED',\n  APPROVED_BY_SUB_PMO = 'APPROVED_BY_SUB_PMO',\n  APPROVED_BY_MAIN_PMO = 'APPROVED_BY_MAIN_PMO',\n  REJECTED = 'REJECTED'\n}\n\n// Weekly Update interface for project update tracking\nexport interface WeeklyUpdate {\n  id: string;\n  projectId: string;\n  content: string;\n  weekNumber: number;\n  weekYear: number;\n  attachments: Attachment[];\n  author: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Change Request Types\nexport enum ChangeRequestType {\n  SCHEDULE = 'SCHEDULE',\n  BUDGET = 'BUDGET',\n  SCOPE = 'SCOPE',\n  RESOURCE = 'RESOURCE',\n  CLOSURE = 'CLOSURE',\n  OTHER = 'OTHER'\n}\n\nexport enum ChangeRequestStatus {\n  PENDING = 'PENDING',\n  APPROVED = 'APPROVED',\n  REJECTED = 'REJECTED'\n}\n\nexport interface ChangeRequest {\n  id: string;\n  projectId: string;\n  title: string;\n  description: string;\n  type: ChangeRequestType;\n  status: ChangeRequestStatus;\n  submittedBy: string;\n  submittedDate: Date;\n  reviewedBy?: string;\n  reviewedDate?: Date;\n  reviewNotes?: string;\n  \n  // Type-specific fields\n  newEndDate?: Date;           // For SCHEDULE type\n  additionalBudget?: number;   // For BUDGET type\n  currentBudget?: number;      // For BUDGET type\n  newBudget?: number;          // For BUDGET type\n  scopeDetails?: string;       // For SCOPE type\n  resourceDetails?: string;    // For RESOURCE type\n  closureDetails?: string;     // For CLOSURE type\n  otherDetails?: string;       // For OTHER type\n  \n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Financial types\nexport interface FinancialEntry {\n  id: string;\n  projectId: string;\n  category: string;\n  description: string;\n  amount: number;\n  type: 'BUDGET' | 'ACTUAL'; // Budget or actual expense\n  date: string;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Notification types\nexport enum NotificationType {\n  TASK_ASSIGNED = 'TASK_ASSIGNED',\n  TASK_DUE_SOON = 'TASK_DUE_SOON',\n  TASK_OVERDUE = 'TASK_OVERDUE',\n  UPDATE_DUE = 'UPDATE_DUE',\n  UPDATE_APPROVED = 'UPDATE_APPROVED',\n  UPDATE_REJECTED = 'UPDATE_REJECTED',\n  CHANGE_REQUEST_APPROVED = 'CHANGE_REQUEST_APPROVED',\n  CHANGE_REQUEST_REJECTED = 'CHANGE_REQUEST_REJECTED',\n  APPROVAL_NEEDED = 'APPROVAL_NEEDED'\n}\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  relatedItemId?: string;\n  relatedItemType?: string;\n  isRead: boolean;\n  createdAt: string;\n}\n\n// Audit log types\nexport enum AuditAction {\n  CREATE = 'CREATE',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n  LOGIN = 'LOGIN',\n  LOGOUT = 'LOGOUT',\n  APPROVE = 'APPROVE',\n  REJECT = 'REJECT',\n  SUBMIT = 'SUBMIT'\n}\n\nexport interface AuditLog {\n  id: string;\n  userId: string;\n  action: AuditAction;\n  entityType: string;\n  entityId: string;\n  details: string;\n  ipAddress: string;\n  createdAt: string;\n}\n\n// KPI types\nexport interface KPI {\n  id: string;\n  projectId: string;\n  name: string;\n  description: string;\n  target: number;\n  actual: number;\n  unit: string;\n  frequency: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY';\n  isHigherBetter: boolean;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Project Charter types\nexport interface ProjectCharter {\n  id: string;\n  projectId: string;\n  vision: string;\n  objectives: string;\n  scope: string;\n  outOfScope: string;\n  assumptions: string;\n  constraints: string;\n  stakeholders: string;\n  deliverables: string;\n  successCriteria: string;\n  risks: string;\n  approvedBy?: User;\n  approvedAt?: string;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Meeting-related types\nexport enum MeetingStatus {\n  SCHEDULED = 'SCHEDULED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED'\n}\n\nexport interface Meeting {\n  id: string;\n  title: string;\n  description: string;\n  startTime: string;\n  endTime: string;\n  status: MeetingStatus;\n  organizer: User;\n  participants: User[];\n  isActive: boolean;\n  meetingLink: string;\n  createdAt: string;\n  updatedAt?: string;\n}\n\nexport enum AssignmentStatus {\n  PENDING = 'PENDING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED'\n}\n\nexport interface Assignment {\n  id: string;\n  title: string;\n  description: string;\n  status: AssignmentStatus;\n  priority: TaskPriority;\n  assignedBy: User;\n  assignedTo: User;\n  dueDate: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// API Response type\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\nexport enum TaskRequestStatus {\n  PENDING = 'PENDING',\n  APPROVED = 'APPROVED',\n  REJECTED = 'REJECTED',\n  IN_REVIEW = 'IN_REVIEW'\n}\n\nexport interface TaskRequest {\n  id: string;\n  title: string;\n  description: string;\n  priority: TaskPriority;\n  dueDate: string;\n  projectId: string;\n  requestedBy: User;\n  status: TaskRequestStatus;\n  reviewer?: User;\n  reviewNotes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Goal-related types\nexport enum GoalType {\n  STRATEGIC = 'STRATEGIC',\n  ANNUAL = 'ANNUAL',\n  QUARTERLY = 'QUARTERLY',\n  MONTHLY = 'MONTHLY'\n}\n\nexport enum GoalCategory {\n  PERFORMANCE = 'PERFORMANCE',\n  FINANCIAL = 'FINANCIAL',\n  CUSTOMER = 'CUSTOMER',\n  LEARNING = 'LEARNING',\n  PROCESS = 'PROCESS'\n}\n\nexport enum GoalStatus {\n  NOT_STARTED = 'NOT_STARTED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  ON_HOLD = 'ON_HOLD'\n}\n\nexport interface Goal {\n  id: string;\n  title: string;\n  description: string;\n  type: GoalType;\n  category: GoalCategory;\n  status: GoalStatus;\n  progress: number;\n  startDate: string;\n  endDate: string;\n  assignedTo: string;\n  linkedProjects: ProjectWeight[];\n  isProgressAutoCalculated: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Define an interface for weighted project links\nexport interface ProjectWeight {\n  projectId: string;\n  weight: number; // Weight as a percentage (0-100)\n}\n\n// Add a new interface for review comments\nexport interface ReviewComment {\n  id?: string;\n  text: string;\n  createdAt: string;\n  user: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email?: string;\n  };\n  action: 'APPROVE' | 'REJECT' | 'REQUEST_CHANGES' | 'SUBMIT';\n}\n\nexport * from './project-closure';\nexport * from './change-request'; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}