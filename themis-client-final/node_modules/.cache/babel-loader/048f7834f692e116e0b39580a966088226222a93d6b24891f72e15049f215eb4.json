{"ast":null,"code":"import{ProjectTemplateType}from'../types';import api from'../services/api';// SVG Templates with placeholders for dynamic data\nconst generateDynamicTemplateSvg=(templateType,data)=>{const{projectCount,inProgressCount,completedCount,tasksCount,averageProgress,upcomingTasks,color,name}=data;// Calculate progress circle arc length (complete circle circumference is 440)\nconst progressCircumference=440;const progressValue=Math.min(100,Math.max(0,averageProgress));// Ensure between 0-100\nconst dashArrayValue=progressValue/100*progressCircumference;// Format tasks for display\nconst taskItems=upcomingTasks.slice(0,4).map((task,index)=>`<rect x=\"530\" y=\"${240+index*40}\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n     <text x=\"540\" y=\"${260+index*40}\" font-family=\"Arial\" font-size=\"12\" fill=\"#333\">${task.length>25?task.substring(0,25)+'...':task}</text>`).join('');// Create SVG with dynamic data\nconst svgContent=`\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f0f0f0\" />\n      \n      <!-- Header bar -->\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"20\" y=\"38\" font-family=\"Arial\" font-size=\"18\" fill=\"white\">${name} Project Template</text>\n      \n      <!-- Left sidebar -->\n      <rect x=\"0\" y=\"60\" width=\"200\" height=\"540\" fill=\"#e0e0e0\" />\n      \n      <!-- Main content area with mock sections -->\n      <rect x=\"220\" y=\"80\" width=\"560\" height=\"120\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"105\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Dashboard</text>\n      <rect x=\"240\" y=\"130\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"150\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"170\" width=\"400\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      \n      <!-- Chart area with actual stats -->\n      <rect x=\"220\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Status</text>\n      \n      <!-- Progress Circle -->\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"#eee\" stroke-width=\"30\" />\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"${color}\" stroke-width=\"30\" \n              stroke-dasharray=\"${dashArrayValue} ${progressCircumference}\" transform=\"rotate(-90, 355, 310)\" />\n      <text x=\"355\" y=\"310\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\" dominant-baseline=\"middle\">${progressValue}%</text>\n      <text x=\"355\" y=\"340\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\" text-anchor=\"middle\">Completion</text>\n      \n      <!-- Project Stats -->\n      <text x=\"240\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">Total Projects: ${projectCount}</text>\n      <text x=\"380\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">In Progress: ${inProgressCount}</text>\n      \n      <!-- Task list area with actual tasks -->\n      <rect x=\"510\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"530\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Upcoming Tasks (${tasksCount})</text>\n      \n      ${taskItems}\n      \n      <!-- Calendar/timeline area -->\n      <rect x=\"220\" y=\"420\" width=\"560\" height=\"160\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"445\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Timeline</text>\n      <rect x=\"240\" y=\"450\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"490\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"530\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      \n      <rect x=\"280\" y=\"460\" width=\"100\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      <rect x=\"420\" y=\"460\" width=\"150\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.4\" />\n      <rect x=\"320\" y=\"500\" width=\"120\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.5\" />\n      <rect x=\"580\" y=\"500\" width=\"80\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"480\" y=\"540\" width=\"130\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      \n      <!-- Sidebar items -->\n      <rect x=\"20\" y=\"100\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"140\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"180\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"220\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"260\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      \n      <!-- Template name overlay for clarity -->\n      <rect x=\"230\" y=\"540\" width=\"300\" height=\"30\" rx=\"15\" fill=\"rgba(255,255,255,0.9)\" />\n      <text x=\"250\" y=\"562\" font-family=\"Arial\" font-size=\"16\" fill=\"${color}\">${name} Template Preview</text>\n    </svg>\n  `;return svgContent;};// Fetch real project data for template preview\nconst fetchProjectData=async()=>{try{// Default values in case API call fails\nlet results={projectCount:12,inProgressCount:8,completedCount:2,tasksCount:24,averageProgress:45,upcomingTasks:[\"Website Design Update\",\"Content Migration\",\"Testing Phase 1\",\"Deploy to Staging\"]};// Try to get real data from API\nconst projectsResponse=await api.projects.getAllProjects('');if(projectsResponse.data){const projects=projectsResponse.data;results.projectCount=projects.length;results.inProgressCount=projects.filter(p=>p.status==='IN_PROGRESS').length;results.completedCount=projects.filter(p=>p.status==='COMPLETED').length;results.averageProgress=projects.length>0?Math.round(projects.reduce((acc,p)=>acc+(p.progress||0),0)/projects.length):0;// Try to get tasks - using the correct API method\nconst tasksLists=await Promise.all(projects.slice(0,3).map(p=>api.tasks.getAllTasks(p.id,'')));const allTasks=tasksLists.flatMap(r=>r.data||[]).filter(Boolean);results.tasksCount=allTasks.length;// Get upcoming tasks (not completed)\nconst upcomingTasks=allTasks.filter(t=>t.status!=='COMPLETED').sort((a,b)=>new Date(a.dueDate).getTime()-new Date(b.dueDate).getTime()).map(t=>t.title);if(upcomingTasks.length>0){results.upcomingTasks=upcomingTasks;}}return results;}catch(error){console.error(\"Error fetching project data for template preview:\",error);// Return default data on error\nreturn{projectCount:12,inProgressCount:7,completedCount:3,tasksCount:24,averageProgress:45,upcomingTasks:[\"Website Design Update\",\"Content Migration\",\"Testing Phase 1\",\"Deploy to Staging\"]};}};// Cache for project data to avoid too many API calls\nlet cachedProjectData=null;let lastFetchTime=0;const CACHE_LIFETIME=60000;// 1 minute in milliseconds\n// Function to generate placeholder images for template previews\nexport const generateTemplatePlaceholder=async templateType=>{// Create a unique color for each template type\nconst getColorForTemplate=type=>{switch(type){case ProjectTemplateType.DEFAULT:return'#4A6572';case ProjectTemplateType.ERP:return'#0277BD';case ProjectTemplateType.MARKETING:return'#C2185B';case ProjectTemplateType.FINANCE:return'#00796B';case ProjectTemplateType.SUPPLY_CHAIN:return'#E65100';case ProjectTemplateType.WEBSITE:return'#6A1B9A';case ProjectTemplateType.INFRASTRUCTURE:return'#283593';default:return'#757575';}};// Get a name for the template\nconst getTemplateName=type=>{switch(type){case ProjectTemplateType.DEFAULT:return'Default';case ProjectTemplateType.ERP:return'ERP';case ProjectTemplateType.MARKETING:return'Marketing';case ProjectTemplateType.FINANCE:return'Finance';case ProjectTemplateType.SUPPLY_CHAIN:return'Supply Chain';case ProjectTemplateType.WEBSITE:return'Website';case ProjectTemplateType.INFRASTRUCTURE:return'Infrastructure';default:return'Template';}};// Check if we need to fetch new data\nconst now=Date.now();if(!cachedProjectData||now-lastFetchTime>CACHE_LIFETIME){cachedProjectData=await fetchProjectData();lastFetchTime=now;}// Generate an SVG placeholder with unique styling per template\nconst color=getColorForTemplate(templateType);const name=getTemplateName(templateType);// Generate the SVG with dynamic data\nconst svgContent=generateDynamicTemplateSvg(templateType,{...cachedProjectData,color,name});// Convert the SVG to a data URL\nconst svgBase64=btoa(svgContent);return`data:image/svg+xml;base64,${svgBase64}`;};// Export template image URLs - make compatible with both async and sync usage\nexport const getTemplatePreviewPath=templateType=>{// Create a temporary SVG while the real one loads\nconst color=templateType===ProjectTemplateType.DEFAULT?'#4A6572':templateType===ProjectTemplateType.ERP?'#0277BD':templateType===ProjectTemplateType.MARKETING?'#C2185B':templateType===ProjectTemplateType.FINANCE?'#00796B':templateType===ProjectTemplateType.SUPPLY_CHAIN?'#E65100':templateType===ProjectTemplateType.WEBSITE?'#6A1B9A':templateType===ProjectTemplateType.INFRASTRUCTURE?'#283593':'#757575';const name=templateType===ProjectTemplateType.DEFAULT?'Default':templateType===ProjectTemplateType.ERP?'ERP':templateType===ProjectTemplateType.MARKETING?'Marketing':templateType===ProjectTemplateType.FINANCE?'Finance':templateType===ProjectTemplateType.SUPPLY_CHAIN?'Supply Chain':templateType===ProjectTemplateType.WEBSITE?'Website':templateType===ProjectTemplateType.INFRASTRUCTURE?'Infrastructure':'Template';// Simple placeholder SVG while loading\nconst simpleSvg=`\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f5f5f5\" />\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"400\" y=\"300\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\">Loading ${name} Template Preview...</text>\n    </svg>\n  `;const svgBase64=btoa(simpleSvg);// Start loading the actual template\ngenerateTemplatePlaceholder(templateType).then(dataUrl=>{// When ready, find all images with this placeholder and replace them\nconst placeholderId=`template-placeholder-${templateType}`;if(typeof document!=='undefined'){document.querySelectorAll(`img[data-placeholder-id=\"${placeholderId}\"]`).forEach(img=>{img.src=dataUrl;});}});return`data:image/svg+xml;base64,${svgBase64}`;};// Get template description based on type\nexport const getTemplateDescription=templateType=>{switch(templateType){case ProjectTemplateType.DEFAULT:return'A standard project layout with basic task tracking and team management.';case ProjectTemplateType.ERP:return'Enterprise Resource Planning template with modules for operations, HR, and finance integration.';case ProjectTemplateType.MARKETING:return'Campaign-focused template with audience analytics, content calendar, and conversion tracking.';case ProjectTemplateType.FINANCE:return'Financial project template with budget forecasting, expense tracking, and ROI analysis tools.';case ProjectTemplateType.SUPPLY_CHAIN:return'Supply chain management template with inventory tracking, logistics planning, and vendor management.';case ProjectTemplateType.WEBSITE:return'Website development template with design, development, and launch phases plus SEO tracking.';case ProjectTemplateType.INFRASTRUCTURE:return'IT infrastructure template with network diagrams, deployment planning, and maintenance scheduling.';default:return'Select a template to see more details.';}};","map":{"version":3,"names":["ProjectTemplateType","api","generateDynamicTemplateSvg","templateType","data","projectCount","inProgressCount","completedCount","tasksCount","averageProgress","upcomingTasks","color","name","progressCircumference","progressValue","Math","min","max","dashArrayValue","taskItems","slice","map","task","index","length","substring","join","svgContent","fetchProjectData","results","projectsResponse","projects","getAllProjects","filter","p","status","round","reduce","acc","progress","tasksLists","Promise","all","tasks","getAllTasks","id","allTasks","flatMap","r","Boolean","t","sort","a","b","Date","dueDate","getTime","title","error","console","cachedProjectData","lastFetchTime","CACHE_LIFETIME","generateTemplatePlaceholder","getColorForTemplate","type","DEFAULT","ERP","MARKETING","FINANCE","SUPPLY_CHAIN","WEBSITE","INFRASTRUCTURE","getTemplateName","now","svgBase64","btoa","getTemplatePreviewPath","simpleSvg","then","dataUrl","placeholderId","document","querySelectorAll","forEach","img","src","getTemplateDescription"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/imagePlaceholders.ts"],"sourcesContent":["import { ProjectTemplateType } from '../types';\nimport api from '../services/api';\n\n// SVG Templates with placeholders for dynamic data\nconst generateDynamicTemplateSvg = (\n  templateType: ProjectTemplateType, \n  data: {\n    projectCount: number;\n    inProgressCount: number;\n    completedCount: number;\n    tasksCount: number;\n    averageProgress: number;\n    upcomingTasks: string[];\n    color: string;\n    name: string;\n  }\n) => {\n  const { \n    projectCount, \n    inProgressCount,\n    completedCount,\n    tasksCount,\n    averageProgress, \n    upcomingTasks,\n    color,\n    name\n  } = data;\n\n  // Calculate progress circle arc length (complete circle circumference is 440)\n  const progressCircumference = 440;\n  const progressValue = Math.min(100, Math.max(0, averageProgress)); // Ensure between 0-100\n  const dashArrayValue = (progressValue / 100) * progressCircumference;\n  \n  // Format tasks for display\n  const taskItems = upcomingTasks.slice(0, 4).map((task, index) => \n    `<rect x=\"530\" y=\"${240 + index * 40}\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n     <text x=\"540\" y=\"${260 + index * 40}\" font-family=\"Arial\" font-size=\"12\" fill=\"#333\">${task.length > 25 ? task.substring(0, 25) + '...' : task}</text>`\n  ).join('');\n\n  // Create SVG with dynamic data\n  const svgContent = `\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f0f0f0\" />\n      \n      <!-- Header bar -->\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"20\" y=\"38\" font-family=\"Arial\" font-size=\"18\" fill=\"white\">${name} Project Template</text>\n      \n      <!-- Left sidebar -->\n      <rect x=\"0\" y=\"60\" width=\"200\" height=\"540\" fill=\"#e0e0e0\" />\n      \n      <!-- Main content area with mock sections -->\n      <rect x=\"220\" y=\"80\" width=\"560\" height=\"120\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"105\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Dashboard</text>\n      <rect x=\"240\" y=\"130\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"150\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"170\" width=\"400\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      \n      <!-- Chart area with actual stats -->\n      <rect x=\"220\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Status</text>\n      \n      <!-- Progress Circle -->\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"#eee\" stroke-width=\"30\" />\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"${color}\" stroke-width=\"30\" \n              stroke-dasharray=\"${dashArrayValue} ${progressCircumference}\" transform=\"rotate(-90, 355, 310)\" />\n      <text x=\"355\" y=\"310\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\" dominant-baseline=\"middle\">${progressValue}%</text>\n      <text x=\"355\" y=\"340\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\" text-anchor=\"middle\">Completion</text>\n      \n      <!-- Project Stats -->\n      <text x=\"240\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">Total Projects: ${projectCount}</text>\n      <text x=\"380\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">In Progress: ${inProgressCount}</text>\n      \n      <!-- Task list area with actual tasks -->\n      <rect x=\"510\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"530\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Upcoming Tasks (${tasksCount})</text>\n      \n      ${taskItems}\n      \n      <!-- Calendar/timeline area -->\n      <rect x=\"220\" y=\"420\" width=\"560\" height=\"160\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"445\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Timeline</text>\n      <rect x=\"240\" y=\"450\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"490\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"530\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      \n      <rect x=\"280\" y=\"460\" width=\"100\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      <rect x=\"420\" y=\"460\" width=\"150\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.4\" />\n      <rect x=\"320\" y=\"500\" width=\"120\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.5\" />\n      <rect x=\"580\" y=\"500\" width=\"80\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"480\" y=\"540\" width=\"130\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      \n      <!-- Sidebar items -->\n      <rect x=\"20\" y=\"100\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"140\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"180\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"220\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"260\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      \n      <!-- Template name overlay for clarity -->\n      <rect x=\"230\" y=\"540\" width=\"300\" height=\"30\" rx=\"15\" fill=\"rgba(255,255,255,0.9)\" />\n      <text x=\"250\" y=\"562\" font-family=\"Arial\" font-size=\"16\" fill=\"${color}\">${name} Template Preview</text>\n    </svg>\n  `;\n  \n  return svgContent;\n};\n\n// Fetch real project data for template preview\nconst fetchProjectData = async () => {\n  try {\n    // Default values in case API call fails\n    let results = {\n      projectCount: 12,\n      inProgressCount: 8,\n      completedCount: 2,\n      tasksCount: 24,\n      averageProgress: 45,\n      upcomingTasks: [\n        \"Website Design Update\",\n        \"Content Migration\",\n        \"Testing Phase 1\",\n        \"Deploy to Staging\"\n      ]\n    };\n    \n    // Try to get real data from API\n    const projectsResponse = await api.projects.getAllProjects('');\n    if (projectsResponse.data) {\n      const projects = projectsResponse.data;\n      \n      results.projectCount = projects.length;\n      results.inProgressCount = projects.filter(p => p.status === 'IN_PROGRESS').length;\n      results.completedCount = projects.filter(p => p.status === 'COMPLETED').length;\n      results.averageProgress = projects.length > 0 \n        ? Math.round(projects.reduce((acc, p) => acc + (p.progress || 0), 0) / projects.length)\n        : 0;\n      \n      // Try to get tasks - using the correct API method\n      const tasksLists = await Promise.all(\n        projects.slice(0, 3).map(p => api.tasks.getAllTasks(p.id, ''))\n      );\n      \n      const allTasks = tasksLists.flatMap(r => r.data || []).filter(Boolean);\n      results.tasksCount = allTasks.length;\n      \n      // Get upcoming tasks (not completed)\n      const upcomingTasks = allTasks\n        .filter(t => t.status !== 'COMPLETED')\n        .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n        .map(t => t.title);\n      \n      if (upcomingTasks.length > 0) {\n        results.upcomingTasks = upcomingTasks;\n      }\n    }\n    \n    return results;\n  } catch (error) {\n    console.error(\"Error fetching project data for template preview:\", error);\n    // Return default data on error\n    return {\n      projectCount: 12,\n      inProgressCount: 7,\n      completedCount: 3,\n      tasksCount: 24,\n      averageProgress: 45,\n      upcomingTasks: [\n        \"Website Design Update\",\n        \"Content Migration\",\n        \"Testing Phase 1\",\n        \"Deploy to Staging\"\n      ]\n    };\n  }\n};\n\n// Cache for project data to avoid too many API calls\nlet cachedProjectData = null;\nlet lastFetchTime = 0;\nconst CACHE_LIFETIME = 60000; // 1 minute in milliseconds\n\n// Function to generate placeholder images for template previews\nexport const generateTemplatePlaceholder = async (templateType: ProjectTemplateType): Promise<string> => {\n  // Create a unique color for each template type\n  const getColorForTemplate = (type: ProjectTemplateType): string => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return '#4A6572';\n      case ProjectTemplateType.ERP:\n        return '#0277BD';\n      case ProjectTemplateType.MARKETING:\n        return '#C2185B';\n      case ProjectTemplateType.FINANCE:\n        return '#00796B';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return '#E65100';\n      case ProjectTemplateType.WEBSITE:\n        return '#6A1B9A';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return '#283593';\n      default:\n        return '#757575';\n    }\n  };\n\n  // Get a name for the template\n  const getTemplateName = (type: ProjectTemplateType): string => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return 'Default';\n      case ProjectTemplateType.ERP:\n        return 'ERP';\n      case ProjectTemplateType.MARKETING:\n        return 'Marketing';\n      case ProjectTemplateType.FINANCE:\n        return 'Finance';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return 'Supply Chain';\n      case ProjectTemplateType.WEBSITE:\n        return 'Website';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return 'Infrastructure';\n      default:\n        return 'Template';\n    }\n  };\n\n  // Check if we need to fetch new data\n  const now = Date.now();\n  if (!cachedProjectData || now - lastFetchTime > CACHE_LIFETIME) {\n    cachedProjectData = await fetchProjectData();\n    lastFetchTime = now;\n  }\n  \n  // Generate an SVG placeholder with unique styling per template\n  const color = getColorForTemplate(templateType);\n  const name = getTemplateName(templateType);\n  \n  // Generate the SVG with dynamic data\n  const svgContent = generateDynamicTemplateSvg(templateType, {\n    ...cachedProjectData,\n    color,\n    name\n  });\n  \n  // Convert the SVG to a data URL\n  const svgBase64 = btoa(svgContent);\n  return `data:image/svg+xml;base64,${svgBase64}`;\n};\n\n// Export template image URLs - make compatible with both async and sync usage\nexport const getTemplatePreviewPath = (templateType: ProjectTemplateType): string => {\n  // Create a temporary SVG while the real one loads\n  const color = templateType === ProjectTemplateType.DEFAULT ? '#4A6572' :\n                templateType === ProjectTemplateType.ERP ? '#0277BD' :\n                templateType === ProjectTemplateType.MARKETING ? '#C2185B' :\n                templateType === ProjectTemplateType.FINANCE ? '#00796B' :\n                templateType === ProjectTemplateType.SUPPLY_CHAIN ? '#E65100' :\n                templateType === ProjectTemplateType.WEBSITE ? '#6A1B9A' :\n                templateType === ProjectTemplateType.INFRASTRUCTURE ? '#283593' : '#757575';\n                \n  const name = templateType === ProjectTemplateType.DEFAULT ? 'Default' :\n               templateType === ProjectTemplateType.ERP ? 'ERP' :\n               templateType === ProjectTemplateType.MARKETING ? 'Marketing' :\n               templateType === ProjectTemplateType.FINANCE ? 'Finance' :\n               templateType === ProjectTemplateType.SUPPLY_CHAIN ? 'Supply Chain' :\n               templateType === ProjectTemplateType.WEBSITE ? 'Website' :\n               templateType === ProjectTemplateType.INFRASTRUCTURE ? 'Infrastructure' : 'Template';\n  \n  // Simple placeholder SVG while loading\n  const simpleSvg = `\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f5f5f5\" />\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"400\" y=\"300\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\">Loading ${name} Template Preview...</text>\n    </svg>\n  `;\n  \n  const svgBase64 = btoa(simpleSvg);\n  \n  // Start loading the actual template\n  generateTemplatePlaceholder(templateType).then(dataUrl => {\n    // When ready, find all images with this placeholder and replace them\n    const placeholderId = `template-placeholder-${templateType}`;\n    if (typeof document !== 'undefined') {\n      document.querySelectorAll(`img[data-placeholder-id=\"${placeholderId}\"]`)\n        .forEach(img => {\n          (img as HTMLImageElement).src = dataUrl;\n        });\n    }\n  });\n  \n  return `data:image/svg+xml;base64,${svgBase64}`;\n};\n\n// Get template description based on type\nexport const getTemplateDescription = (templateType: ProjectTemplateType): string => {\n  switch (templateType) {\n    case ProjectTemplateType.DEFAULT:\n      return 'A standard project layout with basic task tracking and team management.';\n    case ProjectTemplateType.ERP:\n      return 'Enterprise Resource Planning template with modules for operations, HR, and finance integration.';\n    case ProjectTemplateType.MARKETING:\n      return 'Campaign-focused template with audience analytics, content calendar, and conversion tracking.';\n    case ProjectTemplateType.FINANCE:\n      return 'Financial project template with budget forecasting, expense tracking, and ROI analysis tools.';\n    case ProjectTemplateType.SUPPLY_CHAIN:\n      return 'Supply chain management template with inventory tracking, logistics planning, and vendor management.';\n    case ProjectTemplateType.WEBSITE:\n      return 'Website development template with design, development, and launch phases plus SEO tracking.';\n    case ProjectTemplateType.INFRASTRUCTURE:\n      return 'IT infrastructure template with network diagrams, deployment planning, and maintenance scheduling.';\n    default:\n      return 'Select a template to see more details.';\n  }\n}; "],"mappings":"AAAA,OAASA,mBAAmB,KAAQ,UAAU,CAC9C,MAAO,CAAAC,GAAG,KAAM,iBAAiB,CAEjC;AACA,KAAM,CAAAC,0BAA0B,CAAGA,CACjCC,YAAiC,CACjCC,IASC,GACE,CACH,KAAM,CACJC,YAAY,CACZC,eAAe,CACfC,cAAc,CACdC,UAAU,CACVC,eAAe,CACfC,aAAa,CACbC,KAAK,CACLC,IACF,CAAC,CAAGR,IAAI,CAER;AACA,KAAM,CAAAS,qBAAqB,CAAG,GAAG,CACjC,KAAM,CAAAC,aAAa,CAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,CAAED,IAAI,CAACE,GAAG,CAAC,CAAC,CAAER,eAAe,CAAC,CAAC,CAAE;AACnE,KAAM,CAAAS,cAAc,CAAIJ,aAAa,CAAG,GAAG,CAAID,qBAAqB,CAEpE;AACA,KAAM,CAAAM,SAAS,CAAGT,aAAa,CAACU,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,GAC1D,oBAAoB,GAAG,CAAGA,KAAK,CAAG,EAAE;AACxC,wBAAwB,GAAG,CAAGA,KAAK,CAAG,EAAE,oDAAoDD,IAAI,CAACE,MAAM,CAAG,EAAE,CAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CAAG,KAAK,CAAGH,IAAI,SACjJ,CAAC,CAACI,IAAI,CAAC,EAAE,CAAC,CAEV;AACA,KAAM,CAAAC,UAAU,CAAG;AACrB;AACA;AACA;AACA;AACA,4CAA4ChB,KAAK;AACjD,4EAA4EC,IAAI;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6DD,KAAK;AAClE,kCAAkCO,cAAc,IAAIL,qBAAqB;AACzE,6HAA6HC,aAAa;AAC1I;AACA;AACA;AACA,6FAA6FT,YAAY;AACzG,0FAA0FC,eAAe;AACzG;AACA;AACA;AACA,gHAAgHE,UAAU;AAC1H;AACA,QAAQW,SAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmER,KAAK;AACxE,mEAAmEA,KAAK;AACxE,mEAAmEA,KAAK;AACxE,kEAAkEA,KAAK;AACvE,mEAAmEA,KAAK;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuEA,KAAK,KAAKC,IAAI;AACrF;AACA,GAAG,CAED,MAAO,CAAAe,UAAU,CACnB,CAAC,CAED;AACA,KAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACF;AACA,GAAI,CAAAC,OAAO,CAAG,CACZxB,YAAY,CAAE,EAAE,CAChBC,eAAe,CAAE,CAAC,CAClBC,cAAc,CAAE,CAAC,CACjBC,UAAU,CAAE,EAAE,CACdC,eAAe,CAAE,EAAE,CACnBC,aAAa,CAAE,CACb,uBAAuB,CACvB,mBAAmB,CACnB,iBAAiB,CACjB,mBAAmB,CAEvB,CAAC,CAED;AACA,KAAM,CAAAoB,gBAAgB,CAAG,KAAM,CAAA7B,GAAG,CAAC8B,QAAQ,CAACC,cAAc,CAAC,EAAE,CAAC,CAC9D,GAAIF,gBAAgB,CAAC1B,IAAI,CAAE,CACzB,KAAM,CAAA2B,QAAQ,CAAGD,gBAAgB,CAAC1B,IAAI,CAEtCyB,OAAO,CAACxB,YAAY,CAAG0B,QAAQ,CAACP,MAAM,CACtCK,OAAO,CAACvB,eAAe,CAAGyB,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACC,MAAM,GAAK,aAAa,CAAC,CAACX,MAAM,CACjFK,OAAO,CAACtB,cAAc,CAAGwB,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACC,MAAM,GAAK,WAAW,CAAC,CAACX,MAAM,CAC9EK,OAAO,CAACpB,eAAe,CAAGsB,QAAQ,CAACP,MAAM,CAAG,CAAC,CACzCT,IAAI,CAACqB,KAAK,CAACL,QAAQ,CAACM,MAAM,CAAC,CAACC,GAAG,CAAEJ,CAAC,GAAKI,GAAG,EAAIJ,CAAC,CAACK,QAAQ,EAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAAGR,QAAQ,CAACP,MAAM,CAAC,CACrF,CAAC,CAEL;AACA,KAAM,CAAAgB,UAAU,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAClCX,QAAQ,CAACX,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAACC,GAAG,CAACa,CAAC,EAAIjC,GAAG,CAAC0C,KAAK,CAACC,WAAW,CAACV,CAAC,CAACW,EAAE,CAAE,EAAE,CAAC,CAC/D,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAGN,UAAU,CAACO,OAAO,CAACC,CAAC,EAAIA,CAAC,CAAC5C,IAAI,EAAI,EAAE,CAAC,CAAC6B,MAAM,CAACgB,OAAO,CAAC,CACtEpB,OAAO,CAACrB,UAAU,CAAGsC,QAAQ,CAACtB,MAAM,CAEpC;AACA,KAAM,CAAAd,aAAa,CAAGoC,QAAQ,CAC3Bb,MAAM,CAACiB,CAAC,EAAIA,CAAC,CAACf,MAAM,GAAK,WAAW,CAAC,CACrCgB,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,GAAI,CAAAC,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,CAAG,GAAI,CAAAF,IAAI,CAACD,CAAC,CAACE,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAC7EnC,GAAG,CAAC6B,CAAC,EAAIA,CAAC,CAACO,KAAK,CAAC,CAEpB,GAAI/C,aAAa,CAACc,MAAM,CAAG,CAAC,CAAE,CAC5BK,OAAO,CAACnB,aAAa,CAAGA,aAAa,CACvC,CACF,CAEA,MAAO,CAAAmB,OAAO,CAChB,CAAE,MAAO6B,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mDAAmD,CAAEA,KAAK,CAAC,CACzE;AACA,MAAO,CACLrD,YAAY,CAAE,EAAE,CAChBC,eAAe,CAAE,CAAC,CAClBC,cAAc,CAAE,CAAC,CACjBC,UAAU,CAAE,EAAE,CACdC,eAAe,CAAE,EAAE,CACnBC,aAAa,CAAE,CACb,uBAAuB,CACvB,mBAAmB,CACnB,iBAAiB,CACjB,mBAAmB,CAEvB,CAAC,CACH,CACF,CAAC,CAED;AACA,GAAI,CAAAkD,iBAAiB,CAAG,IAAI,CAC5B,GAAI,CAAAC,aAAa,CAAG,CAAC,CACrB,KAAM,CAAAC,cAAc,CAAG,KAAK,CAAE;AAE9B;AACA,MAAO,MAAM,CAAAC,2BAA2B,CAAG,KAAO,CAAA5D,YAAiC,EAAsB,CACvG;AACA,KAAM,CAAA6D,mBAAmB,CAAIC,IAAyB,EAAa,CACjE,OAAQA,IAAI,EACV,IAAK,CAAAjE,mBAAmB,CAACkE,OAAO,CAC9B,MAAO,SAAS,CAClB,IAAK,CAAAlE,mBAAmB,CAACmE,GAAG,CAC1B,MAAO,SAAS,CAClB,IAAK,CAAAnE,mBAAmB,CAACoE,SAAS,CAChC,MAAO,SAAS,CAClB,IAAK,CAAApE,mBAAmB,CAACqE,OAAO,CAC9B,MAAO,SAAS,CAClB,IAAK,CAAArE,mBAAmB,CAACsE,YAAY,CACnC,MAAO,SAAS,CAClB,IAAK,CAAAtE,mBAAmB,CAACuE,OAAO,CAC9B,MAAO,SAAS,CAClB,IAAK,CAAAvE,mBAAmB,CAACwE,cAAc,CACrC,MAAO,SAAS,CAClB,QACE,MAAO,SAAS,CACpB,CACF,CAAC,CAED;AACA,KAAM,CAAAC,eAAe,CAAIR,IAAyB,EAAa,CAC7D,OAAQA,IAAI,EACV,IAAK,CAAAjE,mBAAmB,CAACkE,OAAO,CAC9B,MAAO,SAAS,CAClB,IAAK,CAAAlE,mBAAmB,CAACmE,GAAG,CAC1B,MAAO,KAAK,CACd,IAAK,CAAAnE,mBAAmB,CAACoE,SAAS,CAChC,MAAO,WAAW,CACpB,IAAK,CAAApE,mBAAmB,CAACqE,OAAO,CAC9B,MAAO,SAAS,CAClB,IAAK,CAAArE,mBAAmB,CAACsE,YAAY,CACnC,MAAO,cAAc,CACvB,IAAK,CAAAtE,mBAAmB,CAACuE,OAAO,CAC9B,MAAO,SAAS,CAClB,IAAK,CAAAvE,mBAAmB,CAACwE,cAAc,CACrC,MAAO,gBAAgB,CACzB,QACE,MAAO,UAAU,CACrB,CACF,CAAC,CAED;AACA,KAAM,CAAAE,GAAG,CAAGpB,IAAI,CAACoB,GAAG,CAAC,CAAC,CACtB,GAAI,CAACd,iBAAiB,EAAIc,GAAG,CAAGb,aAAa,CAAGC,cAAc,CAAE,CAC9DF,iBAAiB,CAAG,KAAM,CAAAhC,gBAAgB,CAAC,CAAC,CAC5CiC,aAAa,CAAGa,GAAG,CACrB,CAEA;AACA,KAAM,CAAA/D,KAAK,CAAGqD,mBAAmB,CAAC7D,YAAY,CAAC,CAC/C,KAAM,CAAAS,IAAI,CAAG6D,eAAe,CAACtE,YAAY,CAAC,CAE1C;AACA,KAAM,CAAAwB,UAAU,CAAGzB,0BAA0B,CAACC,YAAY,CAAE,CAC1D,GAAGyD,iBAAiB,CACpBjD,KAAK,CACLC,IACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAA+D,SAAS,CAAGC,IAAI,CAACjD,UAAU,CAAC,CAClC,MAAO,6BAA6BgD,SAAS,EAAE,CACjD,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,sBAAsB,CAAI1E,YAAiC,EAAa,CACnF;AACA,KAAM,CAAAQ,KAAK,CAAGR,YAAY,GAAKH,mBAAmB,CAACkE,OAAO,CAAG,SAAS,CACxD/D,YAAY,GAAKH,mBAAmB,CAACmE,GAAG,CAAG,SAAS,CACpDhE,YAAY,GAAKH,mBAAmB,CAACoE,SAAS,CAAG,SAAS,CAC1DjE,YAAY,GAAKH,mBAAmB,CAACqE,OAAO,CAAG,SAAS,CACxDlE,YAAY,GAAKH,mBAAmB,CAACsE,YAAY,CAAG,SAAS,CAC7DnE,YAAY,GAAKH,mBAAmB,CAACuE,OAAO,CAAG,SAAS,CACxDpE,YAAY,GAAKH,mBAAmB,CAACwE,cAAc,CAAG,SAAS,CAAG,SAAS,CAEzF,KAAM,CAAA5D,IAAI,CAAGT,YAAY,GAAKH,mBAAmB,CAACkE,OAAO,CAAG,SAAS,CACxD/D,YAAY,GAAKH,mBAAmB,CAACmE,GAAG,CAAG,KAAK,CAChDhE,YAAY,GAAKH,mBAAmB,CAACoE,SAAS,CAAG,WAAW,CAC5DjE,YAAY,GAAKH,mBAAmB,CAACqE,OAAO,CAAG,SAAS,CACxDlE,YAAY,GAAKH,mBAAmB,CAACsE,YAAY,CAAG,cAAc,CAClEnE,YAAY,GAAKH,mBAAmB,CAACuE,OAAO,CAAG,SAAS,CACxDpE,YAAY,GAAKH,mBAAmB,CAACwE,cAAc,CAAG,gBAAgB,CAAG,UAAU,CAEhG;AACA,KAAM,CAAAM,SAAS,CAAG;AACpB;AACA;AACA,4CAA4CnE,KAAK;AACjD,0GAA0GC,IAAI;AAC9G;AACA,GAAG,CAED,KAAM,CAAA+D,SAAS,CAAGC,IAAI,CAACE,SAAS,CAAC,CAEjC;AACAf,2BAA2B,CAAC5D,YAAY,CAAC,CAAC4E,IAAI,CAACC,OAAO,EAAI,CACxD;AACA,KAAM,CAAAC,aAAa,CAAG,wBAAwB9E,YAAY,EAAE,CAC5D,GAAI,MAAO,CAAA+E,QAAQ,GAAK,WAAW,CAAE,CACnCA,QAAQ,CAACC,gBAAgB,CAAC,4BAA4BF,aAAa,IAAI,CAAC,CACrEG,OAAO,CAACC,GAAG,EAAI,CACbA,GAAG,CAAsBC,GAAG,CAAGN,OAAO,CACzC,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEF,MAAO,6BAA6BL,SAAS,EAAE,CACjD,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,sBAAsB,CAAIpF,YAAiC,EAAa,CACnF,OAAQA,YAAY,EAClB,IAAK,CAAAH,mBAAmB,CAACkE,OAAO,CAC9B,MAAO,yEAAyE,CAClF,IAAK,CAAAlE,mBAAmB,CAACmE,GAAG,CAC1B,MAAO,iGAAiG,CAC1G,IAAK,CAAAnE,mBAAmB,CAACoE,SAAS,CAChC,MAAO,+FAA+F,CACxG,IAAK,CAAApE,mBAAmB,CAACqE,OAAO,CAC9B,MAAO,+FAA+F,CACxG,IAAK,CAAArE,mBAAmB,CAACsE,YAAY,CACnC,MAAO,sGAAsG,CAC/G,IAAK,CAAAtE,mBAAmB,CAACuE,OAAO,CAC9B,MAAO,6FAA6F,CACtG,IAAK,CAAAvE,mBAAmB,CAACwE,cAAc,CACrC,MAAO,oGAAoG,CAC7G,QACE,MAAO,wCAAwC,CACnD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}