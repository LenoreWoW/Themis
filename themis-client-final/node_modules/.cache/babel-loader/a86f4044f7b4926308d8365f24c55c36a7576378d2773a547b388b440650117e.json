{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{TaskPriority,TaskStatus}from'../types';import{jsx as _jsx}from\"react/jsx-runtime\";const TaskRequestContext=/*#__PURE__*/createContext(undefined);export const useTaskRequests=()=>{const context=useContext(TaskRequestContext);if(!context){throw new Error('useTaskRequests must be used within a TaskRequestProvider');}return context;};export const TaskRequestProvider=_ref=>{let{children}=_ref;const[taskRequests,setTaskRequests]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const fetchTaskRequests=async()=>{setLoading(true);try{// In a real app, this would be an API call\n// const response = await api.get('/task-requests');\n// setTaskRequests(response.data);\n// Mock data for now\nconst mockRequests=[{id:'1',title:'Create user documentation',description:'We need comprehensive user documentation for the new features',priority:TaskPriority.MEDIUM,status:TaskStatus.TODO,dueDate:'2024-07-15',projectId:'1',requestedBy:{id:'3',firstName:'Carol',lastName:'Williams'},createdAt:'2024-06-01',updatedAt:'2024-06-01'}];setTaskRequests(mockRequests);setError(null);}catch(err){console.error('Error fetching task requests:',err);setError('Failed to fetch task requests');}finally{setLoading(false);}};const createTaskRequest=async taskRequest=>{setLoading(true);try{// In a real app, this would be an API call\n// const response = await api.post('/task-requests', taskRequest);\n// const newTaskRequest = response.data;\n// Mock data for now\nconst newTaskRequest={...taskRequest,id:`req-${Date.now()}`,requestedBy:{id:'3',firstName:'Carol',lastName:'Williams'},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};setTaskRequests(prev=>[...prev,newTaskRequest]);setError(null);}catch(err){console.error('Error creating task request:',err);setError('Failed to create task request');throw err;}finally{setLoading(false);}};const approveTaskRequest=async id=>{setLoading(true);try{// In a real app, this would be an API call\n// await api.put(`/task-requests/${id}/approve`);\n// Update local state\nsetTaskRequests(prev=>prev.map(req=>req.id===id?{...req,status:TaskStatus.IN_PROGRESS,updatedAt:new Date().toISOString()}:req));setError(null);}catch(err){console.error('Error approving task request:',err);setError('Failed to approve task request');throw err;}finally{setLoading(false);}};const rejectTaskRequest=async(id,reason)=>{setLoading(true);try{// In a real app, this would be an API call\n// await api.put(`/task-requests/${id}/reject`, { reason });\n// Update local state\nsetTaskRequests(prev=>prev.filter(req=>req.id!==id));setError(null);}catch(err){console.error('Error rejecting task request:',err);setError('Failed to reject task request');throw err;}finally{setLoading(false);}};// Fetch task requests on initial load\nReact.useEffect(()=>{fetchTaskRequests();},[]);return/*#__PURE__*/_jsx(TaskRequestContext.Provider,{value:{taskRequests,loading,error,createTaskRequest,approveTaskRequest,rejectTaskRequest},children:children});};export default TaskRequestContext;","map":{"version":3,"names":["React","createContext","useContext","useState","TaskPriority","TaskStatus","jsx","_jsx","TaskRequestContext","undefined","useTaskRequests","context","Error","TaskRequestProvider","_ref","children","taskRequests","setTaskRequests","loading","setLoading","error","setError","fetchTaskRequests","mockRequests","id","title","description","priority","MEDIUM","status","TODO","dueDate","projectId","requestedBy","firstName","lastName","createdAt","updatedAt","err","console","createTaskRequest","taskRequest","newTaskRequest","Date","now","toISOString","prev","approveTaskRequest","map","req","IN_PROGRESS","rejectTaskRequest","reason","filter","useEffect","Provider","value"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/TaskRequestContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { TaskPriority, TaskStatus } from '../types';\nimport api from '../services/api';\n\ninterface TaskRequest {\n  id?: string;\n  title: string;\n  description: string;\n  priority: TaskPriority;\n  status: TaskStatus;\n  dueDate: string;\n  projectId: string;\n  requestedBy?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface TaskRequestContextType {\n  taskRequests: TaskRequest[];\n  loading: boolean;\n  error: string | null;\n  createTaskRequest: (taskRequest: TaskRequest) => Promise<void>;\n  approveTaskRequest: (id: string) => Promise<void>;\n  rejectTaskRequest: (id: string, reason: string) => Promise<void>;\n}\n\nconst TaskRequestContext = createContext<TaskRequestContextType | undefined>(undefined);\n\nexport const useTaskRequests = (): TaskRequestContextType => {\n  const context = useContext(TaskRequestContext);\n  if (!context) {\n    throw new Error('useTaskRequests must be used within a TaskRequestProvider');\n  }\n  return context;\n};\n\nexport const TaskRequestProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [taskRequests, setTaskRequests] = useState<TaskRequest[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchTaskRequests = async () => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // const response = await api.get('/task-requests');\n      // setTaskRequests(response.data);\n      \n      // Mock data for now\n      const mockRequests: TaskRequest[] = [\n        {\n          id: '1',\n          title: 'Create user documentation',\n          description: 'We need comprehensive user documentation for the new features',\n          priority: TaskPriority.MEDIUM,\n          status: TaskStatus.TODO,\n          dueDate: '2024-07-15',\n          projectId: '1',\n          requestedBy: {\n            id: '3',\n            firstName: 'Carol',\n            lastName: 'Williams'\n          },\n          createdAt: '2024-06-01',\n          updatedAt: '2024-06-01'\n        }\n      ];\n      \n      setTaskRequests(mockRequests);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching task requests:', err);\n      setError('Failed to fetch task requests');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createTaskRequest = async (taskRequest: TaskRequest): Promise<void> => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // const response = await api.post('/task-requests', taskRequest);\n      // const newTaskRequest = response.data;\n      \n      // Mock data for now\n      const newTaskRequest: TaskRequest = {\n        ...taskRequest,\n        id: `req-${Date.now()}`,\n        requestedBy: {\n          id: '3',\n          firstName: 'Carol',\n          lastName: 'Williams'\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      setTaskRequests(prev => [...prev, newTaskRequest]);\n      setError(null);\n    } catch (err) {\n      console.error('Error creating task request:', err);\n      setError('Failed to create task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const approveTaskRequest = async (id: string): Promise<void> => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // await api.put(`/task-requests/${id}/approve`);\n      \n      // Update local state\n      setTaskRequests(prev => \n        prev.map(req => \n          req.id === id \n            ? { ...req, status: TaskStatus.IN_PROGRESS, updatedAt: new Date().toISOString() } \n            : req\n        )\n      );\n      setError(null);\n    } catch (err) {\n      console.error('Error approving task request:', err);\n      setError('Failed to approve task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const rejectTaskRequest = async (id: string, reason: string): Promise<void> => {\n    setLoading(true);\n    try {\n      // In a real app, this would be an API call\n      // await api.put(`/task-requests/${id}/reject`, { reason });\n      \n      // Update local state\n      setTaskRequests(prev => prev.filter(req => req.id !== id));\n      setError(null);\n    } catch (err) {\n      console.error('Error rejecting task request:', err);\n      setError('Failed to reject task request');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch task requests on initial load\n  React.useEffect(() => {\n    fetchTaskRequests();\n  }, []);\n\n  return (\n    <TaskRequestContext.Provider\n      value={{\n        taskRequests,\n        loading,\n        error,\n        createTaskRequest,\n        approveTaskRequest,\n        rejectTaskRequest\n      }}\n    >\n      {children}\n    </TaskRequestContext.Provider>\n  );\n};\n\nexport default TaskRequestContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}