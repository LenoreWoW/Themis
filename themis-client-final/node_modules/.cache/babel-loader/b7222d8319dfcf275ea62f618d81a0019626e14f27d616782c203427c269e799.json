{"ast":null,"code":"import api from './api';\nclass ProjectService {\n  // Helper to get token (in a real app, this would come from AuthContext)\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  async getProjects() {\n    try {\n      const response = await api.projects.getAllProjects(this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      throw error;\n    }\n  }\n  async getProjectById(id) {\n    try {\n      const response = await api.projects.getProjectById(id, this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching project ${id}:`, error);\n      throw error;\n    }\n  }\n  async createProject(projectData) {\n    try {\n      const response = await api.projects.createProject(projectData, this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error('Error creating project:', error);\n      throw error;\n    }\n  }\n  async updateProject(id, projectData) {\n    try {\n      const response = await api.projects.updateProject(id, projectData, this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating project ${id}:`, error);\n      throw error;\n    }\n  }\n  async deleteProject(id) {\n    try {\n      await api.projects.deleteProject(id, this.getToken());\n    } catch (error) {\n      console.error(`Error deleting project ${id}:`, error);\n      throw error;\n    }\n  }\n}\nexport const projectService = new ProjectService();","map":{"version":3,"names":["api","ProjectService","getToken","localStorage","getItem","getProjects","response","projects","getAllProjects","data","error","console","getProjectById","id","createProject","projectData","updateProject","deleteProject","projectService"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/services/ProjectService.ts"],"sourcesContent":["import api from './api';\nimport { Project } from '../types';\n\nclass ProjectService {\n  // Helper to get token (in a real app, this would come from AuthContext)\n  private getToken(): string {\n    return localStorage.getItem('token') || '';\n  }\n\n  async getProjects(): Promise<Project[]> {\n    try {\n      const response = await api.projects.getAllProjects(this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      throw error;\n    }\n  }\n\n  async getProjectById(id: string): Promise<Project> {\n    try {\n      const response = await api.projects.getProjectById(id, this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching project ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async createProject(projectData: Partial<Project>): Promise<Project> {\n    try {\n      const response = await api.projects.createProject(projectData, this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error('Error creating project:', error);\n      throw error;\n    }\n  }\n\n  async updateProject(id: string, projectData: Partial<Project>): Promise<Project> {\n    try {\n      const response = await api.projects.updateProject(id, projectData, this.getToken());\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating project ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    try {\n      await api.projects.deleteProject(id, this.getToken());\n    } catch (error) {\n      console.error(`Error deleting project ${id}:`, error);\n      throw error;\n    }\n  }\n}\n\nexport const projectService = new ProjectService(); "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAGvB,MAAMC,cAAc,CAAC;EACnB;EACQC,QAAQA,CAAA,EAAW;IACzB,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEA,MAAMC,WAAWA,CAAA,EAAuB;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,QAAQ,CAACC,cAAc,CAAC,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC;MACnE,OAAOI,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,cAAcA,CAACC,EAAU,EAAoB;IACjD,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMN,GAAG,CAACO,QAAQ,CAACK,cAAc,CAACC,EAAE,EAAE,IAAI,CAACX,QAAQ,CAAC,CAAC,CAAC;MACvE,OAAOI,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0BG,EAAE,GAAG,EAAEH,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMI,aAAaA,CAACC,WAA6B,EAAoB;IACnE,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMN,GAAG,CAACO,QAAQ,CAACO,aAAa,CAACC,WAAW,EAAE,IAAI,CAACb,QAAQ,CAAC,CAAC,CAAC;MAC/E,OAAOI,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMM,aAAaA,CAACH,EAAU,EAAEE,WAA6B,EAAoB;IAC/E,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMN,GAAG,CAACO,QAAQ,CAACS,aAAa,CAACH,EAAE,EAAEE,WAAW,EAAE,IAAI,CAACb,QAAQ,CAAC,CAAC,CAAC;MACnF,OAAOI,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0BG,EAAE,GAAG,EAAEH,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMO,aAAaA,CAACJ,EAAU,EAAiB;IAC7C,IAAI;MACF,MAAMb,GAAG,CAACO,QAAQ,CAACU,aAAa,CAACJ,EAAE,EAAE,IAAI,CAACX,QAAQ,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0BG,EAAE,GAAG,EAAEH,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMQ,cAAc,GAAG,IAAIjB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}