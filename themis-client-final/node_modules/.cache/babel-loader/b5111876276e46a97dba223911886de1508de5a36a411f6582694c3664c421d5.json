{"ast":null,"code":"var _jsxFileName = \"/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/material';\nimport useThemeMode from '../hooks/useThemeMode';\nimport { lightTheme, darkTheme } from '../theme/modernTheme';\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with a default value\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\n\n// Create the provider component\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const themeHook = useThemeMode();\n\n  // Use the appropriate theme based on the current mode\n  const theme = themeHook.themeMode === 'dark' ? darkTheme : lightTheme;\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: themeHook,\n    children: /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n// Create a custom hook to use the theme context\n_s(ThemeProvider, \"5I0ZhYEy+OAaVZy5S+LcuGJBAS4=\", false, function () {\n  return [useThemeMode];\n});\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","ThemeProvider","MuiThemeProvider","useThemeMode","lightTheme","darkTheme","jsxDEV","_jsxDEV","ThemeContext","undefined","children","_s","themeHook","theme","themeMode","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { ThemeProvider as MuiThemeProvider, PaletteMode } from '@mui/material';\nimport useThemeMode, { ThemeMode } from '../hooks/useThemeMode';\nimport { lightTheme, darkTheme } from '../theme/modernTheme';\n\n// Define the context type\ninterface ThemeContextType {\n  themeMode: ThemeMode;\n  isDarkMode: boolean;\n  isLightMode: boolean;\n  toggleThemeMode: () => void;\n  setThemeMode: (mode: ThemeMode) => void;\n}\n\n// Create the context with a default value\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Create the provider component\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const themeHook = useThemeMode();\n  \n  // Use the appropriate theme based on the current mode\n  const theme = themeHook.themeMode === 'dark' ? darkTheme : lightTheme;\n\n  return (\n    <ThemeContext.Provider value={themeHook}>\n      <MuiThemeProvider theme={theme}>\n        {children}\n      </MuiThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\n// Create a custom hook to use the theme context\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport default ThemeProvider; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,SAASC,aAAa,IAAIC,gBAAgB,QAAqB,eAAe;AAC9E,OAAOC,YAAY,MAAqB,uBAAuB;AAC/D,SAASC,UAAU,EAAEC,SAAS,QAAQ,sBAAsB;;AAE5D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA;AACA,MAAMC,YAAY,gBAAGT,aAAa,CAA+BU,SAAS,CAAC;;AAE3E;AACA,OAAO,MAAMR,aAAsD,GAAGA,CAAC;EAAES;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtF,MAAMC,SAAS,GAAGT,YAAY,CAAC,CAAC;;EAEhC;EACA,MAAMU,KAAK,GAAGD,SAAS,CAACE,SAAS,KAAK,MAAM,GAAGT,SAAS,GAAGD,UAAU;EAErE,oBACEG,OAAA,CAACC,YAAY,CAACO,QAAQ;IAACC,KAAK,EAAEJ,SAAU;IAAAF,QAAA,eACtCH,OAAA,CAACL,gBAAgB;MAACW,KAAK,EAAEA,KAAM;MAAAH,QAAA,EAC5BA;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAE5B,CAAC;;AAED;AAAAT,EAAA,CAfaV,aAAsD;EAAA,QAC/CE,YAAY;AAAA;AAAAkB,EAAA,GADnBpB,aAAsD;AAgBnE,OAAO,MAAMqB,QAAQ,GAAGA,CAAA,KAAwB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAGxB,UAAU,CAACQ,YAAY,CAAC;EACxC,IAAIgB,OAAO,KAAKf,SAAS,EAAE;IACzB,MAAM,IAAIgB,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAQrB,eAAerB,aAAa;AAAC,IAAAoB,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}