{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\n\n// Konami code sequence: up, up, down, down, left, right, left, right, b, a\nconst KONAMI_CODE = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'KeyB', 'KeyA'];\nexport const useKonamiCode = callback => {\n  _s();\n  const [keys, setKeys] = useState([]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      // Use event.code for more consistent key detection across different keyboard layouts\n      const keyPressed = event.code;\n\n      // Add the key to the sequence (keeping only the last N keys where N is the length of the Konami code)\n      const updatedKeys = [...keys, keyPressed].slice(-KONAMI_CODE.length);\n      setKeys(updatedKeys);\n\n      // Check if the sequence matches the Konami code\n      const isKonamiCode = updatedKeys.length === KONAMI_CODE.length && updatedKeys.every((key, index) => key === KONAMI_CODE[index]);\n      if (isKonamiCode) {\n        // Execute the callback when Konami code is detected\n        callback();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [keys, callback]);\n};\n_s(useKonamiCode, \"Mu0T+TB+Zc8GdyDmQL3Fd+Qm+aU=\");","map":{"version":3,"names":["useEffect","useState","KONAMI_CODE","useKonamiCode","callback","_s","keys","setKeys","handleKeyDown","event","keyPressed","code","updatedKeys","slice","length","isKonamiCode","every","key","index","window","addEventListener","removeEventListener"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/hooks/useKonamiCode.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n// Konami code sequence: up, up, down, down, left, right, left, right, b, a\nconst KONAMI_CODE = [\n  'ArrowUp', \n  'ArrowUp', \n  'ArrowDown', \n  'ArrowDown', \n  'ArrowLeft', \n  'ArrowRight', \n  'ArrowLeft', \n  'ArrowRight', \n  'KeyB', \n  'KeyA'\n];\n\nexport const useKonamiCode = (callback: () => void): void => {\n  const [keys, setKeys] = useState<string[]>([]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Use event.code for more consistent key detection across different keyboard layouts\n      const keyPressed = event.code;\n      \n      // Add the key to the sequence (keeping only the last N keys where N is the length of the Konami code)\n      const updatedKeys = [...keys, keyPressed].slice(-KONAMI_CODE.length);\n      setKeys(updatedKeys);\n      \n      // Check if the sequence matches the Konami code\n      const isKonamiCode = updatedKeys.length === KONAMI_CODE.length && \n        updatedKeys.every((key, index) => key === KONAMI_CODE[index]);\n      \n      if (isKonamiCode) {\n        // Execute the callback when Konami code is detected\n        callback();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [keys, callback]);\n}; "],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AACA,MAAMC,WAAW,GAAG,CAClB,SAAS,EACT,SAAS,EACT,WAAW,EACX,WAAW,EACX,WAAW,EACX,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,MAAM,EACN,MAAM,CACP;AAED,OAAO,MAAMC,aAAa,GAAIC,QAAoB,IAAW;EAAAC,EAAA;EAC3D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAW,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMQ,aAAa,GAAIC,KAAoB,IAAK;MAC9C;MACA,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAI;;MAE7B;MACA,MAAMC,WAAW,GAAG,CAAC,GAAGN,IAAI,EAAEI,UAAU,CAAC,CAACG,KAAK,CAAC,CAACX,WAAW,CAACY,MAAM,CAAC;MACpEP,OAAO,CAACK,WAAW,CAAC;;MAEpB;MACA,MAAMG,YAAY,GAAGH,WAAW,CAACE,MAAM,KAAKZ,WAAW,CAACY,MAAM,IAC5DF,WAAW,CAACI,KAAK,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKD,GAAG,KAAKf,WAAW,CAACgB,KAAK,CAAC,CAAC;MAE/D,IAAIH,YAAY,EAAE;QAChB;QACAX,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC;IAEDe,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEZ,aAAa,CAAC;IAEjD,OAAO,MAAM;MACXW,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEb,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACF,IAAI,EAAEF,QAAQ,CAAC,CAAC;AACtB,CAAC;AAACC,EAAA,CA5BWF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}