{"ast":null,"code":"import React from'react';import{Navigate,useLocation}from'react-router-dom';import{useAuth}from'../../context/AuthContext';import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const PrivateRoute=_ref=>{let{children,roleRequired}=_ref;const{isAuthenticated,user}=useAuth();const location=useLocation();// If the user is not authenticated, redirect to login\nif(!isAuthenticated){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});}// If specific roles are required, check if the user has the required role\nif(roleRequired&&user){const requiredRoles=Array.isArray(roleRequired)?roleRequired:[roleRequired];const hasRequiredRole=requiredRoles.includes(user.role);if(!hasRequiredRole){// Redirect to dashboard or access denied page if the user doesn't have required role\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true});}}// Otherwise, render the protected content\nreturn/*#__PURE__*/_jsx(_Fragment,{children:children});};export default PrivateRoute;","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsx","_jsx","Fragment","_Fragment","PrivateRoute","_ref","children","roleRequired","isAuthenticated","user","location","to","state","from","replace","requiredRoles","Array","isArray","hasRequiredRole","includes","role"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/components/common/PrivateRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\ninterface PrivateRouteProps {\n  children: React.ReactNode;\n  roleRequired?: string | string[];\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ \n  children, \n  roleRequired \n}) => {\n  const { isAuthenticated, user } = useAuth();\n  const location = useLocation();\n\n  // If the user is not authenticated, redirect to login\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // If specific roles are required, check if the user has the required role\n  if (roleRequired && user) {\n    const requiredRoles = Array.isArray(roleRequired) ? roleRequired : [roleRequired];\n    const hasRequiredRole = requiredRoles.includes(user.role);\n\n    if (!hasRequiredRole) {\n      // Redirect to dashboard or access denied page if the user doesn't have required role\n      return <Navigate to=\"/dashboard\" replace />;\n    }\n  }\n\n  // Otherwise, render the protected content\n  return <>{children}</>;\n};\n\nexport default PrivateRoute; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAOpD,KAAM,CAAAC,YAAyC,CAAGC,IAAA,EAG5C,IAH6C,CACjDC,QAAQ,CACRC,YACF,CAAC,CAAAF,IAAA,CACC,KAAM,CAAEG,eAAe,CAAEC,IAAK,CAAC,CAAGV,OAAO,CAAC,CAAC,CAC3C,KAAM,CAAAW,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAE9B;AACA,GAAI,CAACU,eAAe,CAAE,CACpB,mBAAOP,IAAA,CAACJ,QAAQ,EAACc,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEH,QAAS,CAAE,CAACI,OAAO,MAAE,CAAC,CACpE,CAEA;AACA,GAAIP,YAAY,EAAIE,IAAI,CAAE,CACxB,KAAM,CAAAM,aAAa,CAAGC,KAAK,CAACC,OAAO,CAACV,YAAY,CAAC,CAAGA,YAAY,CAAG,CAACA,YAAY,CAAC,CACjF,KAAM,CAAAW,eAAe,CAAGH,aAAa,CAACI,QAAQ,CAACV,IAAI,CAACW,IAAI,CAAC,CAEzD,GAAI,CAACF,eAAe,CAAE,CACpB;AACA,mBAAOjB,IAAA,CAACJ,QAAQ,EAACc,EAAE,CAAC,YAAY,CAACG,OAAO,MAAE,CAAC,CAC7C,CACF,CAEA;AACA,mBAAOb,IAAA,CAAAE,SAAA,EAAAG,QAAA,CAAGA,QAAQ,CAAG,CAAC,CACxB,CAAC,CAED,cAAe,CAAAF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}