{"ast":null,"code":"import { ProjectTemplateType } from '../types';\nimport api from '../services/api';\n\n// SVG Templates with placeholders for dynamic data\nconst generateDynamicTemplateSvg = (templateType, data) => {\n  const {\n    projectCount,\n    inProgressCount,\n    completedCount,\n    tasksCount,\n    averageProgress,\n    upcomingTasks,\n    color,\n    name\n  } = data;\n\n  // Calculate progress circle arc length (complete circle circumference is 440)\n  const progressCircumference = 440;\n  const progressValue = Math.min(100, Math.max(0, averageProgress)); // Ensure between 0-100\n  const dashArrayValue = progressValue / 100 * progressCircumference;\n\n  // Format tasks for display\n  const taskItems = upcomingTasks.slice(0, 4).map((task, index) => `<rect x=\"530\" y=\"${240 + index * 40}\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n     <text x=\"540\" y=\"${260 + index * 40}\" font-family=\"Arial\" font-size=\"12\" fill=\"#333\">${task.length > 25 ? task.substring(0, 25) + '...' : task}</text>`).join('');\n\n  // Create SVG with dynamic data\n  const svgContent = `\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f0f0f0\" />\n      \n      <!-- Header bar -->\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"20\" y=\"38\" font-family=\"Arial\" font-size=\"18\" fill=\"white\">${name} Project Template</text>\n      \n      <!-- Left sidebar -->\n      <rect x=\"0\" y=\"60\" width=\"200\" height=\"540\" fill=\"#e0e0e0\" />\n      \n      <!-- Main content area with mock sections -->\n      <rect x=\"220\" y=\"80\" width=\"560\" height=\"120\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"105\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Dashboard</text>\n      <rect x=\"240\" y=\"130\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"150\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"170\" width=\"400\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      \n      <!-- Chart area with actual stats -->\n      <rect x=\"220\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Status</text>\n      \n      <!-- Progress Circle -->\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"#eee\" stroke-width=\"30\" />\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"${color}\" stroke-width=\"30\" \n              stroke-dasharray=\"${dashArrayValue} ${progressCircumference}\" transform=\"rotate(-90, 355, 310)\" />\n      <text x=\"355\" y=\"310\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\" dominant-baseline=\"middle\">${progressValue}%</text>\n      <text x=\"355\" y=\"340\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\" text-anchor=\"middle\">Completion</text>\n      \n      <!-- Project Stats -->\n      <text x=\"240\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">Total Projects: ${projectCount}</text>\n      <text x=\"380\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">In Progress: ${inProgressCount}</text>\n      \n      <!-- Task list area with actual tasks -->\n      <rect x=\"510\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"530\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Upcoming Tasks (${tasksCount})</text>\n      \n      ${taskItems}\n      \n      <!-- Calendar/timeline area -->\n      <rect x=\"220\" y=\"420\" width=\"560\" height=\"160\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"445\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Timeline</text>\n      <rect x=\"240\" y=\"450\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"490\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"530\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      \n      <rect x=\"280\" y=\"460\" width=\"100\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      <rect x=\"420\" y=\"460\" width=\"150\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.4\" />\n      <rect x=\"320\" y=\"500\" width=\"120\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.5\" />\n      <rect x=\"580\" y=\"500\" width=\"80\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"480\" y=\"540\" width=\"130\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      \n      <!-- Sidebar items -->\n      <rect x=\"20\" y=\"100\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"140\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"180\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"220\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"260\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      \n      <!-- Template name overlay for clarity -->\n      <rect x=\"230\" y=\"540\" width=\"300\" height=\"30\" rx=\"15\" fill=\"rgba(255,255,255,0.9)\" />\n      <text x=\"250\" y=\"562\" font-family=\"Arial\" font-size=\"16\" fill=\"${color}\">${name} Template Preview</text>\n    </svg>\n  `;\n  return svgContent;\n};\n\n// Fetch real project data for template preview\nconst fetchProjectData = async () => {\n  try {\n    // Default values in case API call fails\n    let results = {\n      projectCount: 12,\n      inProgressCount: 8,\n      completedCount: 2,\n      tasksCount: 24,\n      averageProgress: 45,\n      upcomingTasks: [\"Website Design Update\", \"Content Migration\", \"Testing Phase 1\", \"Deploy to Staging\"]\n    };\n\n    // Try to get real data from API\n    const projectsResponse = await api.projects.getAllProjects('');\n    if (projectsResponse.data) {\n      const projects = projectsResponse.data;\n      results.projectCount = projects.length;\n      results.inProgressCount = projects.filter(p => p.status === 'IN_PROGRESS').length;\n      results.completedCount = projects.filter(p => p.status === 'COMPLETED').length;\n      results.averageProgress = projects.length > 0 ? Math.round(projects.reduce((acc, p) => acc + (p.progress || 0), 0) / projects.length) : 0;\n\n      // Try to get tasks - using the correct API method\n      const tasksLists = await Promise.all(projects.slice(0, 3).map(p => api.tasks.getAllTasks(p.id, '')));\n      const allTasks = tasksLists.flatMap(r => r.data || []).filter(Boolean);\n      results.tasksCount = allTasks.length;\n\n      // Get upcoming tasks (not completed)\n      const upcomingTasks = allTasks.filter(t => t.status !== 'COMPLETED').sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()).map(t => t.title);\n      if (upcomingTasks.length > 0) {\n        results.upcomingTasks = upcomingTasks;\n      }\n    }\n    return results;\n  } catch (error) {\n    console.error(\"Error fetching project data for template preview:\", error);\n    // Return default data on error\n    return {\n      projectCount: 12,\n      inProgressCount: 7,\n      completedCount: 3,\n      tasksCount: 24,\n      averageProgress: 45,\n      upcomingTasks: [\"Website Design Update\", \"Content Migration\", \"Testing Phase 1\", \"Deploy to Staging\"]\n    };\n  }\n};\n\n// Cache for project data to avoid too many API calls\nlet cachedProjectData = null;\nlet lastFetchTime = 0;\nconst CACHE_LIFETIME = 60000; // 1 minute in milliseconds\n\n// Function to generate placeholder images for template previews\nexport const generateTemplatePlaceholder = async templateType => {\n  // Create a unique color for each template type\n  const getColorForTemplate = type => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return '#4A6572';\n      case ProjectTemplateType.ERP:\n        return '#0277BD';\n      case ProjectTemplateType.MARKETING:\n        return '#C2185B';\n      case ProjectTemplateType.FINANCE:\n        return '#00796B';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return '#E65100';\n      case ProjectTemplateType.WEBSITE:\n        return '#6A1B9A';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return '#283593';\n      default:\n        return '#757575';\n    }\n  };\n\n  // Get a name for the template\n  const getTemplateName = type => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return 'Default';\n      case ProjectTemplateType.ERP:\n        return 'ERP';\n      case ProjectTemplateType.MARKETING:\n        return 'Marketing';\n      case ProjectTemplateType.FINANCE:\n        return 'Finance';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return 'Supply Chain';\n      case ProjectTemplateType.WEBSITE:\n        return 'Website';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return 'Infrastructure';\n      default:\n        return 'Template';\n    }\n  };\n\n  // Check if we need to fetch new data\n  const now = Date.now();\n  if (!cachedProjectData || now - lastFetchTime > CACHE_LIFETIME) {\n    cachedProjectData = await fetchProjectData();\n    lastFetchTime = now;\n  }\n\n  // Generate an SVG placeholder with unique styling per template\n  const color = getColorForTemplate(templateType);\n  const name = getTemplateName(templateType);\n\n  // Generate the SVG with dynamic data\n  const svgContent = generateDynamicTemplateSvg(templateType, {\n    ...cachedProjectData,\n    color,\n    name\n  });\n\n  // Convert the SVG to a data URL\n  const svgBase64 = btoa(svgContent);\n  return `data:image/svg+xml;base64,${svgBase64}`;\n};\n\n// Export template image URLs - make compatible with both async and sync usage\nexport const getTemplatePreviewPath = templateType => {\n  // Create a temporary SVG while the real one loads\n  const color = templateType === ProjectTemplateType.DEFAULT ? '#4A6572' : templateType === ProjectTemplateType.ERP ? '#0277BD' : templateType === ProjectTemplateType.MARKETING ? '#C2185B' : templateType === ProjectTemplateType.FINANCE ? '#00796B' : templateType === ProjectTemplateType.SUPPLY_CHAIN ? '#E65100' : templateType === ProjectTemplateType.WEBSITE ? '#6A1B9A' : templateType === ProjectTemplateType.INFRASTRUCTURE ? '#283593' : '#757575';\n  const name = templateType === ProjectTemplateType.DEFAULT ? 'Default' : templateType === ProjectTemplateType.ERP ? 'ERP' : templateType === ProjectTemplateType.MARKETING ? 'Marketing' : templateType === ProjectTemplateType.FINANCE ? 'Finance' : templateType === ProjectTemplateType.SUPPLY_CHAIN ? 'Supply Chain' : templateType === ProjectTemplateType.WEBSITE ? 'Website' : templateType === ProjectTemplateType.INFRASTRUCTURE ? 'Infrastructure' : 'Template';\n\n  // Simple placeholder SVG while loading\n  const simpleSvg = `\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f5f5f5\" />\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"400\" y=\"300\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\">Loading ${name} Template Preview...</text>\n    </svg>\n  `;\n  const svgBase64 = btoa(simpleSvg);\n\n  // Start loading the actual template\n  generateTemplatePlaceholder(templateType).then(dataUrl => {\n    // When ready, find all images with this placeholder and replace them\n    const placeholderId = `template-placeholder-${templateType}`;\n    if (typeof document !== 'undefined') {\n      document.querySelectorAll(`img[data-placeholder-id=\"${placeholderId}\"]`).forEach(img => {\n        img.src = dataUrl;\n      });\n    }\n  });\n  return `data:image/svg+xml;base64,${svgBase64}`;\n};\n\n// Get template description based on type\nexport const getTemplateDescription = templateType => {\n  switch (templateType) {\n    case ProjectTemplateType.DEFAULT:\n      return 'A standard project layout with basic task tracking and team management.';\n    case ProjectTemplateType.ERP:\n      return 'Enterprise Resource Planning template with modules for operations, HR, and finance integration.';\n    case ProjectTemplateType.MARKETING:\n      return 'Campaign-focused template with audience analytics, content calendar, and conversion tracking.';\n    case ProjectTemplateType.FINANCE:\n      return 'Financial project template with budget forecasting, expense tracking, and ROI analysis tools.';\n    case ProjectTemplateType.SUPPLY_CHAIN:\n      return 'Supply chain management template with inventory tracking, logistics planning, and vendor management.';\n    case ProjectTemplateType.WEBSITE:\n      return 'Website development template with design, development, and launch phases plus SEO tracking.';\n    case ProjectTemplateType.INFRASTRUCTURE:\n      return 'IT infrastructure template with network diagrams, deployment planning, and maintenance scheduling.';\n    default:\n      return 'Select a template to see more details.';\n  }\n};","map":{"version":3,"names":["ProjectTemplateType","api","generateDynamicTemplateSvg","templateType","data","projectCount","inProgressCount","completedCount","tasksCount","averageProgress","upcomingTasks","color","name","progressCircumference","progressValue","Math","min","max","dashArrayValue","taskItems","slice","map","task","index","length","substring","join","svgContent","fetchProjectData","results","projectsResponse","projects","getAllProjects","filter","p","status","round","reduce","acc","progress","tasksLists","Promise","all","tasks","getAllTasks","id","allTasks","flatMap","r","Boolean","t","sort","a","b","Date","dueDate","getTime","title","error","console","cachedProjectData","lastFetchTime","CACHE_LIFETIME","generateTemplatePlaceholder","getColorForTemplate","type","DEFAULT","ERP","MARKETING","FINANCE","SUPPLY_CHAIN","WEBSITE","INFRASTRUCTURE","getTemplateName","now","svgBase64","btoa","getTemplatePreviewPath","simpleSvg","then","dataUrl","placeholderId","document","querySelectorAll","forEach","img","src","getTemplateDescription"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/imagePlaceholders.ts"],"sourcesContent":["import { ProjectTemplateType } from '../types';\nimport api from '../services/api';\n\n// SVG Templates with placeholders for dynamic data\nconst generateDynamicTemplateSvg = (\n  templateType: ProjectTemplateType, \n  data: {\n    projectCount: number;\n    inProgressCount: number;\n    completedCount: number;\n    tasksCount: number;\n    averageProgress: number;\n    upcomingTasks: string[];\n    color: string;\n    name: string;\n  }\n) => {\n  const { \n    projectCount, \n    inProgressCount,\n    completedCount,\n    tasksCount,\n    averageProgress, \n    upcomingTasks,\n    color,\n    name\n  } = data;\n\n  // Calculate progress circle arc length (complete circle circumference is 440)\n  const progressCircumference = 440;\n  const progressValue = Math.min(100, Math.max(0, averageProgress)); // Ensure between 0-100\n  const dashArrayValue = (progressValue / 100) * progressCircumference;\n  \n  // Format tasks for display\n  const taskItems = upcomingTasks.slice(0, 4).map((task, index) => \n    `<rect x=\"530\" y=\"${240 + index * 40}\" width=\"230\" height=\"30\" rx=\"3\" fill=\"#f5f5f5\" stroke=\"#ddd\" />\n     <text x=\"540\" y=\"${260 + index * 40}\" font-family=\"Arial\" font-size=\"12\" fill=\"#333\">${task.length > 25 ? task.substring(0, 25) + '...' : task}</text>`\n  ).join('');\n\n  // Create SVG with dynamic data\n  const svgContent = `\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f0f0f0\" />\n      \n      <!-- Header bar -->\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"20\" y=\"38\" font-family=\"Arial\" font-size=\"18\" fill=\"white\">${name} Project Template</text>\n      \n      <!-- Left sidebar -->\n      <rect x=\"0\" y=\"60\" width=\"200\" height=\"540\" fill=\"#e0e0e0\" />\n      \n      <!-- Main content area with mock sections -->\n      <rect x=\"220\" y=\"80\" width=\"560\" height=\"120\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"105\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Dashboard</text>\n      <rect x=\"240\" y=\"130\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"150\" width=\"520\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"170\" width=\"400\" height=\"10\" rx=\"3\" fill=\"#ddd\" />\n      \n      <!-- Chart area with actual stats -->\n      <rect x=\"220\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Status</text>\n      \n      <!-- Progress Circle -->\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"#eee\" stroke-width=\"30\" />\n      <circle cx=\"355\" cy=\"310\" r=\"70\" fill=\"none\" stroke=\"${color}\" stroke-width=\"30\" \n              stroke-dasharray=\"${dashArrayValue} ${progressCircumference}\" transform=\"rotate(-90, 355, 310)\" />\n      <text x=\"355\" y=\"310\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\" dominant-baseline=\"middle\">${progressValue}%</text>\n      <text x=\"355\" y=\"340\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\" text-anchor=\"middle\">Completion</text>\n      \n      <!-- Project Stats -->\n      <text x=\"240\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">Total Projects: ${projectCount}</text>\n      <text x=\"380\" y=\"390\" font-family=\"Arial\" font-size=\"12\" fill=\"#777\">In Progress: ${inProgressCount}</text>\n      \n      <!-- Task list area with actual tasks -->\n      <rect x=\"510\" y=\"220\" width=\"270\" height=\"180\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"530\" y=\"245\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Upcoming Tasks (${tasksCount})</text>\n      \n      ${taskItems}\n      \n      <!-- Calendar/timeline area -->\n      <rect x=\"220\" y=\"420\" width=\"560\" height=\"160\" rx=\"5\" fill=\"white\" stroke=\"#ccc\" />\n      <text x=\"240\" y=\"445\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Project Timeline</text>\n      <rect x=\"240\" y=\"450\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"490\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      <rect x=\"240\" y=\"530\" width=\"520\" height=\"1\" fill=\"#ddd\" />\n      \n      <rect x=\"280\" y=\"460\" width=\"100\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      <rect x=\"420\" y=\"460\" width=\"150\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.4\" />\n      <rect x=\"320\" y=\"500\" width=\"120\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.5\" />\n      <rect x=\"580\" y=\"500\" width=\"80\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.7\" />\n      <rect x=\"480\" y=\"540\" width=\"130\" height=\"20\" rx=\"3\" fill=\"${color}\" opacity=\"0.6\" />\n      \n      <!-- Sidebar items -->\n      <rect x=\"20\" y=\"100\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"140\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"180\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"220\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      <rect x=\"20\" y=\"260\" width=\"160\" height=\"20\" rx=\"3\" fill=\"#fff\" />\n      \n      <!-- Template name overlay for clarity -->\n      <rect x=\"230\" y=\"540\" width=\"300\" height=\"30\" rx=\"15\" fill=\"rgba(255,255,255,0.9)\" />\n      <text x=\"250\" y=\"562\" font-family=\"Arial\" font-size=\"16\" fill=\"${color}\">${name} Template Preview</text>\n    </svg>\n  `;\n  \n  return svgContent;\n};\n\n// Fetch real project data for template preview\nconst fetchProjectData = async () => {\n  try {\n    // Default values in case API call fails\n    let results = {\n      projectCount: 12,\n      inProgressCount: 8,\n      completedCount: 2,\n      tasksCount: 24,\n      averageProgress: 45,\n      upcomingTasks: [\n        \"Website Design Update\",\n        \"Content Migration\",\n        \"Testing Phase 1\",\n        \"Deploy to Staging\"\n      ]\n    };\n    \n    // Try to get real data from API\n    const projectsResponse = await api.projects.getAllProjects('');\n    if (projectsResponse.data) {\n      const projects = projectsResponse.data;\n      \n      results.projectCount = projects.length;\n      results.inProgressCount = projects.filter(p => p.status === 'IN_PROGRESS').length;\n      results.completedCount = projects.filter(p => p.status === 'COMPLETED').length;\n      results.averageProgress = projects.length > 0 \n        ? Math.round(projects.reduce((acc, p) => acc + (p.progress || 0), 0) / projects.length)\n        : 0;\n      \n      // Try to get tasks - using the correct API method\n      const tasksLists = await Promise.all(\n        projects.slice(0, 3).map(p => api.tasks.getAllTasks(p.id, ''))\n      );\n      \n      const allTasks = tasksLists.flatMap(r => r.data || []).filter(Boolean);\n      results.tasksCount = allTasks.length;\n      \n      // Get upcoming tasks (not completed)\n      const upcomingTasks = allTasks\n        .filter(t => t.status !== 'COMPLETED')\n        .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n        .map(t => t.title);\n      \n      if (upcomingTasks.length > 0) {\n        results.upcomingTasks = upcomingTasks;\n      }\n    }\n    \n    return results;\n  } catch (error) {\n    console.error(\"Error fetching project data for template preview:\", error);\n    // Return default data on error\n    return {\n      projectCount: 12,\n      inProgressCount: 7,\n      completedCount: 3,\n      tasksCount: 24,\n      averageProgress: 45,\n      upcomingTasks: [\n        \"Website Design Update\",\n        \"Content Migration\",\n        \"Testing Phase 1\",\n        \"Deploy to Staging\"\n      ]\n    };\n  }\n};\n\n// Cache for project data to avoid too many API calls\nlet cachedProjectData = null;\nlet lastFetchTime = 0;\nconst CACHE_LIFETIME = 60000; // 1 minute in milliseconds\n\n// Function to generate placeholder images for template previews\nexport const generateTemplatePlaceholder = async (templateType: ProjectTemplateType): Promise<string> => {\n  // Create a unique color for each template type\n  const getColorForTemplate = (type: ProjectTemplateType): string => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return '#4A6572';\n      case ProjectTemplateType.ERP:\n        return '#0277BD';\n      case ProjectTemplateType.MARKETING:\n        return '#C2185B';\n      case ProjectTemplateType.FINANCE:\n        return '#00796B';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return '#E65100';\n      case ProjectTemplateType.WEBSITE:\n        return '#6A1B9A';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return '#283593';\n      default:\n        return '#757575';\n    }\n  };\n\n  // Get a name for the template\n  const getTemplateName = (type: ProjectTemplateType): string => {\n    switch (type) {\n      case ProjectTemplateType.DEFAULT:\n        return 'Default';\n      case ProjectTemplateType.ERP:\n        return 'ERP';\n      case ProjectTemplateType.MARKETING:\n        return 'Marketing';\n      case ProjectTemplateType.FINANCE:\n        return 'Finance';\n      case ProjectTemplateType.SUPPLY_CHAIN:\n        return 'Supply Chain';\n      case ProjectTemplateType.WEBSITE:\n        return 'Website';\n      case ProjectTemplateType.INFRASTRUCTURE:\n        return 'Infrastructure';\n      default:\n        return 'Template';\n    }\n  };\n\n  // Check if we need to fetch new data\n  const now = Date.now();\n  if (!cachedProjectData || now - lastFetchTime > CACHE_LIFETIME) {\n    cachedProjectData = await fetchProjectData();\n    lastFetchTime = now;\n  }\n  \n  // Generate an SVG placeholder with unique styling per template\n  const color = getColorForTemplate(templateType);\n  const name = getTemplateName(templateType);\n  \n  // Generate the SVG with dynamic data\n  const svgContent = generateDynamicTemplateSvg(templateType, {\n    ...cachedProjectData,\n    color,\n    name\n  });\n  \n  // Convert the SVG to a data URL\n  const svgBase64 = btoa(svgContent);\n  return `data:image/svg+xml;base64,${svgBase64}`;\n};\n\n// Export template image URLs - make compatible with both async and sync usage\nexport const getTemplatePreviewPath = (templateType: ProjectTemplateType): string => {\n  // Create a temporary SVG while the real one loads\n  const color = templateType === ProjectTemplateType.DEFAULT ? '#4A6572' :\n                templateType === ProjectTemplateType.ERP ? '#0277BD' :\n                templateType === ProjectTemplateType.MARKETING ? '#C2185B' :\n                templateType === ProjectTemplateType.FINANCE ? '#00796B' :\n                templateType === ProjectTemplateType.SUPPLY_CHAIN ? '#E65100' :\n                templateType === ProjectTemplateType.WEBSITE ? '#6A1B9A' :\n                templateType === ProjectTemplateType.INFRASTRUCTURE ? '#283593' : '#757575';\n                \n  const name = templateType === ProjectTemplateType.DEFAULT ? 'Default' :\n               templateType === ProjectTemplateType.ERP ? 'ERP' :\n               templateType === ProjectTemplateType.MARKETING ? 'Marketing' :\n               templateType === ProjectTemplateType.FINANCE ? 'Finance' :\n               templateType === ProjectTemplateType.SUPPLY_CHAIN ? 'Supply Chain' :\n               templateType === ProjectTemplateType.WEBSITE ? 'Website' :\n               templateType === ProjectTemplateType.INFRASTRUCTURE ? 'Infrastructure' : 'Template';\n  \n  // Simple placeholder SVG while loading\n  const simpleSvg = `\n    <svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"800\" height=\"600\" fill=\"#f5f5f5\" />\n      <rect width=\"800\" height=\"60\" fill=\"${color}\" />\n      <text x=\"400\" y=\"300\" font-family=\"Arial\" font-size=\"24\" fill=\"#333\" text-anchor=\"middle\">Loading ${name} Template Preview...</text>\n    </svg>\n  `;\n  \n  const svgBase64 = btoa(simpleSvg);\n  \n  // Start loading the actual template\n  generateTemplatePlaceholder(templateType).then(dataUrl => {\n    // When ready, find all images with this placeholder and replace them\n    const placeholderId = `template-placeholder-${templateType}`;\n    if (typeof document !== 'undefined') {\n      document.querySelectorAll(`img[data-placeholder-id=\"${placeholderId}\"]`)\n        .forEach(img => {\n          (img as HTMLImageElement).src = dataUrl;\n        });\n    }\n  });\n  \n  return `data:image/svg+xml;base64,${svgBase64}`;\n};\n\n// Get template description based on type\nexport const getTemplateDescription = (templateType: ProjectTemplateType): string => {\n  switch (templateType) {\n    case ProjectTemplateType.DEFAULT:\n      return 'A standard project layout with basic task tracking and team management.';\n    case ProjectTemplateType.ERP:\n      return 'Enterprise Resource Planning template with modules for operations, HR, and finance integration.';\n    case ProjectTemplateType.MARKETING:\n      return 'Campaign-focused template with audience analytics, content calendar, and conversion tracking.';\n    case ProjectTemplateType.FINANCE:\n      return 'Financial project template with budget forecasting, expense tracking, and ROI analysis tools.';\n    case ProjectTemplateType.SUPPLY_CHAIN:\n      return 'Supply chain management template with inventory tracking, logistics planning, and vendor management.';\n    case ProjectTemplateType.WEBSITE:\n      return 'Website development template with design, development, and launch phases plus SEO tracking.';\n    case ProjectTemplateType.INFRASTRUCTURE:\n      return 'IT infrastructure template with network diagrams, deployment planning, and maintenance scheduling.';\n    default:\n      return 'Select a template to see more details.';\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}