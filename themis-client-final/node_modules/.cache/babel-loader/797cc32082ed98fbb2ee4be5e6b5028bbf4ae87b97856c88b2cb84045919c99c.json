{"ast":null,"code":"import axios from'axios';import{API_BASE_URL,FEATURES}from'../config';import LocalStorageService from'./LocalStorageService';import{v4 as uuidv4}from'uuid';import{ProjectStatus,TaskStatus,UserRole,TaskPriority,RiskStatus,RiskImpact,IssueStatus,AssignmentStatus,MeetingStatus,ProjectPriority,ProjectTemplateType}from'../types';import{mockProjects}from'./mockData';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});// Helper function to simulate delay\nconst delay=()=>new Promise(resolve=>setTimeout(resolve,500));// Helper to simulate network delay\nconst sleep=ms=>new Promise(resolve=>setTimeout(resolve,ms));// Standard delay duration\nconst simulateDelay=()=>sleep(Math.random()*300+200);// 200-500ms\n// Create a reusable mock IT department\nconst mockITDepartment={id:'1',name:'IT',description:'Information Technology Department',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};// Mock Departments\nconst mockDepartments=[{id:'1',name:'Engineering',description:'Software Engineering Department',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:'2',name:'Design',description:'Product Design Department',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:'3',name:'Product',description:'Product Management Department',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}];// Test users with different roles\nconst testUsers={admin:{id:'user-1',username:'john.smith',firstName:'John',lastName:'Smith',email:'john.smith@themis.com',role:UserRole.ADMIN,department:mockITDepartment,isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},manager1:{id:'user-2',username:'sarah.johnson',firstName:'Sarah',lastName:'Johnson',email:'sarah.johnson@themis.com',role:UserRole.MANAGER,department:mockITDepartment,isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},manager2:{id:'user-3',username:'michael.chen',firstName:'Michael',lastName:'Chen',email:'michael.chen@themis.com',role:UserRole.MANAGER,department:mockITDepartment,isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},developer:{id:'user-4',username:'emma.davis',firstName:'Emma',lastName:'Davis',email:'emma.davis@themis.com',role:UserRole.DEVELOPER,department:mockITDepartment,isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},designer:{id:'user-5',username:'david.wilson',firstName:'David',lastName:'Wilson',email:'david.wilson@themis.com',role:UserRole.DESIGNER,department:mockITDepartment,isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}};// Define a default projectId\nconst defaultProjectId='default-project-id';// Add a default project reference for the task objects\nconst getDefaultProject=projectId=>{return{id:projectId,name:'Sample Project',description:'A sample project for task testing',client:'Sample Client',status:ProjectStatus.IN_PROGRESS,priority:ProjectPriority.MEDIUM,startDate:'2023-01-01',endDate:'2023-12-31',projectManager:testUsers.admin,department:mockDepartments[0],progress:50,budget:100000,actualCost:50000,createdAt:'2023-01-01T00:00:00Z',updatedAt:'2023-01-01T00:00:00Z'};};// Update the mock tasks with the required 'project' property\nconst mockTasks=[{id:'1',projectId:defaultProjectId,title:'Requirements Analysis',description:'Analyze the requirements for the new system',status:TaskStatus.TODO,priority:TaskPriority.HIGH,startDate:'2023-01-15',dueDate:'2023-01-31',assignee:testUsers.admin,createdBy:testUsers.admin,createdAt:'2023-01-01T00:00:00Z',updatedAt:'2023-01-01T00:00:00Z',isMilestone:false,project:getDefaultProject(defaultProjectId)},{id:'2',projectId:defaultProjectId,title:'Database Schema Design',description:'Design the database schema for the new system',status:TaskStatus.IN_PROGRESS,priority:TaskPriority.MEDIUM,startDate:'2023-02-01',dueDate:'2023-02-15',assignee:testUsers.developer,createdBy:testUsers.admin,createdAt:'2023-01-15T00:00:00Z',updatedAt:'2023-01-15T00:00:00Z',isMilestone:false,project:getDefaultProject(defaultProjectId)}];/**\n * Generic API request function with error handling\n */export const apiRequest=async function(endpoint){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'GET';let data=arguments.length>2?arguments[2]:undefined;let token=arguments.length>3?arguments[3]:undefined;let isFormData=arguments.length>4?arguments[4]:undefined;const USE_MOCK_DATA=true;// Set to true for development without backend\ntry{// Set up the full URL\nconst url=`${API_BASE_URL}${endpoint}`;// Set up options\nconst headers={};// Set content type if not form data\nif(!isFormData){headers['Content-Type']='application/json';}// Add auth token if provided\nif(token){headers['Authorization']=`Bearer ${token}`;}const options={method,headers};// Add body to the request if needed\nif(data&&(method==='POST'||method==='PUT'||method==='PATCH')){options.body=isFormData?data:JSON.stringify(data);}// Make the request\nif(!USE_MOCK_DATA){const response=await fetch(url,options);// Check if the request was successful\nif(!response.ok){const errorData=await response.json().catch(()=>null);throw new Error((errorData===null||errorData===void 0?void 0:errorData.message)||`Request failed with status ${response.status}`);}// Check if the response is empty\nconst contentType=response.headers.get('content-type');if(contentType&&contentType.includes('application/json')){return await response.json();}return await response.text();}else{// Return mock data (with persistence)\nconsole.log(`Using mock data for endpoint: ${endpoint}, method: ${method}`);return getMockData(endpoint,method,data);}}catch(error){console.error('API request failed:',error);if(USE_MOCK_DATA){console.log(`Falling back to mock data for endpoint: ${endpoint}`);return getMockData(endpoint,method,data);}throw error;}};/**\n * Returns mock data for development based on the endpoint\n * Uses localStorage for persistence when available\n */const getMockData=function(endpoint){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'GET';let data=arguments.length>2?arguments[2]:undefined;// Create a new resource (POST)\nif(method==='POST'){// Handle creating a new project\nif(endpoint==='/api/projects'){// Generate a random ID for the new project\nconst newId=uuidv4();const createdAt=new Date().toISOString();// Create the new project with the provided data\nconst newProject={id:newId,...data,createdAt,updatedAt:createdAt};// Save to local storage\nLocalStorageService.addProject(newProject);return{data:newProject,success:true};}// Handle creating a new task for a project\nif(endpoint.includes('/api/projects/')&&endpoint.includes('/tasks')){const projectId=endpoint.split('/projects/')[1].split('/tasks')[0];// Generate a random ID for the new task\nconst newId=uuidv4();const createdAt=new Date().toISOString();// Create the new task with the provided data\nconst newTask={id:newId,projectId,...data,createdAt,updatedAt:createdAt};// Save to local storage\nLocalStorageService.addTask(newTask);return{data:newTask,success:true};}// Handle creating a new independent task\nif(endpoint==='/api/tasks/independent'){// Generate a random ID for the new task\nconst newId=uuidv4();const createdAt=new Date().toISOString();// Create the new task with the provided data\nconst newTask={id:newId,...data,createdAt,updatedAt:createdAt};// Save to local storage\nLocalStorageService.addIndependentTask(newTask);return{data:newTask,success:true};}// Handle creating a new meeting\nif(endpoint==='/api/meetings'){// Generate a random ID for the new meeting\nconst newId=uuidv4();const createdAt=new Date().toISOString();// Create the new meeting with the provided data\nconst newMeeting={id:newId,...data,createdAt,updatedAt:createdAt,meetingLink:data.meetingLink||`https://meet.example.com/${newId}`,status:data.status||MeetingStatus.SCHEDULED,isActive:data.isActive||false,organizer:data.organizer||testUsers.admin,participants:data.participants||[]};// Save to local storage\nLocalStorageService.addMeeting(newMeeting);return{data:newMeeting,success:true};}// Handle creating a new risk\nif(endpoint.includes('/projects/')&&endpoint.includes('/risks')){const projectId=endpoint.split('/projects/')[1].split('/risks')[0];// Generate a random ID for the new risk\nconst newId=uuidv4();const createdAt=new Date().toISOString();// Create the new risk with the provided data\nconst newRisk={id:newId,projectId,...data,createdAt,updatedAt:createdAt};// Save to local storage\nLocalStorageService.addRisk(newRisk);return{data:newRisk,success:true};}// Handle creating a new issue\nif(endpoint.includes('/projects/')&&endpoint.includes('/issues')){const projectId=endpoint.split('/projects/')[1].split('/issues')[0];// Generate a random ID for the new issue\nconst newId=uuidv4();const createdAt=new Date().toISOString();// Create the new issue with the provided data\nconst newIssue={id:newId,projectId,...data,createdAt,updatedAt:createdAt};// Save to local storage\nLocalStorageService.addIssue(newIssue);return{data:newIssue,success:true};}// Handle creating a new department\nif(endpoint==='/api/departments'){const newDepartment={id:uuidv4(),name:data.name,description:data.description||`${data.name} Department`,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};// Save to local storage\nLocalStorageService.addDepartment(newDepartment);return{data:newDepartment,success:true};}}// Update an existing resource (PUT)\nif(method==='PUT'){// Handle updating a project\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)){const projectId=endpoint.split('/projects/')[1];// Update the project in local storage\nconst updatedProject=LocalStorageService.updateProject(projectId,{...data,updatedAt:new Date().toISOString()});return{data:updatedProject,success:!!updatedProject};}// Handle updating a task for a project\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)){const parts=endpoint.split('/');const projectId=parts[parts.length-3];const taskId=parts[parts.length-1];// Update the task in local storage\nconst updatedTask=LocalStorageService.updateTask(projectId,taskId,{...data,updatedAt:new Date().toISOString()});return{data:updatedTask,success:!!updatedTask};}// Handle updating an independent task\nif(endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)){const taskId=endpoint.split('/independent/')[1];// Update the task in local storage\nconst updatedTask=LocalStorageService.updateIndependentTask(taskId,{...data,updatedAt:new Date().toISOString()});return{data:updatedTask,success:!!updatedTask};}// Handle updating a meeting\nif(endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)){const meetingId=endpoint.split('/meetings/')[1];// Update the meeting in local storage\nconst updatedMeeting=LocalStorageService.updateMeeting(meetingId,{...data,updatedAt:new Date().toISOString()});return{data:updatedMeeting,success:!!updatedMeeting};}// Handle updating a risk\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)){const parts=endpoint.split('/');const projectId=parts[parts.length-3];const riskId=parts[parts.length-1];// Update the risk in local storage\nconst updatedRisk=LocalStorageService.updateRisk(projectId,riskId,{...data,updatedAt:new Date().toISOString()});return{data:updatedRisk,success:!!updatedRisk};}// Handle updating an issue\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)){const parts=endpoint.split('/');const projectId=parts[parts.length-3];const issueId=parts[parts.length-1];// Update the issue in local storage\nconst updatedIssue=LocalStorageService.updateIssue(projectId,issueId,{...data,updatedAt:new Date().toISOString()});return{data:updatedIssue,success:!!updatedIssue};}}// Delete a resource (DELETE)\nif(method==='DELETE'){// Handle deleting a project\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)){const projectId=endpoint.split('/projects/')[1];// Delete the project from local storage\nLocalStorageService.deleteProject(projectId);return{success:true};}// Handle deleting a task from a project\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)){const parts=endpoint.split('/');const projectId=parts[parts.length-3];const taskId=parts[parts.length-1];// Delete the task from local storage\nLocalStorageService.deleteTask(projectId,taskId);return{success:true};}// Handle deleting an independent task\nif(endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)){const taskId=endpoint.split('/independent/')[1];// Delete the task from local storage\nLocalStorageService.deleteIndependentTask(taskId);return{success:true};}// Handle deleting a meeting\nif(endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)){const meetingId=endpoint.split('/meetings/')[1];// Delete the meeting from local storage\nLocalStorageService.deleteMeeting(meetingId);return{success:true};}// Handle deleting a risk\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)){const parts=endpoint.split('/');const projectId=parts[parts.length-3];const riskId=parts[parts.length-1];// Delete the risk from local storage\nLocalStorageService.deleteRisk(projectId,riskId);return{success:true};}// Handle deleting an issue\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)){const parts=endpoint.split('/');const projectId=parts[parts.length-3];const issueId=parts[parts.length-1];// Delete the issue from local storage\nLocalStorageService.deleteIssue(projectId,issueId);return{success:true};}}// GET requests for fetching data\nif(method==='GET'){// Get all projects\nif(endpoint==='/api/projects'){// Get projects from local storage or use mock data if none\nconst storedProjects=LocalStorageService.getProjects();if(storedProjects.length>0){return{data:storedProjects,success:true};}// Initialize localStorage with mockProjects from mockData.ts\nLocalStorageService.saveProjects(mockProjects);return{data:mockProjects,success:true};}// Get a specific project\nif(endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)){const projectId=endpoint.split('/projects/')[1];// Get project from local storage\nconst project=LocalStorageService.getProject(projectId);if(project){return{data:project,success:true};}return{success:false,message:'Project not found'};}// Get tasks for a project\nif(endpoint.includes('/projects/')&&endpoint.includes('/tasks')){const projectId=endpoint.split('/projects/')[1].split('/tasks')[0];// Get tasks from local storage or use mock data if none\nconst storedTasks=LocalStorageService.getTasks(projectId);if(storedTasks.length>0){return{data:storedTasks,success:true};}// Create default tasks for this project\nconst tasks=mockTasks;// Save default tasks to local storage\nLocalStorageService.saveTasks(projectId,tasks);return{data:tasks,success:true};}// Get independent tasks\nif(endpoint==='/api/tasks/independent'){// Get tasks from local storage or use mock data if none\nconst storedTasks=LocalStorageService.getIndependentTasks();if(storedTasks.length>0){return{data:storedTasks,success:true};}// Default empty response\nreturn{data:[],success:true};}// Get all meetings\nif(endpoint==='/api/meetings'){// Get meetings from local storage or use mock data if none\nconst storedMeetings=LocalStorageService.getMeetings();if(storedMeetings.length>0){return{data:storedMeetings,success:true};}// Add isActive field for LocalStorageService compatibility\nconst meetingsWithIsActive=defaultMeetings.map(meeting=>({...meeting,isActive:meeting.status===MeetingStatus.IN_PROGRESS}));// Save default meetings to local storage\nLocalStorageService.saveMeetings(meetingsWithIsActive);return{data:meetingsWithIsActive,success:true};}// Get risks for a project\nif(endpoint.includes('/projects/')&&endpoint.includes('/risks')){const projectId=endpoint.split('/projects/')[1].split('/risks')[0];// Get risks from local storage or use mock data if none\nconst storedRisks=LocalStorageService.getRisks(projectId);if(storedRisks.length>0){return{data:storedRisks,success:true};}// Default mock risks\nconst defaultRisks=createDefaultRisks(projectId);// Save default risks to local storage\nLocalStorageService.saveRisks(projectId,defaultRisks);return{data:defaultRisks,success:true};}// Get issues for a project\nif(endpoint.includes('/projects/')&&endpoint.includes('/issues')){const projectId=endpoint.split('/projects/')[1].split('/issues')[0];// Get issues from local storage or use mock data if none\nconst storedIssues=LocalStorageService.getIssues(projectId);if(storedIssues.length>0){return{data:storedIssues,success:true};}// Default mock issues\nconst defaultIssues=createDefaultIssues(projectId);// Save default issues to local storage\nLocalStorageService.saveIssues(projectId,defaultIssues);return{data:defaultIssues,success:true};}// Get departments\nif(endpoint==='/api/departments'){const departments=LocalStorageService.getDepartments();if(departments.length>0){return{data:departments,success:true};}return{data:[],success:true};}}// Default empty response for unhandled endpoints\nreturn{data:[],success:true};};// Default mock meetings\nconst defaultMeetings=[{id:'1',title:'Sprint Planning',description:'Plan tasks for the next sprint',startTime:new Date(Date.now()+2*24*60*60*1000).toISOString(),endTime:new Date(Date.now()+2*24*60*60*1000+60*60*1000).toISOString(),status:MeetingStatus.SCHEDULED,isActive:false,meetingLink:'https://meet.example.com/sprint-planning',organizer:testUsers.admin,participants:[testUsers.manager1,testUsers.developer],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:'2',title:'Project Status Review',description:'Review the current status of the Digital Transformation project',startTime:new Date(Date.now()+30*60*1000).toISOString(),endTime:new Date(Date.now()+90*60*1000).toISOString(),status:MeetingStatus.SCHEDULED,isActive:false,meetingLink:'https://meet.example.com/project-status',organizer:testUsers.admin,participants:[testUsers.manager1,testUsers.manager2],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}];// Default mock risks\nconst createDefaultRisks=projectId=>[{id:'1',projectId,title:'Data Migration Risk',description:'Risk of data loss during migration process',status:RiskStatus.IDENTIFIED,impact:RiskImpact.HIGH,probability:70,mitigation:'Create multiple backups before migration and perform test migrations on sample data',owner:testUsers.admin,createdBy:testUsers.admin,createdAt:'2023-01-10T00:00:00Z',updatedAt:'2023-01-10T00:00:00Z'},{id:'2',projectId,title:'Resource Availability Risk',description:'Risk of key team members being unavailable during critical project phases',status:RiskStatus.ASSESSED,impact:RiskImpact.MEDIUM,probability:50,mitigation:'Develop contingency plans and cross-train team members',owner:testUsers.admin,createdBy:testUsers.admin,createdAt:'2023-01-15T00:00:00Z',updatedAt:'2023-01-15T00:00:00Z'}];// Default mock issues\nconst createDefaultIssues=projectId=>[{id:'1',projectId,title:'Integration Failure with Legacy System',description:'The new system cannot properly integrate with the existing legacy system',status:IssueStatus.OPEN,impact:RiskImpact.HIGH,owner:testUsers.admin,createdBy:testUsers.admin,createdAt:'2023-02-10T00:00:00Z',updatedAt:'2023-02-10T00:00:00Z'},{id:'2',projectId,title:'Performance Bottleneck in Module A',description:'Module A performance is not meeting expected throughput requirements',status:IssueStatus.IN_PROGRESS,impact:RiskImpact.MEDIUM,owner:testUsers.admin,createdBy:testUsers.admin,createdAt:'2023-02-15T00:00:00Z',updatedAt:'2023-02-20T00:00:00Z'},{id:'3',projectId,title:'Security Vulnerability in Authentication',description:'Security audit identified a potential vulnerability in the authentication process',status:IssueStatus.RESOLVED,impact:RiskImpact.CRITICAL,resolutionSummary:'Implemented updated security protocols and fixed the vulnerability with patch 1.2.3',owner:testUsers.admin,createdBy:testUsers.admin,createdAt:'2023-01-25T00:00:00Z',updatedAt:'2023-02-05T00:00:00Z'}];// Update the defaultProjects array with the required properties\nconst defaultProjects=[{id:'proj-1',name:'Digital Transformation',description:'Enterprise digital transformation project',priority:ProjectPriority.HIGH,startDate:'2023-01-15',endDate:'2023-12-31',status:ProjectStatus.IN_PROGRESS,progress:65,budget:500000,actualCost:325000,department:mockDepartments[0],projectManager:testUsers.manager1,createdAt:'2023-01-01T00:00:00Z',updatedAt:'2023-01-01T00:00:00Z',templateType:ProjectTemplateType.DEFAULT},{id:'proj-2',name:'Cloud Migration',description:'Migration of on-premises infrastructure to cloud',priority:ProjectPriority.MEDIUM,startDate:'2023-02-01',endDate:'2023-08-31',status:ProjectStatus.ON_HOLD,progress:40,budget:300000,actualCost:120000,department:mockDepartments[1],projectManager:testUsers.manager2,createdAt:'2023-01-15T00:00:00Z',updatedAt:'2023-01-15T00:00:00Z',templateType:ProjectTemplateType.INFRASTRUCTURE},{id:'proj-3',name:'E-commerce Platform Redesign',description:'Redesign and modernization of e-commerce platform',priority:ProjectPriority.CRITICAL,startDate:'2023-03-01',endDate:'2023-07-15',status:ProjectStatus.COMPLETED,progress:100,budget:450000,actualCost:435000,department:mockDepartments[0],projectManager:testUsers.manager1,createdAt:'2023-02-15T00:00:00Z',updatedAt:'2023-07-18T00:00:00Z',templateType:ProjectTemplateType.WEBSITE},{id:'proj-4',name:'Mobile App Development',description:'Cross-platform mobile application for customer engagement',priority:ProjectPriority.HIGH,startDate:'2023-04-01',endDate:'2023-10-31',status:ProjectStatus.IN_PROGRESS,progress:55,budget:380000,actualCost:210000,department:mockDepartments[1],projectManager:testUsers.manager2,createdAt:'2023-03-15T00:00:00Z',updatedAt:'2023-07-20T00:00:00Z',templateType:ProjectTemplateType.DEFAULT},{id:'proj-5',name:'Security Infrastructure Enhancement',description:'Upgrade of security systems and implementation of advanced protection measures',priority:ProjectPriority.CRITICAL,startDate:'2023-01-15',endDate:'2023-05-30',status:ProjectStatus.COMPLETED,progress:100,budget:275000,actualCost:268000,department:mockDepartments[0],projectManager:testUsers.manager1,createdAt:'2023-01-05T00:00:00Z',updatedAt:'2023-06-02T00:00:00Z',templateType:ProjectTemplateType.INFRASTRUCTURE},{id:'proj-6',name:'Data Center Relocation',description:'Physical relocation of data center to new facility',priority:ProjectPriority.HIGH,startDate:'2023-02-15',endDate:'2023-09-15',status:ProjectStatus.ON_HOLD,progress:35,budget:600000,actualCost:210000,department:mockDepartments[0],projectManager:testUsers.manager1,createdAt:'2023-02-01T00:00:00Z',updatedAt:'2023-06-30T00:00:00Z',templateType:ProjectTemplateType.INFRASTRUCTURE},{id:'proj-7',name:'AI Chatbot Implementation',description:'Development and integration of AI-powered customer service chatbot',priority:ProjectPriority.MEDIUM,startDate:'2023-04-15',endDate:'2023-08-15',status:ProjectStatus.IN_PROGRESS,progress:70,budget:225000,actualCost:157500,department:mockDepartments[1],projectManager:testUsers.manager2,createdAt:'2023-04-01T00:00:00Z',updatedAt:'2023-07-15T00:00:00Z',templateType:ProjectTemplateType.WEBSITE},{id:'proj-8',name:'CRM Integration',description:'Integration of new CRM system with existing applications',priority:ProjectPriority.HIGH,startDate:'2023-01-10',endDate:'2023-04-10',status:ProjectStatus.COMPLETED,progress:100,budget:180000,actualCost:172000,department:mockDepartments[1],projectManager:testUsers.manager2,createdAt:'2022-12-20T00:00:00Z',updatedAt:'2023-04-12T00:00:00Z',templateType:ProjectTemplateType.DEFAULT},{id:'proj-9',name:'Financial Reporting System',description:'Implementation of new financial reporting system',priority:ProjectPriority.MEDIUM,startDate:'2023-05-01',endDate:'2023-11-30',status:ProjectStatus.PLANNING,progress:15,budget:320000,actualCost:48000,department:mockDepartments[0],projectManager:testUsers.manager1,createdAt:'2023-04-15T00:00:00Z',updatedAt:'2023-06-10T00:00:00Z',templateType:ProjectTemplateType.FINANCE}];// Helper function to simulate login\nexport const login=async(email,password)=>{// For testing purposes, we'll match the email and return the corresponding test user\nconst user=Object.values(testUsers).find(u=>u.email===email);if(user){return{success:true,data:user,message:'Login successful'};}return{success:false,data:null,message:'Invalid credentials'};};const defaultUsers=[{id:'1',username:'john.doe',firstName:'John',lastName:'Doe',email:'john.doe@themis.com',role:UserRole.PROJECT_MANAGER,department:mockDepartments[0],isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:'2',username:'jane.smith',firstName:'Jane',lastName:'Smith',email:'jane.smith@themis.com',role:UserRole.DEVELOPER,department:mockDepartments[0],isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:'3',username:'mike.johnson',firstName:'Mike',lastName:'Johnson',email:'mike.johnson@themis.com',role:UserRole.DESIGNER,department:mockDepartments[1],isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:'4',username:'sarah.wilson',firstName:'Sarah',lastName:'Wilson',email:'sarah.wilson@themis.com',role:UserRole.DEVELOPER,department:mockDepartments[0],isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:'5',username:'david.brown',firstName:'David',lastName:'Brown',email:'david.brown@themis.com',role:UserRole.PROJECT_MANAGER,department:mockDepartments[2],isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}];const mockAssignments=[{id:'1',title:'Implement User Authentication',description:'Set up JWT authentication and user session management for the application. Include password reset functionality and email verification.',status:AssignmentStatus.IN_PROGRESS,priority:TaskPriority.HIGH,assignedBy:defaultUsers[0],assignedTo:defaultUsers[1],dueDate:new Date(Date.now()+3*24*60*60*1000).toISOString(),createdAt:new Date(Date.now()-5*24*60*60*1000).toISOString(),updatedAt:new Date().toISOString()},{id:'2',title:'Design Landing Page Mockups',description:'Create high-fidelity mockups for the new landing page. Include mobile and desktop versions, with dark mode support.',status:AssignmentStatus.PENDING,priority:TaskPriority.MEDIUM,assignedBy:defaultUsers[0],assignedTo:defaultUsers[2],dueDate:new Date(Date.now()+7*24*60*60*1000).toISOString(),createdAt:new Date(Date.now()-2*24*60*60*1000).toISOString(),updatedAt:new Date().toISOString()},{id:'3',title:'API Performance Optimization',description:'Optimize database queries and implement caching for frequently accessed endpoints. Target 50% reduction in response times.',status:AssignmentStatus.COMPLETED,priority:TaskPriority.HIGH,assignedBy:defaultUsers[0],assignedTo:defaultUsers[3],dueDate:new Date(Date.now()-1*24*60*60*1000).toISOString(),createdAt:new Date(Date.now()-10*24*60*60*1000).toISOString(),updatedAt:new Date().toISOString()},{id:'4',title:'Write End-to-End Tests',description:'Implement comprehensive E2E tests using Cypress for critical user flows. Achieve minimum 80% coverage.',status:AssignmentStatus.IN_PROGRESS,priority:TaskPriority.MEDIUM,assignedBy:defaultUsers[4],assignedTo:defaultUsers[1],dueDate:new Date(Date.now()+5*24*60*60*1000).toISOString(),createdAt:new Date(Date.now()-3*24*60*60*1000).toISOString(),updatedAt:new Date().toISOString()},{id:'5',title:'Security Audit',description:'Conduct a comprehensive security audit of the application. Check for vulnerabilities, update dependencies, and implement security best practices.',status:AssignmentStatus.PENDING,priority:TaskPriority.HIGH,assignedBy:defaultUsers[0],assignedTo:defaultUsers[3],dueDate:new Date(Date.now()+10*24*60*60*1000).toISOString(),createdAt:new Date(Date.now()-1*24*60*60*1000).toISOString(),updatedAt:new Date().toISOString()},{id:'6',title:'Mobile Responsive Design',description:'Ensure all components are fully responsive on mobile devices. Fix any existing layout issues and implement mobile-specific optimizations.',status:AssignmentStatus.IN_PROGRESS,priority:TaskPriority.MEDIUM,assignedBy:defaultUsers[4],assignedTo:defaultUsers[2],dueDate:new Date(Date.now()+4*24*60*60*1000).toISOString(),createdAt:new Date(Date.now()-4*24*60*60*1000).toISOString(),updatedAt:new Date().toISOString()},{id:'7',title:'Documentation Update',description:'Update API documentation and add usage examples for all endpoints. Include authentication requirements and response formats.',status:AssignmentStatus.COMPLETED,priority:TaskPriority.LOW,assignedBy:defaultUsers[0],assignedTo:defaultUsers[1],dueDate:new Date(Date.now()-2*24*60*60*1000).toISOString(),createdAt:new Date(Date.now()-8*24*60*60*1000).toISOString(),updatedAt:new Date().toISOString()},{id:'8',title:'User Analytics Dashboard',description:'Create a new dashboard to display user engagement metrics. Include charts for daily active users, session duration, and feature usage.',status:AssignmentStatus.PENDING,priority:TaskPriority.HIGH,assignedBy:defaultUsers[4],assignedTo:defaultUsers[3],dueDate:new Date(Date.now()+8*24*60*60*1000).toISOString(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}];const assignments={getAllAssignments:async token=>{await delay();return{success:true,data:mockAssignments};},getAssignmentById:async(id,token)=>{await delay();const assignment=mockAssignments.find(a=>a.id===id);return{success:!!assignment,data:assignment||mockAssignments[0]};},createAssignment:async(data,token)=>{await delay();const newAssignment={id:String(mockAssignments.length+1),...data,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};mockAssignments.push(newAssignment);return{success:true,data:newAssignment};},updateAssignment:async(id,data,token)=>{await delay();const index=mockAssignments.findIndex(a=>a.id===id);if(index===-1){return{success:false,error:'Assignment not found'};}mockAssignments[index]={...mockAssignments[index],...data,updatedAt:new Date().toISOString()};return{success:true,data:mockAssignments[index]};},deleteAssignment:async(id,token)=>{await delay();const index=mockAssignments.findIndex(a=>a.id===id);if(index===-1){return{success:false,error:'Assignment not found'};}mockAssignments.splice(index,1);return{success:true};}};// Create a named API object to export instead of using anonymous default export\nconst apiRoutes={// Auth endpoints\nauth:{login:adIdentifier=>{// Mock implementation for testing without backend\nconsole.log('Using mock login implementation');return Promise.resolve({userId:'1',username:adIdentifier,role:UserRole.ADMIN,// Defaulting to ADMIN for testing\ndepartmentId:'1',token:'mock-token-'+Date.now(),success:true,message:'Login successful'});},refreshToken:refreshToken=>apiRequest('/api/auth/refresh','POST',{refreshToken}),logout:token=>apiRequest('/api/auth/logout','POST',{},token)},// User endpoints\nusers:{getCurrentUser:token=>apiRequest('/api/users/me','GET',undefined,token),getAllUsers:async token=>{await delay();return{success:true,data:defaultUsers};},getUserById:(userId,token)=>apiRequest(`/api/users/${userId}`,'GET',undefined,token),createUser:(userData,token)=>apiRequest('/api/users','POST',userData,token),updateUser:(userId,userData,token)=>apiRequest(`/api/users/${userId}`,'PUT',userData,token),deleteUser:(userId,token)=>apiRequest(`/api/users/${userId}`,'DELETE',undefined,token),assignRole:(userId,role,token)=>apiRequest(`/api/users/${userId}/role`,'PUT',{role},token),assignDepartment:(userId,departmentId,token)=>apiRequest(`/api/users/${userId}/department`,'PUT',{departmentId},token),getAllDepartments:token=>apiRequest('/api/users/departments','GET',undefined,token)},// Project endpoints\nprojects:{getAllProjects:async token=>{await simulateDelay();// Get projects from localStorage or use default projects if none exist\nconst storedProjects=localStorage.getItem('themis_projects');const projects=storedProjects?JSON.parse(storedProjects):defaultProjects;return{data:projects,success:true};},getProjectById:async(id,token)=>{await simulateDelay();// Get projects from localStorage or use default projects if none exist\nconst storedProjects=localStorage.getItem('themis_projects');const projects=storedProjects?JSON.parse(storedProjects):defaultProjects;// Find project by ID\nconst project=projects.find(p=>p.id===id);if(!project){throw new Error('Project not found');}return{data:project,success:true};},createProject:async(projectData,token)=>{try{await simulateDelay();// Simulate network delay\n// Generate a new project object with an ID\nconst newProject={...projectData,id:projectData.id||uuidv4(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};// Get existing projects from localStorage or initialize empty array\nconst existingProjects=JSON.parse(localStorage.getItem('themis_projects')||'[]');// Add new project to the list\nlocalStorage.setItem('themis_projects',JSON.stringify([...existingProjects,newProject]));return{data:newProject,success:true};}catch(error){console.error('Error creating project:',error);throw error;}},updateProject:async(projectId,updatedData,token)=>{try{await simulateDelay();// Simulate network delay\n// Get existing projects from localStorage or use default projects if none exist\nconst storedProjects=localStorage.getItem('themis_projects');const projects=storedProjects?JSON.parse(storedProjects):defaultProjects;// Find the index of the project to update\nconst projectIndex=projects.findIndex(p=>p.id===projectId);if(projectIndex===-1){throw new Error('Project not found');}// Update the project\nconst updatedProject={...projects[projectIndex],...updatedData,updatedAt:new Date().toISOString()};projects[projectIndex]=updatedProject;// Save updated projects to localStorage\nlocalStorage.setItem('themis_projects',JSON.stringify(projects));return{data:updatedProject,success:true};}catch(error){console.error('Error updating project:',error);throw error;}},deleteProject:async(projectId,token)=>{await simulateDelay();// Get cached projects or use default mock data\nconst cachedProjects=localStorage.getItem('themis_projects');const projects=cachedProjects?JSON.parse(cachedProjects):defaultProjects;// Filter out the project to delete\nconst updatedProjects=projects.filter(p=>p.id!==projectId);if(projects.length===updatedProjects.length){throw new Error(`Project with ID ${projectId} not found`);}// Update localStorage\nlocalStorage.setItem('themis_projects',JSON.stringify(updatedProjects));return{data:{message:'Project deleted successfully'}};},uploadAttachment:(projectId,formData,token)=>apiRequest(`/api/projects/${projectId}/attachments`,'POST',formData,token,true),getAttachments:(projectId,token)=>apiRequest(`/api/projects/${projectId}/attachments`,'GET',undefined,token),deleteAttachment:(projectId,attachmentId,token)=>apiRequest(`/api/projects/${projectId}/attachments/${attachmentId}`,'DELETE',undefined,token),getProject:async(projectId,token)=>{try{// In a real implementation, this would call the API\n// const response = await axios.get(`${API_BASE_URL}/projects/${projectId}`, {\n//   headers: { Authorization: `Bearer ${token}` }\n// });\n// return response;\n// For now, return mock data\nreturn{data:{id:projectId,name:\"Mock Project\",description:\"This is a mock project returned by the API\",startDate:new Date().toISOString(),endDate:new Date(Date.now()+30*24*60*60*1000).toISOString(),status:\"IN_PROGRESS\",priority:\"MEDIUM\",budget:100000,progress:50,department:{id:\"dept-1\",name:\"IT Department\"},projectManager:{id:\"user-1\",firstName:\"John\",lastName:\"Doe\"},approvalStatus:\"SUBMITTED\",comments:\"This is a sample comment on the project\",reviewHistory:[],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}};}catch(error){console.error('Error fetching project:',error);throw error;}}},// Task endpoints\ntasks:{getAllTasks:(projectId,token)=>apiRequest(`/api/projects/${projectId}/tasks`,'GET',undefined,token),getAllIndependentTasks:token=>apiRequest('/api/tasks/independent','GET',undefined,token),getTaskById:(projectId,taskId,token)=>apiRequest(`/api/projects/${projectId}/tasks/${taskId}`,'GET',undefined,token),getIndependentTaskById:(taskId,token)=>apiRequest(`/api/tasks/independent/${taskId}`,'GET',undefined,token),createTask:(projectId,taskData,token)=>apiRequest(`/api/projects/${projectId}/tasks`,'POST',taskData,token),createIndependentTask:(taskData,token)=>apiRequest('/api/tasks/independent','POST',taskData,token),updateTask:(projectId,taskId,taskData,token)=>apiRequest(`/api/projects/${projectId}/tasks/${taskId}`,'PUT',taskData,token),updateIndependentTask:(taskId,taskData,token)=>apiRequest(`/api/tasks/independent/${taskId}`,'PUT',taskData,token),deleteTask:(projectId,taskId,token)=>apiRequest(`/api/projects/${projectId}/tasks/${taskId}`,'DELETE',undefined,token),deleteIndependentTask:(taskId,token)=>apiRequest(`/api/tasks/independent/${taskId}`,'DELETE',undefined,token),// Add task comment\naddComment:async(projectId,taskId,commentData,token)=>{if(FEATURES.OFFLINE_MODE){// In offline mode, simulate API response\nawait simulateDelay();// Get existing tasks from localStorage\nconst allTasks=JSON.parse(localStorage.getItem('tasks')||'[]');// Find the specific task to add the comment to\nconst taskIndex=allTasks.findIndex(t=>t.id===taskId&&t.projectId===projectId);if(taskIndex!==-1){// Create a new comment\nconst newComment={id:`comment-${Date.now()}`,taskId,text:commentData.text,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),author:{id:commentData.authorId,firstName:commentData.authorFirstName||'User',lastName:commentData.authorLastName||commentData.authorId}};// Add comment to the task\nif(!allTasks[taskIndex].comments){allTasks[taskIndex].comments=[];}allTasks[taskIndex].comments.push(newComment);// Save back to localStorage\nlocalStorage.setItem('tasks',JSON.stringify(allTasks));return{success:true,data:newComment,message:'Comment added successfully'};}else{throw new Error('Task not found');}}else{// In online mode, make actual API call\nconst response=await axios.post(`${API_BASE_URL}/projects/${projectId}/tasks/${taskId}/comments`,commentData,{headers:{Authorization:`Bearer ${token}`}});return response.data;}}},// Risk endpoints\nrisks:{getAllRisks:(projectId,token)=>apiRequest(`/api/projects/${projectId}/risks`,'GET',undefined,token),getRiskById:(projectId,riskId,token)=>apiRequest(`/api/projects/${projectId}/risks/${riskId}`,'GET',undefined,token),createRisk:(projectId,riskData,token)=>apiRequest(`/api/projects/${projectId}/risks`,'POST',riskData,token),updateRisk:(projectId,riskId,riskData,token)=>apiRequest(`/api/projects/${projectId}/risks/${riskId}`,'PUT',riskData,token),deleteRisk:(projectId,riskId,token)=>apiRequest(`/api/projects/${projectId}/risks/${riskId}`,'DELETE',undefined,token)},// Issue endpoints\nissues:{getAllIssues:(projectId,token)=>apiRequest(`/projects/${projectId}/issues`,'GET',null,token),getIssueById:(projectId,issueId,token)=>apiRequest(`/projects/${projectId}/issues/${issueId}`,'GET',null,token),createIssue:(projectId,issueData,token)=>apiRequest(`/projects/${projectId}/issues`,'POST',issueData,token),updateIssue:(projectId,issueId,issueData,token)=>apiRequest(`/projects/${projectId}/issues/${issueId}`,'PUT',issueData,token),deleteIssue:(projectId,issueId,token)=>apiRequest(`/projects/${projectId}/issues/${issueId}`,'DELETE',null,token)},// Task Request endpoints\ntaskRequests:{createTaskRequest:(requestData,token)=>apiRequest('/api/task-requests','POST',requestData,token),getTaskRequestsByProject:(projectId,token)=>apiRequest(`/api/task-requests?projectId=${projectId}`,'GET',undefined,token),getTaskRequestById:(requestId,token)=>apiRequest(`/api/task-requests/${requestId}`,'GET',undefined,token),updateTaskRequestStatus:(requestId,status,reviewNotes,token)=>apiRequest(`/api/task-requests/${requestId}/status`,'PATCH',{status,reviewNotes},token),approveTaskRequest:(requestId,reviewNotes,token)=>apiRequest(`/api/task-requests/${requestId}/approve`,'POST',{reviewNotes},token),rejectTaskRequest:(requestId,reviewNotes,token)=>apiRequest(`/api/task-requests/${requestId}/reject`,'POST',{reviewNotes},token)},// Assignment endpoints\nassignments,auditLogs:{getAuditLogs:token=>apiRequest('/audit-logs','GET',null,token),getAuditLogById:(logId,token)=>apiRequest(`/audit-logs/${logId}`,'GET',null,token)},// Department endpoints\ndepartments:{getAllDepartments:async token=>{try{// In a real implementation, this would call the API\n// const response = await axios.get(`${API_BASE_URL}/departments`, {\n//   headers: { Authorization: `Bearer ${token}` }\n// });\n// return response;\n// For now, return mock data\nreturn{data:[{id:\"dept-1\",name:\"IT Department\",description:\"Information Technology Department\",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:\"dept-2\",name:\"HR Department\",description:\"Human Resources Department\",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{id:\"dept-3\",name:\"Finance Department\",description:\"Finance and Accounting Department\",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}]};}catch(error){console.error('Error fetching departments:',error);throw error;}},getDepartmentById:async(departmentId,token)=>{try{// In a real implementation, this would call the API\n// const response = await axios.get(`${API_BASE_URL}/departments/${departmentId}`, {\n//   headers: { Authorization: `Bearer ${token}` }\n// });\n// return response;\n// For now, return mock data\nreturn{data:{id:departmentId,name:\"Mock Department\",description:\"This is a mock department\",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}};}catch(error){console.error('Error fetching department:',error);throw error;}},createDepartment:async(departmentData,token)=>{try{// In a real implementation, this would call the API\n// const response = await axios.post(`${API_BASE_URL}/departments`, departmentData, {\n//   headers: { Authorization: `Bearer ${token}` }\n// });\n// return response;\n// For now, return mock data\nreturn{data:{id:Date.now().toString(),...departmentData,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}};}catch(error){console.error('Error creating department:',error);throw error;}},updateDepartment:async(departmentId,departmentData,token)=>{try{// In a real implementation, this would call the API\n// const response = await axios.put(`${API_BASE_URL}/departments/${departmentId}`, departmentData, {\n//   headers: { Authorization: `Bearer ${token}` }\n// });\n// return response;\n// For now, return mock data\nreturn{data:{id:departmentId,...departmentData,updatedAt:new Date().toISOString()}};}catch(error){console.error('Error updating department:',error);throw error;}},deleteDepartment:async(departmentId,token)=>{try{// In a real implementation, this would call the API\n// const response = await axios.delete(`${API_BASE_URL}/departments/${departmentId}`, {\n//   headers: { Authorization: `Bearer ${token}` }\n// });\n// return response;\n// For now, return mock success\nreturn{data:{success:true,message:\"Department deleted successfully\"}};}catch(error){console.error('Error deleting department:',error);throw error;}}},// Change Request endpoints\nchangeRequests:{getChangeRequestsByProject:(projectId,token)=>apiRequest(`/api/projects/${projectId}/change-requests`,'GET',undefined,token),getChangeRequestById:(requestId,token)=>apiRequest(`/api/change-requests/${requestId}`,'GET',undefined,token),createChangeRequest:(requestData,token)=>apiRequest('/api/change-requests','POST',requestData,token),updateChangeRequestStatus:(requestId,status,reviewNotes,token)=>apiRequest(`/api/change-requests/${requestId}/status`,'PATCH',{status,reviewNotes},token),approveChangeRequest:(requestId,reviewNotes,token)=>apiRequest(`/api/change-requests/${requestId}/approve`,'POST',{reviewNotes},token),rejectChangeRequest:(requestId,reviewNotes,token)=>apiRequest(`/api/change-requests/${requestId}/reject`,'POST',{reviewNotes},token),getAllChangeRequests:token=>apiRequest('/api/change-requests','GET',undefined,token)}};export default apiRoutes;","map":{"version":3,"names":["axios","API_BASE_URL","FEATURES","LocalStorageService","v4","uuidv4","ProjectStatus","TaskStatus","UserRole","TaskPriority","RiskStatus","RiskImpact","IssueStatus","AssignmentStatus","MeetingStatus","ProjectPriority","ProjectTemplateType","mockProjects","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","delay","Promise","resolve","setTimeout","sleep","ms","simulateDelay","Math","random","mockITDepartment","id","name","description","createdAt","Date","toISOString","updatedAt","mockDepartments","testUsers","admin","username","firstName","lastName","email","role","ADMIN","department","isActive","manager1","MANAGER","manager2","developer","DEVELOPER","designer","DESIGNER","defaultProjectId","getDefaultProject","projectId","client","status","IN_PROGRESS","priority","MEDIUM","startDate","endDate","projectManager","progress","budget","actualCost","mockTasks","title","TODO","HIGH","dueDate","assignee","createdBy","isMilestone","project","apiRequest","endpoint","method","arguments","length","undefined","data","isFormData","USE_MOCK_DATA","url","options","body","JSON","stringify","response","fetch","ok","errorData","json","catch","Error","message","contentType","get","includes","text","console","log","getMockData","error","newId","newProject","addProject","success","split","newTask","addTask","addIndependentTask","newMeeting","meetingLink","SCHEDULED","organizer","participants","addMeeting","newRisk","addRisk","newIssue","addIssue","newDepartment","addDepartment","match","updatedProject","updateProject","parts","taskId","updatedTask","updateTask","updateIndependentTask","meetingId","updatedMeeting","updateMeeting","riskId","updatedRisk","updateRisk","issueId","updatedIssue","updateIssue","deleteProject","deleteTask","deleteIndependentTask","deleteMeeting","deleteRisk","deleteIssue","storedProjects","getProjects","saveProjects","getProject","storedTasks","getTasks","tasks","saveTasks","getIndependentTasks","storedMeetings","getMeetings","meetingsWithIsActive","defaultMeetings","map","meeting","saveMeetings","storedRisks","getRisks","defaultRisks","createDefaultRisks","saveRisks","storedIssues","getIssues","defaultIssues","createDefaultIssues","saveIssues","departments","getDepartments","startTime","now","endTime","IDENTIFIED","impact","probability","mitigation","owner","ASSESSED","OPEN","RESOLVED","CRITICAL","resolutionSummary","defaultProjects","templateType","DEFAULT","ON_HOLD","INFRASTRUCTURE","COMPLETED","WEBSITE","PLANNING","FINANCE","login","password","user","Object","values","find","u","defaultUsers","PROJECT_MANAGER","mockAssignments","assignedBy","assignedTo","PENDING","LOW","assignments","getAllAssignments","getAssignmentById","assignment","a","createAssignment","newAssignment","String","push","updateAssignment","index","findIndex","deleteAssignment","splice","apiRoutes","auth","adIdentifier","userId","departmentId","refreshToken","logout","users","getCurrentUser","getAllUsers","getUserById","createUser","userData","updateUser","deleteUser","assignRole","assignDepartment","getAllDepartments","projects","getAllProjects","parse","getProjectById","p","createProject","projectData","existingProjects","setItem","updatedData","projectIndex","cachedProjects","updatedProjects","filter","uploadAttachment","formData","getAttachments","deleteAttachment","attachmentId","approvalStatus","comments","reviewHistory","getAllTasks","getAllIndependentTasks","getTaskById","getIndependentTaskById","createTask","taskData","createIndependentTask","addComment","commentData","OFFLINE_MODE","allTasks","taskIndex","t","newComment","author","authorId","authorFirstName","authorLastName","post","risks","getAllRisks","getRiskById","createRisk","riskData","issues","getAllIssues","getIssueById","createIssue","issueData","taskRequests","createTaskRequest","requestData","getTaskRequestsByProject","getTaskRequestById","requestId","updateTaskRequestStatus","reviewNotes","approveTaskRequest","rejectTaskRequest","auditLogs","getAuditLogs","getAuditLogById","logId","getDepartmentById","createDepartment","departmentData","toString","updateDepartment","deleteDepartment","changeRequests","getChangeRequestsByProject","getChangeRequestById","createChangeRequest","updateChangeRequestStatus","approveChangeRequest","rejectChangeRequest","getAllChangeRequests"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL, FEATURES } from '../config';\nimport LocalStorageService from './LocalStorageService';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ProjectStatus, TaskStatus, UserRole, TaskPriority, RiskStatus, RiskImpact, IssueStatus, Project, Task, User, Department, Meeting, Risk, Issue, Assignment, AssignmentStatus, ApiResponse, MeetingStatus, ProjectPriority, ProjectTemplateType } from '../types';\nimport { \n  mockProjects, \n  mockUsers, \n  mockRisks, \n  mockMeetings, \n  mockIssues \n} from './mockData';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Helper function to simulate delay\nconst delay = () => new Promise(resolve => setTimeout(resolve, 500));\n\n// Helper to simulate network delay\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Standard delay duration\nconst simulateDelay = () => sleep(Math.random() * 300 + 200); // 200-500ms\n\n// Create a reusable mock IT department\nconst mockITDepartment: Department = {\n  id: '1',\n  name: 'IT',\n  description: 'Information Technology Department',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\n// Mock Departments\nconst mockDepartments: Department[] = [\n  {\n    id: '1',\n    name: 'Engineering',\n    description: 'Software Engineering Department',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    name: 'Design',\n    description: 'Product Design Department',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    name: 'Product',\n    description: 'Product Management Department',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\n// Test users with different roles\nconst testUsers = {\n  admin: {\n    id: 'user-1',\n    username: 'john.smith',\n    firstName: 'John',\n    lastName: 'Smith',\n    email: 'john.smith@themis.com',\n    role: UserRole.ADMIN,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager1: {\n    id: 'user-2',\n    username: 'sarah.johnson',\n    firstName: 'Sarah',\n    lastName: 'Johnson',\n    email: 'sarah.johnson@themis.com',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager2: {\n    id: 'user-3',\n    username: 'michael.chen',\n    firstName: 'Michael',\n    lastName: 'Chen',\n    email: 'michael.chen@themis.com',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  developer: {\n    id: 'user-4',\n    username: 'emma.davis',\n    firstName: 'Emma',\n    lastName: 'Davis',\n    email: 'emma.davis@themis.com',\n    role: UserRole.DEVELOPER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  designer: {\n    id: 'user-5',\n    username: 'david.wilson',\n    firstName: 'David',\n    lastName: 'Wilson',\n    email: 'david.wilson@themis.com',\n    role: UserRole.DESIGNER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n};\n\n// Define a default projectId\nconst defaultProjectId = 'default-project-id';\n\n// Add a default project reference for the task objects\nconst getDefaultProject = (projectId: string) => {\n  return {\n    id: projectId,\n    name: 'Sample Project',\n    description: 'A sample project for task testing',\n    client: 'Sample Client',\n    status: ProjectStatus.IN_PROGRESS,\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-01-01',\n    endDate: '2023-12-31',\n    projectManager: testUsers.admin,\n    department: mockDepartments[0],\n    progress: 50,\n    budget: 100000,\n    actualCost: 50000,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z'\n  };\n};\n\n// Update the mock tasks with the required 'project' property\nconst mockTasks: Task[] = [\n  {\n    id: '1',\n    projectId: defaultProjectId,\n    title: 'Requirements Analysis',\n    description: 'Analyze the requirements for the new system',\n    status: TaskStatus.TODO,\n    priority: TaskPriority.HIGH,\n    startDate: '2023-01-15',\n    dueDate: '2023-01-31',\n    assignee: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n    isMilestone: false,\n    project: getDefaultProject(defaultProjectId)\n  },\n  {\n    id: '2',\n    projectId: defaultProjectId,\n    title: 'Database Schema Design',\n    description: 'Design the database schema for the new system',\n    status: TaskStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    startDate: '2023-02-01',\n    dueDate: '2023-02-15',\n    assignee: testUsers.developer,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-15T00:00:00Z',\n    isMilestone: false,\n    project: getDefaultProject(defaultProjectId)\n  }\n];\n\n/**\n * Generic API request function with error handling\n */\nexport const apiRequest = async (\n  endpoint: string, \n  method: string = 'GET', \n  data?: any, \n  token?: string, \n  isFormData?: boolean\n): Promise<any> => {\n  const USE_MOCK_DATA = true; // Set to true for development without backend\n  \n  try {\n    // Set up the full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    // Set up options\n    const headers: HeadersInit = {}; \n    \n    // Set content type if not form data\n    if (!isFormData) {\n      headers['Content-Type'] = 'application/json';\n    }\n    \n    // Add auth token if provided\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    const options: RequestInit = {\n      method,\n      headers,\n    };\n    \n    // Add body to the request if needed\n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      options.body = isFormData ? data : JSON.stringify(data);\n    }\n    \n    // Make the request\n    if (!USE_MOCK_DATA) {\n      const response = await fetch(url, options);\n      \n      // Check if the request was successful\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error(errorData?.message || `Request failed with status ${response.status}`);\n      }\n      \n      // Check if the response is empty\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      \n      return await response.text();\n    } else {\n      // Return mock data (with persistence)\n      console.log(`Using mock data for endpoint: ${endpoint}, method: ${method}`);\n      return getMockData(endpoint, method, data);\n    }\n  } catch (error) {\n    console.error('API request failed:', error);\n    if (USE_MOCK_DATA) {\n      console.log(`Falling back to mock data for endpoint: ${endpoint}`);\n      return getMockData(endpoint, method, data);\n    }\n    throw error;\n  }\n};\n\n/**\n * Returns mock data for development based on the endpoint\n * Uses localStorage for persistence when available\n */\nconst getMockData = (endpoint: string, method: string = 'GET', data?: any): any => {\n  // Create a new resource (POST)\n  if (method === 'POST') {\n    // Handle creating a new project\n    if (endpoint === '/api/projects') {\n      // Generate a random ID for the new project\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new project with the provided data\n      const newProject = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n      };\n      \n      // Save to local storage\n      LocalStorageService.addProject(newProject);\n      \n      return {\n        data: newProject,\n        success: true\n      };\n    }\n    \n    // Handle creating a new task for a project\n    if (endpoint.includes('/api/projects/') && endpoint.includes('/tasks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/tasks')[0];\n      \n      // Generate a random ID for the new task\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new task with the provided data\n      const newTask = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n      };\n      \n      // Save to local storage\n      LocalStorageService.addTask(newTask);\n      \n      return {\n        data: newTask,\n        success: true\n      };\n    }\n    \n    // Handle creating a new independent task\n    if (endpoint === '/api/tasks/independent') {\n      // Generate a random ID for the new task\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new task with the provided data\n      const newTask = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n      };\n      \n      // Save to local storage\n      LocalStorageService.addIndependentTask(newTask);\n      \n      return {\n        data: newTask,\n        success: true\n      };\n    }\n    \n    // Handle creating a new meeting\n    if (endpoint === '/api/meetings') {\n      // Generate a random ID for the new meeting\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new meeting with the provided data\n      const newMeeting: Meeting = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n        meetingLink: data.meetingLink || `https://meet.example.com/${newId}`,\n        status: data.status || MeetingStatus.SCHEDULED,\n        isActive: data.isActive || false,\n        organizer: data.organizer || testUsers.admin,\n        participants: data.participants || []\n      };\n      \n      // Save to local storage\n      LocalStorageService.addMeeting(newMeeting);\n      \n      return {\n        data: newMeeting,\n        success: true\n      };\n    }\n\n    // Handle creating a new risk\n    if (endpoint.includes('/projects/') && endpoint.includes('/risks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/risks')[0];\n      \n      // Generate a random ID for the new risk\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new risk with the provided data\n      const newRisk = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n      \n      // Save to local storage\n      LocalStorageService.addRisk(newRisk);\n      \n      return {\n        data: newRisk,\n        success: true\n      };\n    }\n    \n    // Handle creating a new issue\n    if (endpoint.includes('/projects/') && endpoint.includes('/issues')) {\n      const projectId = endpoint.split('/projects/')[1].split('/issues')[0];\n      \n      // Generate a random ID for the new issue\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new issue with the provided data\n      const newIssue = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n      \n      // Save to local storage\n      LocalStorageService.addIssue(newIssue);\n      \n      return {\n        data: newIssue,\n        success: true\n      };\n    }\n\n    // Handle creating a new department\n    if (endpoint === '/api/departments') {\n      const newDepartment: Department = {\n        id: uuidv4(),\n        name: data.name,\n        description: data.description || `${data.name} Department`,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      // Save to local storage\n      LocalStorageService.addDepartment(newDepartment);\n      \n      return {\n        data: newDepartment,\n        success: true\n      };\n    }\n  }\n  \n  // Update an existing resource (PUT)\n  if (method === 'PUT') {\n    // Handle updating a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n      \n      // Update the project in local storage\n      const updatedProject = LocalStorageService.updateProject(projectId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedProject,\n        success: !!updatedProject\n      };\n    }\n    \n    // Handle updating a task for a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const taskId = parts[parts.length - 1];\n      \n      // Update the task in local storage\n      const updatedTask = LocalStorageService.updateTask(projectId, taskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedTask,\n        success: !!updatedTask\n      };\n    }\n    \n    // Handle updating an independent task\n    if (endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)) {\n      const taskId = endpoint.split('/independent/')[1];\n      \n      // Update the task in local storage\n      const updatedTask = LocalStorageService.updateIndependentTask(taskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedTask,\n        success: !!updatedTask\n      };\n    }\n    \n    // Handle updating a meeting\n    if (endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)) {\n      const meetingId = endpoint.split('/meetings/')[1];\n      \n      // Update the meeting in local storage\n      const updatedMeeting = LocalStorageService.updateMeeting(meetingId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedMeeting,\n        success: !!updatedMeeting\n      };\n    }\n\n    // Handle updating a risk\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const riskId = parts[parts.length - 1];\n      \n      // Update the risk in local storage\n      const updatedRisk = LocalStorageService.updateRisk(projectId, riskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedRisk,\n        success: !!updatedRisk\n      };\n    }\n    \n    // Handle updating an issue\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const issueId = parts[parts.length - 1];\n      \n      // Update the issue in local storage\n      const updatedIssue = LocalStorageService.updateIssue(projectId, issueId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedIssue,\n        success: !!updatedIssue\n      };\n    }\n  }\n  \n  // Delete a resource (DELETE)\n  if (method === 'DELETE') {\n    // Handle deleting a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n      \n      // Delete the project from local storage\n      LocalStorageService.deleteProject(projectId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting a task from a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const taskId = parts[parts.length - 1];\n      \n      // Delete the task from local storage\n      LocalStorageService.deleteTask(projectId, taskId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting an independent task\n    if (endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)) {\n      const taskId = endpoint.split('/independent/')[1];\n      \n      // Delete the task from local storage\n      LocalStorageService.deleteIndependentTask(taskId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting a meeting\n    if (endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)) {\n      const meetingId = endpoint.split('/meetings/')[1];\n      \n      // Delete the meeting from local storage\n      LocalStorageService.deleteMeeting(meetingId);\n      \n      return {\n        success: true\n      };\n    }\n\n    // Handle deleting a risk\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const riskId = parts[parts.length - 1];\n      \n      // Delete the risk from local storage\n      LocalStorageService.deleteRisk(projectId, riskId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting an issue\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const issueId = parts[parts.length - 1];\n      \n      // Delete the issue from local storage\n      LocalStorageService.deleteIssue(projectId, issueId);\n      \n      return {\n        success: true\n      };\n    }\n  }\n  \n  // GET requests for fetching data\n  if (method === 'GET') {\n    // Get all projects\n    if (endpoint === '/api/projects') {\n      // Get projects from local storage or use mock data if none\n      const storedProjects = LocalStorageService.getProjects();\n      \n      if (storedProjects.length > 0) {\n        return {\n          data: storedProjects,\n          success: true\n        };\n      }\n      \n      // Initialize localStorage with mockProjects from mockData.ts\n      LocalStorageService.saveProjects(mockProjects);\n      \n      return {\n        data: mockProjects,\n        success: true\n      };\n    }\n    \n    // Get a specific project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n      \n      // Get project from local storage\n      const project = LocalStorageService.getProject(projectId);\n      \n      if (project) {\n        return {\n          data: project,\n          success: true\n        };\n      }\n      \n      return {\n        success: false,\n        message: 'Project not found'\n      };\n    }\n    \n    // Get tasks for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/tasks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/tasks')[0];\n      \n      // Get tasks from local storage or use mock data if none\n      const storedTasks = LocalStorageService.getTasks(projectId);\n      \n      if (storedTasks.length > 0) {\n        return {\n          data: storedTasks,\n          success: true\n        };\n      }\n      \n      // Create default tasks for this project\n      const tasks = mockTasks;\n      \n      // Save default tasks to local storage\n      LocalStorageService.saveTasks(projectId, tasks);\n      \n      return {\n        data: tasks,\n        success: true\n      };\n    }\n    \n    // Get independent tasks\n    if (endpoint === '/api/tasks/independent') {\n      // Get tasks from local storage or use mock data if none\n      const storedTasks = LocalStorageService.getIndependentTasks();\n      \n      if (storedTasks.length > 0) {\n        return {\n          data: storedTasks,\n          success: true\n        };\n      }\n      \n      // Default empty response\n      return {\n        data: [],\n        success: true\n      };\n    }\n    \n    // Get all meetings\n    if (endpoint === '/api/meetings') {\n      // Get meetings from local storage or use mock data if none\n      const storedMeetings = LocalStorageService.getMeetings();\n      \n      if (storedMeetings.length > 0) {\n        return {\n          data: storedMeetings,\n          success: true\n        };\n      }\n      \n      // Add isActive field for LocalStorageService compatibility\n      const meetingsWithIsActive = defaultMeetings.map(meeting => ({\n        ...meeting,\n        isActive: meeting.status === MeetingStatus.IN_PROGRESS\n      }));\n      \n      // Save default meetings to local storage\n      LocalStorageService.saveMeetings(meetingsWithIsActive);\n      \n      return {\n        data: meetingsWithIsActive,\n        success: true\n      };\n    }\n    \n    // Get risks for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/risks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/risks')[0];\n      \n      // Get risks from local storage or use mock data if none\n      const storedRisks = LocalStorageService.getRisks(projectId);\n      \n      if (storedRisks.length > 0) {\n        return {\n          data: storedRisks,\n          success: true\n        };\n      }\n      \n      // Default mock risks\n      const defaultRisks = createDefaultRisks(projectId);\n      \n      // Save default risks to local storage\n      LocalStorageService.saveRisks(projectId, defaultRisks);\n      \n      return {\n        data: defaultRisks,\n        success: true\n      };\n    }\n    \n    // Get issues for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/issues')) {\n      const projectId = endpoint.split('/projects/')[1].split('/issues')[0];\n      \n      // Get issues from local storage or use mock data if none\n      const storedIssues = LocalStorageService.getIssues(projectId);\n      \n      if (storedIssues.length > 0) {\n        return {\n          data: storedIssues,\n          success: true\n        };\n      }\n      \n      // Default mock issues\n      const defaultIssues = createDefaultIssues(projectId);\n      \n      // Save default issues to local storage\n      LocalStorageService.saveIssues(projectId, defaultIssues);\n      \n      return {\n        data: defaultIssues,\n        success: true\n      };\n    }\n    \n    // Get departments\n    if (endpoint === '/api/departments') {\n      const departments = LocalStorageService.getDepartments();\n      \n      if (departments.length > 0) {\n        return {\n          data: departments,\n          success: true\n        };\n      }\n      \n      return {\n        data: [],\n        success: true\n      };\n    }\n  }\n  \n  // Default empty response for unhandled endpoints\n  return {\n    data: [],\n    success: true\n  };\n};\n\n// Default mock meetings\nconst defaultMeetings: Meeting[] = [\n  {\n    id: '1',\n    title: 'Sprint Planning',\n    description: 'Plan tasks for the next sprint',\n    startTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),\n    endTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(),\n    status: MeetingStatus.SCHEDULED,\n    isActive: false,\n    meetingLink: 'https://meet.example.com/sprint-planning',\n    organizer: testUsers.admin,\n    participants: [testUsers.manager1, testUsers.developer],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '2',\n    title: 'Project Status Review',\n    description: 'Review the current status of the Digital Transformation project',\n    startTime: new Date(Date.now() + 30 * 60 * 1000).toISOString(),\n    endTime: new Date(Date.now() + 90 * 60 * 1000).toISOString(),\n    status: MeetingStatus.SCHEDULED,\n    isActive: false,\n    meetingLink: 'https://meet.example.com/project-status',\n    organizer: testUsers.admin,\n    participants: [testUsers.manager1, testUsers.manager2],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n];\n\n// Default mock risks\nconst createDefaultRisks = (projectId: string) => [\n  {\n    id: '1',\n    projectId,\n    title: 'Data Migration Risk',\n    description: 'Risk of data loss during migration process',\n    status: RiskStatus.IDENTIFIED,\n    impact: RiskImpact.HIGH,\n    probability: 70,\n    mitigation: 'Create multiple backups before migration and perform test migrations on sample data',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-10T00:00:00Z',\n    updatedAt: '2023-01-10T00:00:00Z'\n  },\n  {\n    id: '2',\n    projectId,\n    title: 'Resource Availability Risk',\n    description: 'Risk of key team members being unavailable during critical project phases',\n    status: RiskStatus.ASSESSED,\n    impact: RiskImpact.MEDIUM,\n    probability: 50,\n    mitigation: 'Develop contingency plans and cross-train team members',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-15T00:00:00Z'\n  }\n];\n\n// Default mock issues\nconst createDefaultIssues = (projectId: string) => [\n  {\n    id: '1',\n    projectId,\n    title: 'Integration Failure with Legacy System',\n    description: 'The new system cannot properly integrate with the existing legacy system',\n    status: IssueStatus.OPEN,\n    impact: RiskImpact.HIGH,\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-02-10T00:00:00Z',\n    updatedAt: '2023-02-10T00:00:00Z'\n  },\n  {\n    id: '2',\n    projectId,\n    title: 'Performance Bottleneck in Module A',\n    description: 'Module A performance is not meeting expected throughput requirements',\n    status: IssueStatus.IN_PROGRESS,\n    impact: RiskImpact.MEDIUM,\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-02-15T00:00:00Z',\n    updatedAt: '2023-02-20T00:00:00Z'\n  },\n  {\n    id: '3',\n    projectId,\n    title: 'Security Vulnerability in Authentication',\n    description: 'Security audit identified a potential vulnerability in the authentication process',\n    status: IssueStatus.RESOLVED,\n    impact: RiskImpact.CRITICAL,\n    resolutionSummary: 'Implemented updated security protocols and fixed the vulnerability with patch 1.2.3',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-25T00:00:00Z',\n    updatedAt: '2023-02-05T00:00:00Z'\n  }\n];\n\n// Update the defaultProjects array with the required properties\nconst defaultProjects: Project[] = [\n  {\n    id: 'proj-1',\n    name: 'Digital Transformation',\n    description: 'Enterprise digital transformation project',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-01-15',\n    endDate: '2023-12-31',\n    status: ProjectStatus.IN_PROGRESS,\n    progress: 65,\n    budget: 500000,\n    actualCost: 325000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  },\n  {\n    id: 'proj-2',\n    name: 'Cloud Migration',\n    description: 'Migration of on-premises infrastructure to cloud',\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-02-01',\n    endDate: '2023-08-31',\n    status: ProjectStatus.ON_HOLD,\n    progress: 40,\n    budget: 300000,\n    actualCost: 120000,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-15T00:00:00Z',\n    templateType: ProjectTemplateType.INFRASTRUCTURE\n  },\n  {\n    id: 'proj-3',\n    name: 'E-commerce Platform Redesign',\n    description: 'Redesign and modernization of e-commerce platform',\n    priority: ProjectPriority.CRITICAL,\n    startDate: '2023-03-01',\n    endDate: '2023-07-15',\n    status: ProjectStatus.COMPLETED,\n    progress: 100,\n    budget: 450000,\n    actualCost: 435000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-02-15T00:00:00Z',\n    updatedAt: '2023-07-18T00:00:00Z',\n    templateType: ProjectTemplateType.WEBSITE\n  },\n  {\n    id: 'proj-4',\n    name: 'Mobile App Development',\n    description: 'Cross-platform mobile application for customer engagement',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-04-01',\n    endDate: '2023-10-31',\n    status: ProjectStatus.IN_PROGRESS,\n    progress: 55,\n    budget: 380000,\n    actualCost: 210000,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2023-03-15T00:00:00Z',\n    updatedAt: '2023-07-20T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  },\n  {\n    id: 'proj-5',\n    name: 'Security Infrastructure Enhancement',\n    description: 'Upgrade of security systems and implementation of advanced protection measures',\n    priority: ProjectPriority.CRITICAL,\n    startDate: '2023-01-15',\n    endDate: '2023-05-30',\n    status: ProjectStatus.COMPLETED,\n    progress: 100,\n    budget: 275000,\n    actualCost: 268000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-01-05T00:00:00Z',\n    updatedAt: '2023-06-02T00:00:00Z',\n    templateType: ProjectTemplateType.INFRASTRUCTURE\n  },\n  {\n    id: 'proj-6',\n    name: 'Data Center Relocation',\n    description: 'Physical relocation of data center to new facility',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-02-15',\n    endDate: '2023-09-15',\n    status: ProjectStatus.ON_HOLD,\n    progress: 35,\n    budget: 600000,\n    actualCost: 210000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-02-01T00:00:00Z',\n    updatedAt: '2023-06-30T00:00:00Z',\n    templateType: ProjectTemplateType.INFRASTRUCTURE\n  },\n  {\n    id: 'proj-7',\n    name: 'AI Chatbot Implementation',\n    description: 'Development and integration of AI-powered customer service chatbot',\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-04-15',\n    endDate: '2023-08-15',\n    status: ProjectStatus.IN_PROGRESS,\n    progress: 70,\n    budget: 225000,\n    actualCost: 157500,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2023-04-01T00:00:00Z',\n    updatedAt: '2023-07-15T00:00:00Z',\n    templateType: ProjectTemplateType.WEBSITE\n  },\n  {\n    id: 'proj-8',\n    name: 'CRM Integration',\n    description: 'Integration of new CRM system with existing applications',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-01-10',\n    endDate: '2023-04-10',\n    status: ProjectStatus.COMPLETED,\n    progress: 100,\n    budget: 180000,\n    actualCost: 172000,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2022-12-20T00:00:00Z',\n    updatedAt: '2023-04-12T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  },\n  {\n    id: 'proj-9',\n    name: 'Financial Reporting System',\n    description: 'Implementation of new financial reporting system',\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-05-01',\n    endDate: '2023-11-30',\n    status: ProjectStatus.PLANNING,\n    progress: 15,\n    budget: 320000,\n    actualCost: 48000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-04-15T00:00:00Z',\n    updatedAt: '2023-06-10T00:00:00Z',\n    templateType: ProjectTemplateType.FINANCE\n  }\n];\n\n// Helper function to simulate login\nexport const login = async (email: string, password: string) => {\n  // For testing purposes, we'll match the email and return the corresponding test user\n  const user = Object.values(testUsers).find(u => u.email === email);\n  \n  if (user) {\n    return {\n      success: true,\n      data: user,\n      message: 'Login successful'\n    };\n  }\n  \n  return {\n    success: false,\n    data: null,\n    message: 'Invalid credentials'\n  };\n};\n\nconst defaultUsers: User[] = [\n  {\n    id: '1',\n    username: 'john.doe',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@themis.com',\n    role: UserRole.PROJECT_MANAGER,\n    department: mockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    username: 'jane.smith',\n    firstName: 'Jane',\n    lastName: 'Smith',\n    email: 'jane.smith@themis.com',\n    role: UserRole.DEVELOPER,\n    department: mockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    username: 'mike.johnson',\n    firstName: 'Mike',\n    lastName: 'Johnson',\n    email: 'mike.johnson@themis.com',\n    role: UserRole.DESIGNER,\n    department: mockDepartments[1],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '4',\n    username: 'sarah.wilson',\n    firstName: 'Sarah',\n    lastName: 'Wilson',\n    email: 'sarah.wilson@themis.com',\n    role: UserRole.DEVELOPER,\n    department: mockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '5',\n    username: 'david.brown',\n    firstName: 'David',\n    lastName: 'Brown',\n    email: 'david.brown@themis.com',\n    role: UserRole.PROJECT_MANAGER,\n    department: mockDepartments[2],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\nconst mockAssignments: Assignment[] = [\n  {\n    id: '1',\n    title: 'Implement User Authentication',\n    description: 'Set up JWT authentication and user session management for the application. Include password reset functionality and email verification.',\n    status: AssignmentStatus.IN_PROGRESS,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[1],\n    dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    title: 'Design Landing Page Mockups',\n    description: 'Create high-fidelity mockups for the new landing page. Include mobile and desktop versions, with dark mode support.',\n    status: AssignmentStatus.PENDING,\n    priority: TaskPriority.MEDIUM,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[2],\n    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    title: 'API Performance Optimization',\n    description: 'Optimize database queries and implement caching for frequently accessed endpoints. Target 50% reduction in response times.',\n    status: AssignmentStatus.COMPLETED,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[3],\n    dueDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '4',\n    title: 'Write End-to-End Tests',\n    description: 'Implement comprehensive E2E tests using Cypress for critical user flows. Achieve minimum 80% coverage.',\n    status: AssignmentStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    assignedBy: defaultUsers[4],\n    assignedTo: defaultUsers[1],\n    dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '5',\n    title: 'Security Audit',\n    description: 'Conduct a comprehensive security audit of the application. Check for vulnerabilities, update dependencies, and implement security best practices.',\n    status: AssignmentStatus.PENDING,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[3],\n    dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '6',\n    title: 'Mobile Responsive Design',\n    description: 'Ensure all components are fully responsive on mobile devices. Fix any existing layout issues and implement mobile-specific optimizations.',\n    status: AssignmentStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    assignedBy: defaultUsers[4],\n    assignedTo: defaultUsers[2],\n    dueDate: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '7',\n    title: 'Documentation Update',\n    description: 'Update API documentation and add usage examples for all endpoints. Include authentication requirements and response formats.',\n    status: AssignmentStatus.COMPLETED,\n    priority: TaskPriority.LOW,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[1],\n    dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '8',\n    title: 'User Analytics Dashboard',\n    description: 'Create a new dashboard to display user engagement metrics. Include charts for daily active users, session duration, and feature usage.',\n    status: AssignmentStatus.PENDING,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[4],\n    assignedTo: defaultUsers[3],\n    dueDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\nconst assignments = {\n  getAllAssignments: async (token: string): Promise<ApiResponse<Assignment[]>> => {\n    await delay();\n    return {\n      success: true,\n      data: mockAssignments,\n    };\n  },\n  \n  getAssignmentById: async (id: string, token: string): Promise<ApiResponse<Assignment>> => {\n    await delay();\n    const assignment = mockAssignments.find(a => a.id === id);\n    return {\n      success: !!assignment,\n      data: assignment || mockAssignments[0],\n    };\n  },\n\n  createAssignment: async (data: Partial<Assignment>, token: string): Promise<ApiResponse<Assignment>> => {\n    await delay();\n    const newAssignment: Assignment = {\n      id: String(mockAssignments.length + 1),\n      ...data,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    } as Assignment;\n    mockAssignments.push(newAssignment);\n    return {\n      success: true,\n      data: newAssignment,\n    };\n  },\n\n  updateAssignment: async (id: string, data: Partial<Assignment>, token: string): Promise<ApiResponse<Assignment>> => {\n    await delay();\n    const index = mockAssignments.findIndex(a => a.id === id);\n    if (index === -1) {\n      return {\n        success: false,\n        error: 'Assignment not found',\n      };\n    }\n    mockAssignments[index] = {\n      ...mockAssignments[index],\n      ...data,\n      updatedAt: new Date().toISOString(),\n    };\n    return {\n      success: true,\n      data: mockAssignments[index],\n    };\n  },\n\n  deleteAssignment: async (id: string, token: string): Promise<ApiResponse<void>> => {\n    await delay();\n    const index = mockAssignments.findIndex(a => a.id === id);\n    if (index === -1) {\n      return {\n        success: false,\n        error: 'Assignment not found',\n      };\n    }\n    mockAssignments.splice(index, 1);\n    return {\n      success: true,\n    };\n  },\n};\n\n// Create a named API object to export instead of using anonymous default export\nconst apiRoutes = {\n  // Auth endpoints\n  auth: {\n    login: (adIdentifier: string) => {\n      // Mock implementation for testing without backend\n      console.log('Using mock login implementation');\n      return Promise.resolve({\n        userId: '1',\n        username: adIdentifier,\n        role: UserRole.ADMIN, // Defaulting to ADMIN for testing\n        departmentId: '1',\n        token: 'mock-token-' + Date.now(),\n        success: true,\n        message: 'Login successful'\n      });\n    },\n    \n    refreshToken: (refreshToken: string) => \n      apiRequest('/api/auth/refresh', 'POST', { refreshToken }),\n    \n    logout: (token: string) => \n      apiRequest('/api/auth/logout', 'POST', {}, token),\n  },\n\n  // User endpoints\n  users: {\n    getCurrentUser: (token: string) => \n      apiRequest('/api/users/me', 'GET', undefined, token),\n    \n    getAllUsers: async (token: string): Promise<ApiResponse<User[]>> => {\n      await delay();\n      return {\n        success: true,\n        data: defaultUsers,\n      };\n    },\n    \n    getUserById: (userId: string, token: string) => \n      apiRequest(`/api/users/${userId}`, 'GET', undefined, token),\n    \n    createUser: (userData: any, token: string) => \n      apiRequest('/api/users', 'POST', userData, token),\n    \n    updateUser: (userId: string, userData: any, token: string) => \n      apiRequest(`/api/users/${userId}`, 'PUT', userData, token),\n    \n    deleteUser: (userId: string, token: string) => \n      apiRequest(`/api/users/${userId}`, 'DELETE', undefined, token),\n    \n    assignRole: (userId: string, role: string, token: string) => \n      apiRequest(`/api/users/${userId}/role`, 'PUT', { role }, token),\n      \n    assignDepartment: (userId: string, departmentId: string, token: string) => \n      apiRequest(`/api/users/${userId}/department`, 'PUT', { departmentId }, token),\n      \n    getAllDepartments: (token: string) => \n      apiRequest('/api/users/departments', 'GET', undefined, token),\n  },\n\n  // Project endpoints\n  projects: {\n    getAllProjects: async (token: string) => {\n      await simulateDelay();\n      \n      // Get projects from localStorage or use default projects if none exist\n      const storedProjects = localStorage.getItem('themis_projects');\n      const projects = storedProjects ? JSON.parse(storedProjects) : defaultProjects;\n      \n      return {\n        data: projects,\n        success: true\n      };\n    },\n    \n    getProjectById: async (id: string, token: string) => {\n      await simulateDelay();\n      \n      // Get projects from localStorage or use default projects if none exist\n      const storedProjects = localStorage.getItem('themis_projects');\n      const projects = storedProjects ? JSON.parse(storedProjects) : defaultProjects;\n      \n      // Find project by ID\n      const project = projects.find((p: any) => p.id === id);\n      \n      if (!project) {\n        throw new Error('Project not found');\n      }\n      \n      return {\n        data: project,\n        success: true\n      };\n    },\n    \n    createProject: async (projectData: any, token: string) => {\n      try {\n        await simulateDelay(); // Simulate network delay\n        \n        // Generate a new project object with an ID\n        const newProject = {\n          ...projectData,\n          id: projectData.id || uuidv4(),\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n        \n        // Get existing projects from localStorage or initialize empty array\n        const existingProjects = JSON.parse(localStorage.getItem('themis_projects') || '[]');\n        \n        // Add new project to the list\n        localStorage.setItem('themis_projects', JSON.stringify([...existingProjects, newProject]));\n        \n        return {\n          data: newProject,\n          success: true\n        };\n      } catch (error) {\n        console.error('Error creating project:', error);\n        throw error;\n      }\n    },\n    \n    updateProject: async (projectId: string, updatedData: any, token: string) => {\n      try {\n        await simulateDelay(); // Simulate network delay\n        \n        // Get existing projects from localStorage or use default projects if none exist\n        const storedProjects = localStorage.getItem('themis_projects');\n        const projects = storedProjects ? JSON.parse(storedProjects) : defaultProjects;\n        \n        // Find the index of the project to update\n        const projectIndex = projects.findIndex((p: any) => p.id === projectId);\n        \n        if (projectIndex === -1) {\n          throw new Error('Project not found');\n        }\n        \n        // Update the project\n        const updatedProject = {\n          ...projects[projectIndex],\n          ...updatedData,\n          updatedAt: new Date().toISOString()\n        };\n        \n        projects[projectIndex] = updatedProject;\n        \n        // Save updated projects to localStorage\n        localStorage.setItem('themis_projects', JSON.stringify(projects));\n        \n        return {\n          data: updatedProject,\n          success: true\n        };\n      } catch (error) {\n        console.error('Error updating project:', error);\n        throw error;\n      }\n    },\n    \n    deleteProject: async (projectId: string, token: string): Promise<any> => {\n      await simulateDelay();\n      \n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n      \n      // Filter out the project to delete\n      const updatedProjects = projects.filter((p: any) => p.id !== projectId);\n      \n      if (projects.length === updatedProjects.length) {\n        throw new Error(`Project with ID ${projectId} not found`);\n      }\n      \n      // Update localStorage\n      localStorage.setItem('themis_projects', JSON.stringify(updatedProjects));\n      \n      return {\n        data: { message: 'Project deleted successfully' }\n      };\n    },\n      \n    uploadAttachment: (projectId: string, formData: FormData, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments`, 'POST', formData, token, true),\n      \n    getAttachments: (projectId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments`, 'GET', undefined, token),\n      \n    deleteAttachment: (projectId: string, attachmentId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments/${attachmentId}`, 'DELETE', undefined, token),\n\n    getProject: async (projectId: string, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/projects/${projectId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: projectId,\n            name: \"Mock Project\",\n            description: \"This is a mock project returned by the API\",\n            startDate: new Date().toISOString(),\n            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            status: \"IN_PROGRESS\",\n            priority: \"MEDIUM\",\n            budget: 100000,\n            progress: 50,\n            department: {\n              id: \"dept-1\",\n              name: \"IT Department\"\n            },\n            projectManager: {\n              id: \"user-1\",\n              firstName: \"John\",\n              lastName: \"Doe\"\n            },\n            approvalStatus: \"SUBMITTED\",\n            comments: \"This is a sample comment on the project\",\n            reviewHistory: [],\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching project:', error);\n        throw error;\n      }\n    },\n  },\n\n  // Task endpoints\n  tasks: {\n    getAllTasks: (projectId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks`, 'GET', undefined, token),\n    \n    getAllIndependentTasks: (token: string) => \n      apiRequest('/api/tasks/independent', 'GET', undefined, token),\n    \n    getTaskById: (projectId: string, taskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'GET', undefined, token),\n    \n    getIndependentTaskById: (taskId: string, token: string) => \n      apiRequest(`/api/tasks/independent/${taskId}`, 'GET', undefined, token),\n    \n    createTask: (projectId: string, taskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks`, 'POST', taskData, token),\n    \n    createIndependentTask: (taskData: any, token: string) => \n      apiRequest('/api/tasks/independent', 'POST', taskData, token),\n    \n    updateTask: (projectId: string, taskId: string, taskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'PUT', taskData, token),\n    \n    updateIndependentTask: (taskId: string, taskData: any, token: string) => \n      apiRequest(`/api/tasks/independent/${taskId}`, 'PUT', taskData, token),\n    \n    deleteTask: (projectId: string, taskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'DELETE', undefined, token),\n    \n    deleteIndependentTask: (taskId: string, token: string) => \n      apiRequest(`/api/tasks/independent/${taskId}`, 'DELETE', undefined, token),\n\n    // Add task comment\n    addComment: async (projectId: string, taskId: string, commentData: any, token: string) => {\n      if (FEATURES.OFFLINE_MODE) {\n        // In offline mode, simulate API response\n        await simulateDelay();\n        \n        // Get existing tasks from localStorage\n        const allTasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n        \n        // Find the specific task to add the comment to\n        const taskIndex = allTasks.findIndex((t: any) => t.id === taskId && t.projectId === projectId);\n        \n        if (taskIndex !== -1) {\n          // Create a new comment\n          const newComment = {\n            id: `comment-${Date.now()}`,\n            taskId,\n            text: commentData.text,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            author: {\n              id: commentData.authorId,\n              firstName: commentData.authorFirstName || 'User',\n              lastName: commentData.authorLastName || commentData.authorId,\n            }\n          };\n          \n          // Add comment to the task\n          if (!allTasks[taskIndex].comments) {\n            allTasks[taskIndex].comments = [];\n          }\n          \n          allTasks[taskIndex].comments.push(newComment);\n          \n          // Save back to localStorage\n          localStorage.setItem('tasks', JSON.stringify(allTasks));\n          \n          return {\n            success: true,\n            data: newComment,\n            message: 'Comment added successfully'\n          };\n        } else {\n          throw new Error('Task not found');\n        }\n      } else {\n        // In online mode, make actual API call\n        const response = await axios.post(\n          `${API_BASE_URL}/projects/${projectId}/tasks/${taskId}/comments`,\n          commentData,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          }\n        );\n        return response.data;\n      }\n    },\n  },\n\n  // Risk endpoints\n  risks: {\n    getAllRisks: (projectId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks`, 'GET', undefined, token),\n    \n    getRiskById: (projectId: string, riskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'GET', undefined, token),\n    \n    createRisk: (projectId: string, riskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks`, 'POST', riskData, token),\n    \n    updateRisk: (projectId: string, riskId: string, riskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'PUT', riskData, token),\n    \n    deleteRisk: (projectId: string, riskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'DELETE', undefined, token),\n  },\n\n  // Issue endpoints\n  issues: {\n    getAllIssues: (projectId: string, token: string) => \n      apiRequest(`/projects/${projectId}/issues`, 'GET', null, token),\n    getIssueById: (projectId: string, issueId: string, token: string) => \n      apiRequest(`/projects/${projectId}/issues/${issueId}`, 'GET', null, token),\n    createIssue: (projectId: string, issueData: Partial<Issue>, token: string) => \n      apiRequest(`/projects/${projectId}/issues`, 'POST', issueData, token),\n    updateIssue: (projectId: string, issueId: string, issueData: Partial<Issue>, token: string) => \n      apiRequest(`/projects/${projectId}/issues/${issueId}`, 'PUT', issueData, token),\n    deleteIssue: (projectId: string, issueId: string, token: string) => \n      apiRequest(`/projects/${projectId}/issues/${issueId}`, 'DELETE', null, token)\n  },\n\n  // Task Request endpoints\n  taskRequests: {\n    createTaskRequest: (requestData: any, token: string) =>\n      apiRequest('/api/task-requests', 'POST', requestData, token),\n      \n    getTaskRequestsByProject: (projectId: string, token: string) =>\n      apiRequest(`/api/task-requests?projectId=${projectId}`, 'GET', undefined, token),\n      \n    getTaskRequestById: (requestId: string, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}`, 'GET', undefined, token),\n      \n    updateTaskRequestStatus: (requestId: string, status: any, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}/status`, 'PATCH', { status, reviewNotes }, token),\n      \n    approveTaskRequest: (requestId: string, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}/approve`, 'POST', { reviewNotes }, token),\n      \n    rejectTaskRequest: (requestId: string, reviewNotes: string, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}/reject`, 'POST', { reviewNotes }, token)\n  },\n\n  // Assignment endpoints\n  assignments,\n\n  auditLogs: {\n    getAuditLogs: (token: string) => \n      apiRequest('/audit-logs', 'GET', null, token),\n    getAuditLogById: (logId: string, token: string) => \n      apiRequest(`/audit-logs/${logId}`, 'GET', null, token)\n  },\n\n  // Department endpoints\n  departments: {\n    getAllDepartments: async (token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/departments`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: [\n            {\n              id: \"dept-1\",\n              name: \"IT Department\",\n              description: \"Information Technology Department\",\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            },\n            {\n              id: \"dept-2\",\n              name: \"HR Department\",\n              description: \"Human Resources Department\",\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            },\n            {\n              id: \"dept-3\",\n              name: \"Finance Department\",\n              description: \"Finance and Accounting Department\",\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            }\n          ]\n        };\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n        throw error;\n      }\n    },\n    \n    getDepartmentById: async (departmentId: string, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/departments/${departmentId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: departmentId,\n            name: \"Mock Department\",\n            description: \"This is a mock department\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching department:', error);\n        throw error;\n      }\n    },\n    \n    createDepartment: async (departmentData: any, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.post(`${API_BASE_URL}/departments`, departmentData, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: Date.now().toString(),\n            ...departmentData,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error creating department:', error);\n        throw error;\n      }\n    },\n    \n    updateDepartment: async (departmentId: string, departmentData: any, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.put(`${API_BASE_URL}/departments/${departmentId}`, departmentData, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: departmentId,\n            ...departmentData,\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error updating department:', error);\n        throw error;\n      }\n    },\n    \n    deleteDepartment: async (departmentId: string, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.delete(`${API_BASE_URL}/departments/${departmentId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock success\n        return {\n          data: {\n            success: true,\n            message: \"Department deleted successfully\"\n          }\n        };\n      } catch (error) {\n        console.error('Error deleting department:', error);\n        throw error;\n      }\n    }\n  },\n  \n  // Change Request endpoints\n  changeRequests: {\n    getChangeRequestsByProject: (projectId: string, token: string) =>\n      apiRequest(`/api/projects/${projectId}/change-requests`, 'GET', undefined, token),\n      \n    getChangeRequestById: (requestId: string, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}`, 'GET', undefined, token),\n      \n    createChangeRequest: (requestData: any, token: string) =>\n      apiRequest('/api/change-requests', 'POST', requestData, token),\n      \n    updateChangeRequestStatus: (requestId: string, status: any, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}/status`, 'PATCH', { status, reviewNotes }, token),\n      \n    approveChangeRequest: (requestId: string, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}/approve`, 'POST', { reviewNotes }, token),\n      \n    rejectChangeRequest: (requestId: string, reviewNotes: string, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}/reject`, 'POST', { reviewNotes }, token),\n      \n    getAllChangeRequests: (token: string) =>\n      apiRequest('/api/change-requests', 'GET', undefined, token)\n  },\n};\n\nexport default apiRoutes;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,YAAY,CAAEC,QAAQ,KAAQ,WAAW,CAClD,MAAO,CAAAC,mBAAmB,KAAM,uBAAuB,CACvD,OAASC,EAAE,GAAI,CAAAC,MAAM,KAAQ,MAAM,CACnC,OAASC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,UAAU,CAAEC,UAAU,CAAEC,WAAW,CAAqEC,gBAAgB,CAAeC,aAAa,CAAEC,eAAe,CAAEC,mBAAmB,KAAQ,UAAU,CACxQ,OACEC,YAAY,KAKP,YAAY,CAEnB,KAAM,CAAAC,GAAG,CAAGlB,KAAK,CAACmB,MAAM,CAAC,CACvBC,OAAO,CAAEnB,YAAY,CACrBoB,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,EAAK,CACvC,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,CAAG,UAAUH,KAAK,EAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CAAC,CAEF;AACA,KAAM,CAAAK,KAAK,CAAGA,CAAA,GAAM,GAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAEpE;AACA,KAAM,CAAAE,KAAK,CAAIC,EAAU,EAAK,GAAI,CAAAJ,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAEG,EAAE,CAAC,CAAC,CAE7E;AACA,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAMF,KAAK,CAACG,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,GAAG,CAAC,CAAE;AAE9D;AACA,KAAM,CAAAC,gBAA4B,CAAG,CACnCC,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,IAAI,CACVC,WAAW,CAAE,mCAAmC,CAChDC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAED;AACA,KAAM,CAAAE,eAA6B,CAAG,CACpC,CACEP,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,aAAa,CACnBC,WAAW,CAAE,iCAAiC,CAC9CC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,QAAQ,CACdC,WAAW,CAAE,2BAA2B,CACxCC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,SAAS,CACfC,WAAW,CAAE,+BAA+B,CAC5CC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACF,CAED;AACA,KAAM,CAAAG,SAAS,CAAG,CAChBC,KAAK,CAAE,CACLT,EAAE,CAAE,QAAQ,CACZU,QAAQ,CAAE,YAAY,CACtBC,SAAS,CAAE,MAAM,CACjBC,QAAQ,CAAE,OAAO,CACjBC,KAAK,CAAE,uBAAuB,CAC9BC,IAAI,CAAE9C,QAAQ,CAAC+C,KAAK,CACpBC,UAAU,CAAEjB,gBAAgB,CAC5BkB,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACDa,QAAQ,CAAE,CACRlB,EAAE,CAAE,QAAQ,CACZU,QAAQ,CAAE,eAAe,CACzBC,SAAS,CAAE,OAAO,CAClBC,QAAQ,CAAE,SAAS,CACnBC,KAAK,CAAE,0BAA0B,CACjCC,IAAI,CAAE9C,QAAQ,CAACmD,OAAO,CACtBH,UAAU,CAAEjB,gBAAgB,CAC5BkB,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACDe,QAAQ,CAAE,CACRpB,EAAE,CAAE,QAAQ,CACZU,QAAQ,CAAE,cAAc,CACxBC,SAAS,CAAE,SAAS,CACpBC,QAAQ,CAAE,MAAM,CAChBC,KAAK,CAAE,yBAAyB,CAChCC,IAAI,CAAE9C,QAAQ,CAACmD,OAAO,CACtBH,UAAU,CAAEjB,gBAAgB,CAC5BkB,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACDgB,SAAS,CAAE,CACTrB,EAAE,CAAE,QAAQ,CACZU,QAAQ,CAAE,YAAY,CACtBC,SAAS,CAAE,MAAM,CACjBC,QAAQ,CAAE,OAAO,CACjBC,KAAK,CAAE,uBAAuB,CAC9BC,IAAI,CAAE9C,QAAQ,CAACsD,SAAS,CACxBN,UAAU,CAAEjB,gBAAgB,CAC5BkB,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACDkB,QAAQ,CAAE,CACRvB,EAAE,CAAE,QAAQ,CACZU,QAAQ,CAAE,cAAc,CACxBC,SAAS,CAAE,OAAO,CAClBC,QAAQ,CAAE,QAAQ,CAClBC,KAAK,CAAE,yBAAyB,CAChCC,IAAI,CAAE9C,QAAQ,CAACwD,QAAQ,CACvBR,UAAU,CAAEjB,gBAAgB,CAC5BkB,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CACF,CAAC,CAED;AACA,KAAM,CAAAoB,gBAAgB,CAAG,oBAAoB,CAE7C;AACA,KAAM,CAAAC,iBAAiB,CAAIC,SAAiB,EAAK,CAC/C,MAAO,CACL3B,EAAE,CAAE2B,SAAS,CACb1B,IAAI,CAAE,gBAAgB,CACtBC,WAAW,CAAE,mCAAmC,CAChD0B,MAAM,CAAE,eAAe,CACvBC,MAAM,CAAE/D,aAAa,CAACgE,WAAW,CACjCC,QAAQ,CAAExD,eAAe,CAACyD,MAAM,CAChCC,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBC,cAAc,CAAE3B,SAAS,CAACC,KAAK,CAC/BO,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B6B,QAAQ,CAAE,EAAE,CACZC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,KAAK,CACjBnC,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBACb,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAiC,SAAiB,CAAG,CACxB,CACEvC,EAAE,CAAE,GAAG,CACP2B,SAAS,CAAEF,gBAAgB,CAC3Be,KAAK,CAAE,uBAAuB,CAC9BtC,WAAW,CAAE,6CAA6C,CAC1D2B,MAAM,CAAE9D,UAAU,CAAC0E,IAAI,CACvBV,QAAQ,CAAE9D,YAAY,CAACyE,IAAI,CAC3BT,SAAS,CAAE,YAAY,CACvBU,OAAO,CAAE,YAAY,CACrBC,QAAQ,CAAEpC,SAAS,CAACC,KAAK,CACzBoC,SAAS,CAAErC,SAAS,CAACC,KAAK,CAC1BN,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjCwC,WAAW,CAAE,KAAK,CAClBC,OAAO,CAAErB,iBAAiB,CAACD,gBAAgB,CAC7C,CAAC,CACD,CACEzB,EAAE,CAAE,GAAG,CACP2B,SAAS,CAAEF,gBAAgB,CAC3Be,KAAK,CAAE,wBAAwB,CAC/BtC,WAAW,CAAE,+CAA+C,CAC5D2B,MAAM,CAAE9D,UAAU,CAAC+D,WAAW,CAC9BC,QAAQ,CAAE9D,YAAY,CAAC+D,MAAM,CAC7BC,SAAS,CAAE,YAAY,CACvBU,OAAO,CAAE,YAAY,CACrBC,QAAQ,CAAEpC,SAAS,CAACa,SAAS,CAC7BwB,SAAS,CAAErC,SAAS,CAACC,KAAK,CAC1BN,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjCwC,WAAW,CAAE,KAAK,CAClBC,OAAO,CAAErB,iBAAiB,CAACD,gBAAgB,CAC7C,CAAC,CACF,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAuB,UAAU,CAAG,cAAAA,CACxBC,QAAgB,CAKC,IAJjB,CAAAC,MAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,IACtB,CAAAG,IAAU,CAAAH,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,IACV,CAAAnE,KAAc,CAAAiE,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,IACd,CAAAE,UAAoB,CAAAJ,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CAEpB,KAAM,CAAAG,aAAa,CAAG,IAAI,CAAE;AAE5B,GAAI,CACF;AACA,KAAM,CAAAC,GAAG,CAAG,GAAGhG,YAAY,GAAGwF,QAAQ,EAAE,CAExC;AACA,KAAM,CAAApE,OAAoB,CAAG,CAAC,CAAC,CAE/B;AACA,GAAI,CAAC0E,UAAU,CAAE,CACf1E,OAAO,CAAC,cAAc,CAAC,CAAG,kBAAkB,CAC9C,CAEA;AACA,GAAIK,KAAK,CAAE,CACTL,OAAO,CAAC,eAAe,CAAC,CAAG,UAAUK,KAAK,EAAE,CAC9C,CAEA,KAAM,CAAAwE,OAAoB,CAAG,CAC3BR,MAAM,CACNrE,OACF,CAAC,CAED;AACA,GAAIyE,IAAI,GAAKJ,MAAM,GAAK,MAAM,EAAIA,MAAM,GAAK,KAAK,EAAIA,MAAM,GAAK,OAAO,CAAC,CAAE,CACzEQ,OAAO,CAACC,IAAI,CAAGJ,UAAU,CAAGD,IAAI,CAAGM,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CACzD,CAEA;AACA,GAAI,CAACE,aAAa,CAAE,CAClB,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACN,GAAG,CAAEC,OAAO,CAAC,CAE1C;AACA,GAAI,CAACI,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAM,IAAI,CAAC,CACzD,KAAM,IAAI,CAAAC,KAAK,CAAC,CAAAH,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAEI,OAAO,GAAI,8BAA8BP,QAAQ,CAACjC,MAAM,EAAE,CAAC,CACxF,CAEA;AACA,KAAM,CAAAyC,WAAW,CAAGR,QAAQ,CAACjF,OAAO,CAAC0F,GAAG,CAAC,cAAc,CAAC,CACxD,GAAID,WAAW,EAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,CAAE,CAC3D,MAAO,MAAM,CAAAV,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC9B,CAEA,MAAO,MAAM,CAAAJ,QAAQ,CAACW,IAAI,CAAC,CAAC,CAC9B,CAAC,IAAM,CACL;AACAC,OAAO,CAACC,GAAG,CAAC,iCAAiC1B,QAAQ,aAAaC,MAAM,EAAE,CAAC,CAC3E,MAAO,CAAA0B,WAAW,CAAC3B,QAAQ,CAAEC,MAAM,CAAEI,IAAI,CAAC,CAC5C,CACF,CAAE,MAAOuB,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,GAAIrB,aAAa,CAAE,CACjBkB,OAAO,CAACC,GAAG,CAAC,2CAA2C1B,QAAQ,EAAE,CAAC,CAClE,MAAO,CAAA2B,WAAW,CAAC3B,QAAQ,CAAEC,MAAM,CAAEI,IAAI,CAAC,CAC5C,CACA,KAAM,CAAAuB,KAAK,CACb,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,KAAM,CAAAD,WAAW,CAAG,QAAAA,CAAC3B,QAAgB,CAA8C,IAA5C,CAAAC,MAAc,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,IAAE,CAAAG,IAAU,CAAAH,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CACvE;AACA,GAAIH,MAAM,GAAK,MAAM,CAAE,CACrB;AACA,GAAID,QAAQ,GAAK,eAAe,CAAE,CAChC;AACA,KAAM,CAAA6B,KAAK,CAAGjH,MAAM,CAAC,CAAC,CACtB,KAAM,CAAAsC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAE1C;AACA,KAAM,CAAA0E,UAAU,CAAG,CACjB/E,EAAE,CAAE8E,KAAK,CACT,GAAGxB,IAAI,CACPnD,SAAS,CACTG,SAAS,CAAEH,SACb,CAAC,CAED;AACAxC,mBAAmB,CAACqH,UAAU,CAACD,UAAU,CAAC,CAE1C,MAAO,CACLzB,IAAI,CAAEyB,UAAU,CAChBE,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACuB,QAAQ,CAAC,gBAAgB,CAAC,EAAIvB,QAAQ,CAACuB,QAAQ,CAAC,QAAQ,CAAC,CAAE,CACtE,KAAM,CAAA7C,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEpE;AACA,KAAM,CAAAJ,KAAK,CAAGjH,MAAM,CAAC,CAAC,CACtB,KAAM,CAAAsC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAE1C;AACA,KAAM,CAAA8E,OAAO,CAAG,CACdnF,EAAE,CAAE8E,KAAK,CACTnD,SAAS,CACT,GAAG2B,IAAI,CACPnD,SAAS,CACTG,SAAS,CAAEH,SACb,CAAC,CAED;AACAxC,mBAAmB,CAACyH,OAAO,CAACD,OAAO,CAAC,CAEpC,MAAO,CACL7B,IAAI,CAAE6B,OAAO,CACbF,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,GAAK,wBAAwB,CAAE,CACzC;AACA,KAAM,CAAA6B,KAAK,CAAGjH,MAAM,CAAC,CAAC,CACtB,KAAM,CAAAsC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAE1C;AACA,KAAM,CAAA8E,OAAO,CAAG,CACdnF,EAAE,CAAE8E,KAAK,CACT,GAAGxB,IAAI,CACPnD,SAAS,CACTG,SAAS,CAAEH,SACb,CAAC,CAED;AACAxC,mBAAmB,CAAC0H,kBAAkB,CAACF,OAAO,CAAC,CAE/C,MAAO,CACL7B,IAAI,CAAE6B,OAAO,CACbF,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,GAAK,eAAe,CAAE,CAChC;AACA,KAAM,CAAA6B,KAAK,CAAGjH,MAAM,CAAC,CAAC,CACtB,KAAM,CAAAsC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAiF,UAAmB,CAAG,CAC1BtF,EAAE,CAAE8E,KAAK,CACT,GAAGxB,IAAI,CACPnD,SAAS,CACTG,SAAS,CAAEH,SAAS,CACpBoF,WAAW,CAAEjC,IAAI,CAACiC,WAAW,EAAI,4BAA4BT,KAAK,EAAE,CACpEjD,MAAM,CAAEyB,IAAI,CAACzB,MAAM,EAAIvD,aAAa,CAACkH,SAAS,CAC9CvE,QAAQ,CAAEqC,IAAI,CAACrC,QAAQ,EAAI,KAAK,CAChCwE,SAAS,CAAEnC,IAAI,CAACmC,SAAS,EAAIjF,SAAS,CAACC,KAAK,CAC5CiF,YAAY,CAAEpC,IAAI,CAACoC,YAAY,EAAI,EACrC,CAAC,CAED;AACA/H,mBAAmB,CAACgI,UAAU,CAACL,UAAU,CAAC,CAE1C,MAAO,CACLhC,IAAI,CAAEgC,UAAU,CAChBL,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACuB,QAAQ,CAAC,YAAY,CAAC,EAAIvB,QAAQ,CAACuB,QAAQ,CAAC,QAAQ,CAAC,CAAE,CAClE,KAAM,CAAA7C,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEpE;AACA,KAAM,CAAAJ,KAAK,CAAGjH,MAAM,CAAC,CAAC,CACtB,KAAM,CAAAsC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAuF,OAAO,CAAG,CACd5F,EAAE,CAAE8E,KAAK,CACTnD,SAAS,CACT,GAAG2B,IAAI,CACPnD,SAAS,CACTG,SAAS,CAAEH,SACb,CAAC,CAED;AACAxC,mBAAmB,CAACkI,OAAO,CAACD,OAAO,CAAC,CAEpC,MAAO,CACLtC,IAAI,CAAEsC,OAAO,CACbX,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACuB,QAAQ,CAAC,YAAY,CAAC,EAAIvB,QAAQ,CAACuB,QAAQ,CAAC,SAAS,CAAC,CAAE,CACnE,KAAM,CAAA7C,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAErE;AACA,KAAM,CAAAJ,KAAK,CAAGjH,MAAM,CAAC,CAAC,CACtB,KAAM,CAAAsC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAyF,QAAQ,CAAG,CACf9F,EAAE,CAAE8E,KAAK,CACTnD,SAAS,CACT,GAAG2B,IAAI,CACPnD,SAAS,CACTG,SAAS,CAAEH,SACb,CAAC,CAED;AACAxC,mBAAmB,CAACoI,QAAQ,CAACD,QAAQ,CAAC,CAEtC,MAAO,CACLxC,IAAI,CAAEwC,QAAQ,CACdb,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,GAAK,kBAAkB,CAAE,CACnC,KAAM,CAAA+C,aAAyB,CAAG,CAChChG,EAAE,CAAEnC,MAAM,CAAC,CAAC,CACZoC,IAAI,CAAEqD,IAAI,CAACrD,IAAI,CACfC,WAAW,CAAEoD,IAAI,CAACpD,WAAW,EAAI,GAAGoD,IAAI,CAACrD,IAAI,aAAa,CAC1DE,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAED;AACA1C,mBAAmB,CAACsI,aAAa,CAACD,aAAa,CAAC,CAEhD,MAAO,CACL1C,IAAI,CAAE0C,aAAa,CACnBf,OAAO,CAAE,IACX,CAAC,CACH,CACF,CAEA;AACA,GAAI/B,MAAM,GAAK,KAAK,CAAE,CACpB;AACA,GAAID,QAAQ,CAACiD,KAAK,CAAC,0BAA0B,CAAC,CAAE,CAC9C,KAAM,CAAAvE,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAEjD;AACA,KAAM,CAAAiB,cAAc,CAAGxI,mBAAmB,CAACyI,aAAa,CAACzE,SAAS,CAAE,CAClE,GAAG2B,IAAI,CACPhD,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CAEF,MAAO,CACLiD,IAAI,CAAE6C,cAAc,CACpBlB,OAAO,CAAE,CAAC,CAACkB,cACb,CAAC,CACH,CAEA;AACA,GAAIlD,QAAQ,CAACiD,KAAK,CAAC,yCAAyC,CAAC,CAAE,CAC7D,KAAM,CAAAG,KAAK,CAAGpD,QAAQ,CAACiC,KAAK,CAAC,GAAG,CAAC,CACjC,KAAM,CAAAvD,SAAS,CAAG0E,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CACzC,KAAM,CAAAkD,MAAM,CAAGD,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CAEtC;AACA,KAAM,CAAAmD,WAAW,CAAG5I,mBAAmB,CAAC6I,UAAU,CAAC7E,SAAS,CAAE2E,MAAM,CAAE,CACpE,GAAGhD,IAAI,CACPhD,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CAEF,MAAO,CACLiD,IAAI,CAAEiD,WAAW,CACjBtB,OAAO,CAAE,CAAC,CAACsB,WACb,CAAC,CACH,CAEA;AACA,GAAItD,QAAQ,CAACiD,KAAK,CAAC,oCAAoC,CAAC,CAAE,CACxD,KAAM,CAAAI,MAAM,CAAGrD,QAAQ,CAACiC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAEjD;AACA,KAAM,CAAAqB,WAAW,CAAG5I,mBAAmB,CAAC8I,qBAAqB,CAACH,MAAM,CAAE,CACpE,GAAGhD,IAAI,CACPhD,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CAEF,MAAO,CACLiD,IAAI,CAAEiD,WAAW,CACjBtB,OAAO,CAAE,CAAC,CAACsB,WACb,CAAC,CACH,CAEA;AACA,GAAItD,QAAQ,CAACiD,KAAK,CAAC,0BAA0B,CAAC,CAAE,CAC9C,KAAM,CAAAQ,SAAS,CAAGzD,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAEjD;AACA,KAAM,CAAAyB,cAAc,CAAGhJ,mBAAmB,CAACiJ,aAAa,CAACF,SAAS,CAAE,CAClE,GAAGpD,IAAI,CACPhD,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CAEF,MAAO,CACLiD,IAAI,CAAEqD,cAAc,CACpB1B,OAAO,CAAE,CAAC,CAAC0B,cACb,CAAC,CACH,CAEA;AACA,GAAI1D,QAAQ,CAACiD,KAAK,CAAC,yCAAyC,CAAC,CAAE,CAC7D,KAAM,CAAAG,KAAK,CAAGpD,QAAQ,CAACiC,KAAK,CAAC,GAAG,CAAC,CACjC,KAAM,CAAAvD,SAAS,CAAG0E,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CACzC,KAAM,CAAAyD,MAAM,CAAGR,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CAEtC;AACA,KAAM,CAAA0D,WAAW,CAAGnJ,mBAAmB,CAACoJ,UAAU,CAACpF,SAAS,CAAEkF,MAAM,CAAE,CACpE,GAAGvD,IAAI,CACPhD,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CAEF,MAAO,CACLiD,IAAI,CAAEwD,WAAW,CACjB7B,OAAO,CAAE,CAAC,CAAC6B,WACb,CAAC,CACH,CAEA;AACA,GAAI7D,QAAQ,CAACiD,KAAK,CAAC,0CAA0C,CAAC,CAAE,CAC9D,KAAM,CAAAG,KAAK,CAAGpD,QAAQ,CAACiC,KAAK,CAAC,GAAG,CAAC,CACjC,KAAM,CAAAvD,SAAS,CAAG0E,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CACzC,KAAM,CAAA4D,OAAO,CAAGX,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CAEvC;AACA,KAAM,CAAA6D,YAAY,CAAGtJ,mBAAmB,CAACuJ,WAAW,CAACvF,SAAS,CAAEqF,OAAO,CAAE,CACvE,GAAG1D,IAAI,CACPhD,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAAC,CAEF,MAAO,CACLiD,IAAI,CAAE2D,YAAY,CAClBhC,OAAO,CAAE,CAAC,CAACgC,YACb,CAAC,CACH,CACF,CAEA;AACA,GAAI/D,MAAM,GAAK,QAAQ,CAAE,CACvB;AACA,GAAID,QAAQ,CAACiD,KAAK,CAAC,0BAA0B,CAAC,CAAE,CAC9C,KAAM,CAAAvE,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAEjD;AACAvH,mBAAmB,CAACwJ,aAAa,CAACxF,SAAS,CAAC,CAE5C,MAAO,CACLsD,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACiD,KAAK,CAAC,yCAAyC,CAAC,CAAE,CAC7D,KAAM,CAAAG,KAAK,CAAGpD,QAAQ,CAACiC,KAAK,CAAC,GAAG,CAAC,CACjC,KAAM,CAAAvD,SAAS,CAAG0E,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CACzC,KAAM,CAAAkD,MAAM,CAAGD,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CAEtC;AACAzF,mBAAmB,CAACyJ,UAAU,CAACzF,SAAS,CAAE2E,MAAM,CAAC,CAEjD,MAAO,CACLrB,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACiD,KAAK,CAAC,oCAAoC,CAAC,CAAE,CACxD,KAAM,CAAAI,MAAM,CAAGrD,QAAQ,CAACiC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAEjD;AACAvH,mBAAmB,CAAC0J,qBAAqB,CAACf,MAAM,CAAC,CAEjD,MAAO,CACLrB,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACiD,KAAK,CAAC,0BAA0B,CAAC,CAAE,CAC9C,KAAM,CAAAQ,SAAS,CAAGzD,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAEjD;AACAvH,mBAAmB,CAAC2J,aAAa,CAACZ,SAAS,CAAC,CAE5C,MAAO,CACLzB,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACiD,KAAK,CAAC,yCAAyC,CAAC,CAAE,CAC7D,KAAM,CAAAG,KAAK,CAAGpD,QAAQ,CAACiC,KAAK,CAAC,GAAG,CAAC,CACjC,KAAM,CAAAvD,SAAS,CAAG0E,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CACzC,KAAM,CAAAyD,MAAM,CAAGR,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CAEtC;AACAzF,mBAAmB,CAAC4J,UAAU,CAAC5F,SAAS,CAAEkF,MAAM,CAAC,CAEjD,MAAO,CACL5B,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACiD,KAAK,CAAC,0CAA0C,CAAC,CAAE,CAC9D,KAAM,CAAAG,KAAK,CAAGpD,QAAQ,CAACiC,KAAK,CAAC,GAAG,CAAC,CACjC,KAAM,CAAAvD,SAAS,CAAG0E,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CACzC,KAAM,CAAA4D,OAAO,CAAGX,KAAK,CAACA,KAAK,CAACjD,MAAM,CAAG,CAAC,CAAC,CAEvC;AACAzF,mBAAmB,CAAC6J,WAAW,CAAC7F,SAAS,CAAEqF,OAAO,CAAC,CAEnD,MAAO,CACL/B,OAAO,CAAE,IACX,CAAC,CACH,CACF,CAEA;AACA,GAAI/B,MAAM,GAAK,KAAK,CAAE,CACpB;AACA,GAAID,QAAQ,GAAK,eAAe,CAAE,CAChC;AACA,KAAM,CAAAwE,cAAc,CAAG9J,mBAAmB,CAAC+J,WAAW,CAAC,CAAC,CAExD,GAAID,cAAc,CAACrE,MAAM,CAAG,CAAC,CAAE,CAC7B,MAAO,CACLE,IAAI,CAAEmE,cAAc,CACpBxC,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACAtH,mBAAmB,CAACgK,YAAY,CAAClJ,YAAY,CAAC,CAE9C,MAAO,CACL6E,IAAI,CAAE7E,YAAY,CAClBwG,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACiD,KAAK,CAAC,0BAA0B,CAAC,CAAE,CAC9C,KAAM,CAAAvE,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAEjD;AACA,KAAM,CAAAnC,OAAO,CAAGpF,mBAAmB,CAACiK,UAAU,CAACjG,SAAS,CAAC,CAEzD,GAAIoB,OAAO,CAAE,CACX,MAAO,CACLO,IAAI,CAAEP,OAAO,CACbkC,OAAO,CAAE,IACX,CAAC,CACH,CAEA,MAAO,CACLA,OAAO,CAAE,KAAK,CACdZ,OAAO,CAAE,mBACX,CAAC,CACH,CAEA;AACA,GAAIpB,QAAQ,CAACuB,QAAQ,CAAC,YAAY,CAAC,EAAIvB,QAAQ,CAACuB,QAAQ,CAAC,QAAQ,CAAC,CAAE,CAClE,KAAM,CAAA7C,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEpE;AACA,KAAM,CAAA2C,WAAW,CAAGlK,mBAAmB,CAACmK,QAAQ,CAACnG,SAAS,CAAC,CAE3D,GAAIkG,WAAW,CAACzE,MAAM,CAAG,CAAC,CAAE,CAC1B,MAAO,CACLE,IAAI,CAAEuE,WAAW,CACjB5C,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,KAAM,CAAA8C,KAAK,CAAGxF,SAAS,CAEvB;AACA5E,mBAAmB,CAACqK,SAAS,CAACrG,SAAS,CAAEoG,KAAK,CAAC,CAE/C,MAAO,CACLzE,IAAI,CAAEyE,KAAK,CACX9C,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,GAAK,wBAAwB,CAAE,CACzC;AACA,KAAM,CAAA4E,WAAW,CAAGlK,mBAAmB,CAACsK,mBAAmB,CAAC,CAAC,CAE7D,GAAIJ,WAAW,CAACzE,MAAM,CAAG,CAAC,CAAE,CAC1B,MAAO,CACLE,IAAI,CAAEuE,WAAW,CACjB5C,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,MAAO,CACL3B,IAAI,CAAE,EAAE,CACR2B,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,GAAK,eAAe,CAAE,CAChC;AACA,KAAM,CAAAiF,cAAc,CAAGvK,mBAAmB,CAACwK,WAAW,CAAC,CAAC,CAExD,GAAID,cAAc,CAAC9E,MAAM,CAAG,CAAC,CAAE,CAC7B,MAAO,CACLE,IAAI,CAAE4E,cAAc,CACpBjD,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,KAAM,CAAAmD,oBAAoB,CAAGC,eAAe,CAACC,GAAG,CAACC,OAAO,GAAK,CAC3D,GAAGA,OAAO,CACVtH,QAAQ,CAAEsH,OAAO,CAAC1G,MAAM,GAAKvD,aAAa,CAACwD,WAC7C,CAAC,CAAC,CAAC,CAEH;AACAnE,mBAAmB,CAAC6K,YAAY,CAACJ,oBAAoB,CAAC,CAEtD,MAAO,CACL9E,IAAI,CAAE8E,oBAAoB,CAC1BnD,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACuB,QAAQ,CAAC,YAAY,CAAC,EAAIvB,QAAQ,CAACuB,QAAQ,CAAC,QAAQ,CAAC,CAAE,CAClE,KAAM,CAAA7C,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAEpE;AACA,KAAM,CAAAuD,WAAW,CAAG9K,mBAAmB,CAAC+K,QAAQ,CAAC/G,SAAS,CAAC,CAE3D,GAAI8G,WAAW,CAACrF,MAAM,CAAG,CAAC,CAAE,CAC1B,MAAO,CACLE,IAAI,CAAEmF,WAAW,CACjBxD,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,KAAM,CAAA0D,YAAY,CAAGC,kBAAkB,CAACjH,SAAS,CAAC,CAElD;AACAhE,mBAAmB,CAACkL,SAAS,CAAClH,SAAS,CAAEgH,YAAY,CAAC,CAEtD,MAAO,CACLrF,IAAI,CAAEqF,YAAY,CAClB1D,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,CAACuB,QAAQ,CAAC,YAAY,CAAC,EAAIvB,QAAQ,CAACuB,QAAQ,CAAC,SAAS,CAAC,CAAE,CACnE,KAAM,CAAA7C,SAAS,CAAGsB,QAAQ,CAACiC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAErE;AACA,KAAM,CAAA4D,YAAY,CAAGnL,mBAAmB,CAACoL,SAAS,CAACpH,SAAS,CAAC,CAE7D,GAAImH,YAAY,CAAC1F,MAAM,CAAG,CAAC,CAAE,CAC3B,MAAO,CACLE,IAAI,CAAEwF,YAAY,CAClB7D,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,KAAM,CAAA+D,aAAa,CAAGC,mBAAmB,CAACtH,SAAS,CAAC,CAEpD;AACAhE,mBAAmB,CAACuL,UAAU,CAACvH,SAAS,CAAEqH,aAAa,CAAC,CAExD,MAAO,CACL1F,IAAI,CAAE0F,aAAa,CACnB/D,OAAO,CAAE,IACX,CAAC,CACH,CAEA;AACA,GAAIhC,QAAQ,GAAK,kBAAkB,CAAE,CACnC,KAAM,CAAAkG,WAAW,CAAGxL,mBAAmB,CAACyL,cAAc,CAAC,CAAC,CAExD,GAAID,WAAW,CAAC/F,MAAM,CAAG,CAAC,CAAE,CAC1B,MAAO,CACLE,IAAI,CAAE6F,WAAW,CACjBlE,OAAO,CAAE,IACX,CAAC,CACH,CAEA,MAAO,CACL3B,IAAI,CAAE,EAAE,CACR2B,OAAO,CAAE,IACX,CAAC,CACH,CACF,CAEA;AACA,MAAO,CACL3B,IAAI,CAAE,EAAE,CACR2B,OAAO,CAAE,IACX,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAoD,eAA0B,CAAG,CACjC,CACErI,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,iBAAiB,CACxBtC,WAAW,CAAE,gCAAgC,CAC7CmJ,SAAS,CAAE,GAAI,CAAAjJ,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACvEkJ,OAAO,CAAE,GAAI,CAAAnJ,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACtFwB,MAAM,CAAEvD,aAAa,CAACkH,SAAS,CAC/BvE,QAAQ,CAAE,KAAK,CACfsE,WAAW,CAAE,0CAA0C,CACvDE,SAAS,CAAEjF,SAAS,CAACC,KAAK,CAC1BiF,YAAY,CAAE,CAAClF,SAAS,CAACU,QAAQ,CAAEV,SAAS,CAACa,SAAS,CAAC,CACvDlB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,uBAAuB,CAC9BtC,WAAW,CAAE,iEAAiE,CAC9EmJ,SAAS,CAAE,GAAI,CAAAjJ,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CAC9DkJ,OAAO,CAAE,GAAI,CAAAnJ,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CAC5DwB,MAAM,CAAEvD,aAAa,CAACkH,SAAS,CAC/BvE,QAAQ,CAAE,KAAK,CACfsE,WAAW,CAAE,yCAAyC,CACtDE,SAAS,CAAEjF,SAAS,CAACC,KAAK,CAC1BiF,YAAY,CAAE,CAAClF,SAAS,CAACU,QAAQ,CAAEV,SAAS,CAACY,QAAQ,CAAC,CACtDjB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACF,CAED;AACA,KAAM,CAAAuI,kBAAkB,CAAIjH,SAAiB,EAAK,CAChD,CACE3B,EAAE,CAAE,GAAG,CACP2B,SAAS,CACTa,KAAK,CAAE,qBAAqB,CAC5BtC,WAAW,CAAE,4CAA4C,CACzD2B,MAAM,CAAE3D,UAAU,CAACsL,UAAU,CAC7BC,MAAM,CAAEtL,UAAU,CAACuE,IAAI,CACvBgH,WAAW,CAAE,EAAE,CACfC,UAAU,CAAE,qFAAqF,CACjGC,KAAK,CAAEpJ,SAAS,CAACC,KAAK,CACtBoC,SAAS,CAAErC,SAAS,CAACC,KAAK,CAC1BN,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBACb,CAAC,CACD,CACEN,EAAE,CAAE,GAAG,CACP2B,SAAS,CACTa,KAAK,CAAE,4BAA4B,CACnCtC,WAAW,CAAE,2EAA2E,CACxF2B,MAAM,CAAE3D,UAAU,CAAC2L,QAAQ,CAC3BJ,MAAM,CAAEtL,UAAU,CAAC6D,MAAM,CACzB0H,WAAW,CAAE,EAAE,CACfC,UAAU,CAAE,wDAAwD,CACpEC,KAAK,CAAEpJ,SAAS,CAACC,KAAK,CACtBoC,SAAS,CAAErC,SAAS,CAACC,KAAK,CAC1BN,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBACb,CAAC,CACF,CAED;AACA,KAAM,CAAA2I,mBAAmB,CAAItH,SAAiB,EAAK,CACjD,CACE3B,EAAE,CAAE,GAAG,CACP2B,SAAS,CACTa,KAAK,CAAE,wCAAwC,CAC/CtC,WAAW,CAAE,0EAA0E,CACvF2B,MAAM,CAAEzD,WAAW,CAAC0L,IAAI,CACxBL,MAAM,CAAEtL,UAAU,CAACuE,IAAI,CACvBkH,KAAK,CAAEpJ,SAAS,CAACC,KAAK,CACtBoC,SAAS,CAAErC,SAAS,CAACC,KAAK,CAC1BN,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBACb,CAAC,CACD,CACEN,EAAE,CAAE,GAAG,CACP2B,SAAS,CACTa,KAAK,CAAE,oCAAoC,CAC3CtC,WAAW,CAAE,sEAAsE,CACnF2B,MAAM,CAAEzD,WAAW,CAAC0D,WAAW,CAC/B2H,MAAM,CAAEtL,UAAU,CAAC6D,MAAM,CACzB4H,KAAK,CAAEpJ,SAAS,CAACC,KAAK,CACtBoC,SAAS,CAAErC,SAAS,CAACC,KAAK,CAC1BN,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBACb,CAAC,CACD,CACEN,EAAE,CAAE,GAAG,CACP2B,SAAS,CACTa,KAAK,CAAE,0CAA0C,CACjDtC,WAAW,CAAE,mFAAmF,CAChG2B,MAAM,CAAEzD,WAAW,CAAC2L,QAAQ,CAC5BN,MAAM,CAAEtL,UAAU,CAAC6L,QAAQ,CAC3BC,iBAAiB,CAAE,qFAAqF,CACxGL,KAAK,CAAEpJ,SAAS,CAACC,KAAK,CACtBoC,SAAS,CAAErC,SAAS,CAACC,KAAK,CAC1BN,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBACb,CAAC,CACF,CAED;AACA,KAAM,CAAA4J,eAA0B,CAAG,CACjC,CACElK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,wBAAwB,CAC9BC,WAAW,CAAE,2CAA2C,CACxD6B,QAAQ,CAAExD,eAAe,CAACmE,IAAI,CAC9BT,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACgE,WAAW,CACjCM,QAAQ,CAAE,EAAE,CACZC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACU,QAAQ,CAClCf,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAAC4L,OACpC,CAAC,CACD,CACEpK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,iBAAiB,CACvBC,WAAW,CAAE,kDAAkD,CAC/D6B,QAAQ,CAAExD,eAAe,CAACyD,MAAM,CAChCC,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACuM,OAAO,CAC7BjI,QAAQ,CAAE,EAAE,CACZC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACY,QAAQ,CAClCjB,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAAC8L,cACpC,CAAC,CACD,CACEtK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,8BAA8B,CACpCC,WAAW,CAAE,mDAAmD,CAChE6B,QAAQ,CAAExD,eAAe,CAACyL,QAAQ,CAClC/H,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACyM,SAAS,CAC/BnI,QAAQ,CAAE,GAAG,CACbC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACU,QAAQ,CAClCf,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAACgM,OACpC,CAAC,CACD,CACExK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,wBAAwB,CAC9BC,WAAW,CAAE,2DAA2D,CACxE6B,QAAQ,CAAExD,eAAe,CAACmE,IAAI,CAC9BT,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACgE,WAAW,CACjCM,QAAQ,CAAE,EAAE,CACZC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACY,QAAQ,CAClCjB,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAAC4L,OACpC,CAAC,CACD,CACEpK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,qCAAqC,CAC3CC,WAAW,CAAE,gFAAgF,CAC7F6B,QAAQ,CAAExD,eAAe,CAACyL,QAAQ,CAClC/H,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACyM,SAAS,CAC/BnI,QAAQ,CAAE,GAAG,CACbC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACU,QAAQ,CAClCf,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAAC8L,cACpC,CAAC,CACD,CACEtK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,wBAAwB,CAC9BC,WAAW,CAAE,oDAAoD,CACjE6B,QAAQ,CAAExD,eAAe,CAACmE,IAAI,CAC9BT,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACuM,OAAO,CAC7BjI,QAAQ,CAAE,EAAE,CACZC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACU,QAAQ,CAClCf,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAAC8L,cACpC,CAAC,CACD,CACEtK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,2BAA2B,CACjCC,WAAW,CAAE,oEAAoE,CACjF6B,QAAQ,CAAExD,eAAe,CAACyD,MAAM,CAChCC,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACgE,WAAW,CACjCM,QAAQ,CAAE,EAAE,CACZC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACY,QAAQ,CAClCjB,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAACgM,OACpC,CAAC,CACD,CACExK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,iBAAiB,CACvBC,WAAW,CAAE,0DAA0D,CACvE6B,QAAQ,CAAExD,eAAe,CAACmE,IAAI,CAC9BT,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAACyM,SAAS,CAC/BnI,QAAQ,CAAE,GAAG,CACbC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,MAAM,CAClBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACY,QAAQ,CAClCjB,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAAC4L,OACpC,CAAC,CACD,CACEpK,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,4BAA4B,CAClCC,WAAW,CAAE,kDAAkD,CAC/D6B,QAAQ,CAAExD,eAAe,CAACyD,MAAM,CAChCC,SAAS,CAAE,YAAY,CACvBC,OAAO,CAAE,YAAY,CACrBL,MAAM,CAAE/D,aAAa,CAAC2M,QAAQ,CAC9BrI,QAAQ,CAAE,EAAE,CACZC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,KAAK,CACjBtB,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9B4B,cAAc,CAAE3B,SAAS,CAACU,QAAQ,CAClCf,SAAS,CAAE,sBAAsB,CACjCG,SAAS,CAAE,sBAAsB,CACjC6J,YAAY,CAAE3L,mBAAmB,CAACkM,OACpC,CAAC,CACF,CAED;AACA,MAAO,MAAM,CAAAC,KAAK,CAAG,KAAAA,CAAO9J,KAAa,CAAE+J,QAAgB,GAAK,CAC9D;AACA,KAAM,CAAAC,IAAI,CAAGC,MAAM,CAACC,MAAM,CAACvK,SAAS,CAAC,CAACwK,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACpK,KAAK,GAAKA,KAAK,CAAC,CAElE,GAAIgK,IAAI,CAAE,CACR,MAAO,CACL5F,OAAO,CAAE,IAAI,CACb3B,IAAI,CAAEuH,IAAI,CACVxG,OAAO,CAAE,kBACX,CAAC,CACH,CAEA,MAAO,CACLY,OAAO,CAAE,KAAK,CACd3B,IAAI,CAAE,IAAI,CACVe,OAAO,CAAE,qBACX,CAAC,CACH,CAAC,CAED,KAAM,CAAA6G,YAAoB,CAAG,CAC3B,CACElL,EAAE,CAAE,GAAG,CACPU,QAAQ,CAAE,UAAU,CACpBC,SAAS,CAAE,MAAM,CACjBC,QAAQ,CAAE,KAAK,CACfC,KAAK,CAAE,qBAAqB,CAC5BC,IAAI,CAAE9C,QAAQ,CAACmN,eAAe,CAC9BnK,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9BU,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPU,QAAQ,CAAE,YAAY,CACtBC,SAAS,CAAE,MAAM,CACjBC,QAAQ,CAAE,OAAO,CACjBC,KAAK,CAAE,uBAAuB,CAC9BC,IAAI,CAAE9C,QAAQ,CAACsD,SAAS,CACxBN,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9BU,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPU,QAAQ,CAAE,cAAc,CACxBC,SAAS,CAAE,MAAM,CACjBC,QAAQ,CAAE,SAAS,CACnBC,KAAK,CAAE,yBAAyB,CAChCC,IAAI,CAAE9C,QAAQ,CAACwD,QAAQ,CACvBR,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9BU,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPU,QAAQ,CAAE,cAAc,CACxBC,SAAS,CAAE,OAAO,CAClBC,QAAQ,CAAE,QAAQ,CAClBC,KAAK,CAAE,yBAAyB,CAChCC,IAAI,CAAE9C,QAAQ,CAACsD,SAAS,CACxBN,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9BU,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPU,QAAQ,CAAE,aAAa,CACvBC,SAAS,CAAE,OAAO,CAClBC,QAAQ,CAAE,OAAO,CACjBC,KAAK,CAAE,wBAAwB,CAC/BC,IAAI,CAAE9C,QAAQ,CAACmN,eAAe,CAC9BnK,UAAU,CAAET,eAAe,CAAC,CAAC,CAAC,CAC9BU,QAAQ,CAAE,IAAI,CACdd,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACF,CAED,KAAM,CAAA+K,eAA6B,CAAG,CACpC,CACEpL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,+BAA+B,CACtCtC,WAAW,CAAE,yIAAyI,CACtJ2B,MAAM,CAAExD,gBAAgB,CAACyD,WAAW,CACpCC,QAAQ,CAAE9D,YAAY,CAACyE,IAAI,CAC3B2I,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACrEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACvEC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,6BAA6B,CACpCtC,WAAW,CAAE,qHAAqH,CAClI2B,MAAM,CAAExD,gBAAgB,CAACkN,OAAO,CAChCxJ,QAAQ,CAAE9D,YAAY,CAAC+D,MAAM,CAC7BqJ,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACrEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACvEC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,8BAA8B,CACrCtC,WAAW,CAAE,4HAA4H,CACzI2B,MAAM,CAAExD,gBAAgB,CAACkM,SAAS,CAClCxI,QAAQ,CAAE9D,YAAY,CAACyE,IAAI,CAC3B2I,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACrEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACxEC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,wBAAwB,CAC/BtC,WAAW,CAAE,wGAAwG,CACrH2B,MAAM,CAAExD,gBAAgB,CAACyD,WAAW,CACpCC,QAAQ,CAAE9D,YAAY,CAAC+D,MAAM,CAC7BqJ,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACrEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACvEC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,gBAAgB,CACvBtC,WAAW,CAAE,mJAAmJ,CAChK2B,MAAM,CAAExD,gBAAgB,CAACkN,OAAO,CAChCxJ,QAAQ,CAAE9D,YAAY,CAACyE,IAAI,CAC3B2I,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACtEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACvEC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,0BAA0B,CACjCtC,WAAW,CAAE,2IAA2I,CACxJ2B,MAAM,CAAExD,gBAAgB,CAACyD,WAAW,CACpCC,QAAQ,CAAE9D,YAAY,CAAC+D,MAAM,CAC7BqJ,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACrEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACvEC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,sBAAsB,CAC7BtC,WAAW,CAAE,8HAA8H,CAC3I2B,MAAM,CAAExD,gBAAgB,CAACkM,SAAS,CAClCxI,QAAQ,CAAE9D,YAAY,CAACuN,GAAG,CAC1BH,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACrEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACvEC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,GAAG,CACPwC,KAAK,CAAE,0BAA0B,CACjCtC,WAAW,CAAE,wIAAwI,CACrJ2B,MAAM,CAAExD,gBAAgB,CAACkN,OAAO,CAChCxJ,QAAQ,CAAE9D,YAAY,CAACyE,IAAI,CAC3B2I,UAAU,CAAEH,YAAY,CAAC,CAAC,CAAC,CAC3BI,UAAU,CAAEJ,YAAY,CAAC,CAAC,CAAC,CAC3BvI,OAAO,CAAE,GAAI,CAAAvC,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACrEF,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACF,CAED,KAAM,CAAAoL,WAAW,CAAG,CAClBC,iBAAiB,CAAE,KAAO,CAAAxM,KAAa,EAAyC,CAC9E,KAAM,CAAAI,KAAK,CAAC,CAAC,CACb,MAAO,CACL2F,OAAO,CAAE,IAAI,CACb3B,IAAI,CAAE8H,eACR,CAAC,CACH,CAAC,CAEDO,iBAAiB,CAAE,KAAAA,CAAO3L,EAAU,CAAEd,KAAa,GAAuC,CACxF,KAAM,CAAAI,KAAK,CAAC,CAAC,CACb,KAAM,CAAAsM,UAAU,CAAGR,eAAe,CAACJ,IAAI,CAACa,CAAC,EAAIA,CAAC,CAAC7L,EAAE,GAAKA,EAAE,CAAC,CACzD,MAAO,CACLiF,OAAO,CAAE,CAAC,CAAC2G,UAAU,CACrBtI,IAAI,CAAEsI,UAAU,EAAIR,eAAe,CAAC,CAAC,CACvC,CAAC,CACH,CAAC,CAEDU,gBAAgB,CAAE,KAAAA,CAAOxI,IAAyB,CAAEpE,KAAa,GAAuC,CACtG,KAAM,CAAAI,KAAK,CAAC,CAAC,CACb,KAAM,CAAAyM,aAAyB,CAAG,CAChC/L,EAAE,CAAEgM,MAAM,CAACZ,eAAe,CAAChI,MAAM,CAAG,CAAC,CAAC,CACtC,GAAGE,IAAI,CACPnD,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAe,CACf+K,eAAe,CAACa,IAAI,CAACF,aAAa,CAAC,CACnC,MAAO,CACL9G,OAAO,CAAE,IAAI,CACb3B,IAAI,CAAEyI,aACR,CAAC,CACH,CAAC,CAEDG,gBAAgB,CAAE,KAAAA,CAAOlM,EAAU,CAAEsD,IAAyB,CAAEpE,KAAa,GAAuC,CAClH,KAAM,CAAAI,KAAK,CAAC,CAAC,CACb,KAAM,CAAA6M,KAAK,CAAGf,eAAe,CAACgB,SAAS,CAACP,CAAC,EAAIA,CAAC,CAAC7L,EAAE,GAAKA,EAAE,CAAC,CACzD,GAAImM,KAAK,GAAK,CAAC,CAAC,CAAE,CAChB,MAAO,CACLlH,OAAO,CAAE,KAAK,CACdJ,KAAK,CAAE,sBACT,CAAC,CACH,CACAuG,eAAe,CAACe,KAAK,CAAC,CAAG,CACvB,GAAGf,eAAe,CAACe,KAAK,CAAC,CACzB,GAAG7I,IAAI,CACPhD,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,MAAO,CACL4E,OAAO,CAAE,IAAI,CACb3B,IAAI,CAAE8H,eAAe,CAACe,KAAK,CAC7B,CAAC,CACH,CAAC,CAEDE,gBAAgB,CAAE,KAAAA,CAAOrM,EAAU,CAAEd,KAAa,GAAiC,CACjF,KAAM,CAAAI,KAAK,CAAC,CAAC,CACb,KAAM,CAAA6M,KAAK,CAAGf,eAAe,CAACgB,SAAS,CAACP,CAAC,EAAIA,CAAC,CAAC7L,EAAE,GAAKA,EAAE,CAAC,CACzD,GAAImM,KAAK,GAAK,CAAC,CAAC,CAAE,CAChB,MAAO,CACLlH,OAAO,CAAE,KAAK,CACdJ,KAAK,CAAE,sBACT,CAAC,CACH,CACAuG,eAAe,CAACkB,MAAM,CAACH,KAAK,CAAE,CAAC,CAAC,CAChC,MAAO,CACLlH,OAAO,CAAE,IACX,CAAC,CACH,CACF,CAAC,CAED;AACA,KAAM,CAAAsH,SAAS,CAAG,CAChB;AACAC,IAAI,CAAE,CACJ7B,KAAK,CAAG8B,YAAoB,EAAK,CAC/B;AACA/H,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9C,MAAO,CAAApF,OAAO,CAACC,OAAO,CAAC,CACrBkN,MAAM,CAAE,GAAG,CACXhM,QAAQ,CAAE+L,YAAY,CACtB3L,IAAI,CAAE9C,QAAQ,CAAC+C,KAAK,CAAE;AACtB4L,YAAY,CAAE,GAAG,CACjBzN,KAAK,CAAE,aAAa,CAAGkB,IAAI,CAACkJ,GAAG,CAAC,CAAC,CACjCrE,OAAO,CAAE,IAAI,CACbZ,OAAO,CAAE,kBACX,CAAC,CAAC,CACJ,CAAC,CAEDuI,YAAY,CAAGA,YAAoB,EACjC5J,UAAU,CAAC,mBAAmB,CAAE,MAAM,CAAE,CAAE4J,YAAa,CAAC,CAAC,CAE3DC,MAAM,CAAG3N,KAAa,EACpB8D,UAAU,CAAC,kBAAkB,CAAE,MAAM,CAAE,CAAC,CAAC,CAAE9D,KAAK,CACpD,CAAC,CAED;AACA4N,KAAK,CAAE,CACLC,cAAc,CAAG7N,KAAa,EAC5B8D,UAAU,CAAC,eAAe,CAAE,KAAK,CAAEK,SAAS,CAAEnE,KAAK,CAAC,CAEtD8N,WAAW,CAAE,KAAO,CAAA9N,KAAa,EAAmC,CAClE,KAAM,CAAAI,KAAK,CAAC,CAAC,CACb,MAAO,CACL2F,OAAO,CAAE,IAAI,CACb3B,IAAI,CAAE4H,YACR,CAAC,CACH,CAAC,CAED+B,WAAW,CAAEA,CAACP,MAAc,CAAExN,KAAa,GACzC8D,UAAU,CAAC,cAAc0J,MAAM,EAAE,CAAE,KAAK,CAAErJ,SAAS,CAAEnE,KAAK,CAAC,CAE7DgO,UAAU,CAAEA,CAACC,QAAa,CAAEjO,KAAa,GACvC8D,UAAU,CAAC,YAAY,CAAE,MAAM,CAAEmK,QAAQ,CAAEjO,KAAK,CAAC,CAEnDkO,UAAU,CAAEA,CAACV,MAAc,CAAES,QAAa,CAAEjO,KAAa,GACvD8D,UAAU,CAAC,cAAc0J,MAAM,EAAE,CAAE,KAAK,CAAES,QAAQ,CAAEjO,KAAK,CAAC,CAE5DmO,UAAU,CAAEA,CAACX,MAAc,CAAExN,KAAa,GACxC8D,UAAU,CAAC,cAAc0J,MAAM,EAAE,CAAE,QAAQ,CAAErJ,SAAS,CAAEnE,KAAK,CAAC,CAEhEoO,UAAU,CAAEA,CAACZ,MAAc,CAAE5L,IAAY,CAAE5B,KAAa,GACtD8D,UAAU,CAAC,cAAc0J,MAAM,OAAO,CAAE,KAAK,CAAE,CAAE5L,IAAK,CAAC,CAAE5B,KAAK,CAAC,CAEjEqO,gBAAgB,CAAEA,CAACb,MAAc,CAAEC,YAAoB,CAAEzN,KAAa,GACpE8D,UAAU,CAAC,cAAc0J,MAAM,aAAa,CAAE,KAAK,CAAE,CAAEC,YAAa,CAAC,CAAEzN,KAAK,CAAC,CAE/EsO,iBAAiB,CAAGtO,KAAa,EAC/B8D,UAAU,CAAC,wBAAwB,CAAE,KAAK,CAAEK,SAAS,CAAEnE,KAAK,CAChE,CAAC,CAED;AACAuO,QAAQ,CAAE,CACRC,cAAc,CAAE,KAAO,CAAAxO,KAAa,EAAK,CACvC,KAAM,CAAAU,aAAa,CAAC,CAAC,CAErB;AACA,KAAM,CAAA6H,cAAc,CAAGtI,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAC9D,KAAM,CAAAqO,QAAQ,CAAGhG,cAAc,CAAG7D,IAAI,CAAC+J,KAAK,CAAClG,cAAc,CAAC,CAAGyC,eAAe,CAE9E,MAAO,CACL5G,IAAI,CAAEmK,QAAQ,CACdxI,OAAO,CAAE,IACX,CAAC,CACH,CAAC,CAED2I,cAAc,CAAE,KAAAA,CAAO5N,EAAU,CAAEd,KAAa,GAAK,CACnD,KAAM,CAAAU,aAAa,CAAC,CAAC,CAErB;AACA,KAAM,CAAA6H,cAAc,CAAGtI,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAC9D,KAAM,CAAAqO,QAAQ,CAAGhG,cAAc,CAAG7D,IAAI,CAAC+J,KAAK,CAAClG,cAAc,CAAC,CAAGyC,eAAe,CAE9E;AACA,KAAM,CAAAnH,OAAO,CAAG0K,QAAQ,CAACzC,IAAI,CAAE6C,CAAM,EAAKA,CAAC,CAAC7N,EAAE,GAAKA,EAAE,CAAC,CAEtD,GAAI,CAAC+C,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAqB,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA,MAAO,CACLd,IAAI,CAAEP,OAAO,CACbkC,OAAO,CAAE,IACX,CAAC,CACH,CAAC,CAED6I,aAAa,CAAE,KAAAA,CAAOC,WAAgB,CAAE7O,KAAa,GAAK,CACxD,GAAI,CACF,KAAM,CAAAU,aAAa,CAAC,CAAC,CAAE;AAEvB;AACA,KAAM,CAAAmF,UAAU,CAAG,CACjB,GAAGgJ,WAAW,CACd/N,EAAE,CAAE+N,WAAW,CAAC/N,EAAE,EAAInC,MAAM,CAAC,CAAC,CAC9BsC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAED;AACA,KAAM,CAAA2N,gBAAgB,CAAGpK,IAAI,CAAC+J,KAAK,CAACxO,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,EAAI,IAAI,CAAC,CAEpF;AACAD,YAAY,CAAC8O,OAAO,CAAC,iBAAiB,CAAErK,IAAI,CAACC,SAAS,CAAC,CAAC,GAAGmK,gBAAgB,CAAEjJ,UAAU,CAAC,CAAC,CAAC,CAE1F,MAAO,CACLzB,IAAI,CAAEyB,UAAU,CAChBE,OAAO,CAAE,IACX,CAAC,CACH,CAAE,MAAOJ,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDuB,aAAa,CAAE,KAAAA,CAAOzE,SAAiB,CAAEuM,WAAgB,CAAEhP,KAAa,GAAK,CAC3E,GAAI,CACF,KAAM,CAAAU,aAAa,CAAC,CAAC,CAAE;AAEvB;AACA,KAAM,CAAA6H,cAAc,CAAGtI,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAC9D,KAAM,CAAAqO,QAAQ,CAAGhG,cAAc,CAAG7D,IAAI,CAAC+J,KAAK,CAAClG,cAAc,CAAC,CAAGyC,eAAe,CAE9E;AACA,KAAM,CAAAiE,YAAY,CAAGV,QAAQ,CAACrB,SAAS,CAAEyB,CAAM,EAAKA,CAAC,CAAC7N,EAAE,GAAK2B,SAAS,CAAC,CAEvE,GAAIwM,YAAY,GAAK,CAAC,CAAC,CAAE,CACvB,KAAM,IAAI,CAAA/J,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA;AACA,KAAM,CAAA+B,cAAc,CAAG,CACrB,GAAGsH,QAAQ,CAACU,YAAY,CAAC,CACzB,GAAGD,WAAW,CACd5N,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAEDoN,QAAQ,CAACU,YAAY,CAAC,CAAGhI,cAAc,CAEvC;AACAhH,YAAY,CAAC8O,OAAO,CAAC,iBAAiB,CAAErK,IAAI,CAACC,SAAS,CAAC4J,QAAQ,CAAC,CAAC,CAEjE,MAAO,CACLnK,IAAI,CAAE6C,cAAc,CACpBlB,OAAO,CAAE,IACX,CAAC,CACH,CAAE,MAAOJ,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDsC,aAAa,CAAE,KAAAA,CAAOxF,SAAiB,CAAEzC,KAAa,GAAmB,CACvE,KAAM,CAAAU,aAAa,CAAC,CAAC,CAErB;AACA,KAAM,CAAAwO,cAAc,CAAGjP,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAC9D,KAAM,CAAAqO,QAAQ,CAAGW,cAAc,CAAGxK,IAAI,CAAC+J,KAAK,CAACS,cAAc,CAAC,CAAGlE,eAAe,CAE9E;AACA,KAAM,CAAAmE,eAAe,CAAGZ,QAAQ,CAACa,MAAM,CAAET,CAAM,EAAKA,CAAC,CAAC7N,EAAE,GAAK2B,SAAS,CAAC,CAEvE,GAAI8L,QAAQ,CAACrK,MAAM,GAAKiL,eAAe,CAACjL,MAAM,CAAE,CAC9C,KAAM,IAAI,CAAAgB,KAAK,CAAC,mBAAmBzC,SAAS,YAAY,CAAC,CAC3D,CAEA;AACAxC,YAAY,CAAC8O,OAAO,CAAC,iBAAiB,CAAErK,IAAI,CAACC,SAAS,CAACwK,eAAe,CAAC,CAAC,CAExE,MAAO,CACL/K,IAAI,CAAE,CAAEe,OAAO,CAAE,8BAA+B,CAClD,CAAC,CACH,CAAC,CAEDkK,gBAAgB,CAAEA,CAAC5M,SAAiB,CAAE6M,QAAkB,CAAEtP,KAAa,GACrE8D,UAAU,CAAC,iBAAiBrB,SAAS,cAAc,CAAE,MAAM,CAAE6M,QAAQ,CAAEtP,KAAK,CAAE,IAAI,CAAC,CAErFuP,cAAc,CAAEA,CAAC9M,SAAiB,CAAEzC,KAAa,GAC/C8D,UAAU,CAAC,iBAAiBrB,SAAS,cAAc,CAAE,KAAK,CAAE0B,SAAS,CAAEnE,KAAK,CAAC,CAE/EwP,gBAAgB,CAAEA,CAAC/M,SAAiB,CAAEgN,YAAoB,CAAEzP,KAAa,GACvE8D,UAAU,CAAC,iBAAiBrB,SAAS,gBAAgBgN,YAAY,EAAE,CAAE,QAAQ,CAAEtL,SAAS,CAAEnE,KAAK,CAAC,CAElG0I,UAAU,CAAE,KAAAA,CAAOjG,SAAiB,CAAEzC,KAAa,GAAK,CACtD,GAAI,CACF;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,CACLoE,IAAI,CAAE,CACJtD,EAAE,CAAE2B,SAAS,CACb1B,IAAI,CAAE,cAAc,CACpBC,WAAW,CAAE,4CAA4C,CACzD+B,SAAS,CAAE,GAAI,CAAA7B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnC6B,OAAO,CAAE,GAAI,CAAA9B,IAAI,CAACA,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACjJ,WAAW,CAAC,CAAC,CACtEwB,MAAM,CAAE,aAAa,CACrBE,QAAQ,CAAE,QAAQ,CAClBM,MAAM,CAAE,MAAM,CACdD,QAAQ,CAAE,EAAE,CACZpB,UAAU,CAAE,CACVhB,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,eACR,CAAC,CACDkC,cAAc,CAAE,CACdnC,EAAE,CAAE,QAAQ,CACZW,SAAS,CAAE,MAAM,CACjBC,QAAQ,CAAE,KACZ,CAAC,CACDgO,cAAc,CAAE,WAAW,CAC3BC,QAAQ,CAAE,yCAAyC,CACnDC,aAAa,CAAE,EAAE,CACjB3O,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CACF,CAAC,CACH,CAAE,MAAOwE,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAAC,CAED;AACAkD,KAAK,CAAE,CACLgH,WAAW,CAAEA,CAACpN,SAAiB,CAAEzC,KAAa,GAC5C8D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,CAAE,KAAK,CAAE0B,SAAS,CAAEnE,KAAK,CAAC,CAEzE8P,sBAAsB,CAAG9P,KAAa,EACpC8D,UAAU,CAAC,wBAAwB,CAAE,KAAK,CAAEK,SAAS,CAAEnE,KAAK,CAAC,CAE/D+P,WAAW,CAAEA,CAACtN,SAAiB,CAAE2E,MAAc,CAAEpH,KAAa,GAC5D8D,UAAU,CAAC,iBAAiBrB,SAAS,UAAU2E,MAAM,EAAE,CAAE,KAAK,CAAEjD,SAAS,CAAEnE,KAAK,CAAC,CAEnFgQ,sBAAsB,CAAEA,CAAC5I,MAAc,CAAEpH,KAAa,GACpD8D,UAAU,CAAC,0BAA0BsD,MAAM,EAAE,CAAE,KAAK,CAAEjD,SAAS,CAAEnE,KAAK,CAAC,CAEzEiQ,UAAU,CAAEA,CAACxN,SAAiB,CAAEyN,QAAa,CAAElQ,KAAa,GAC1D8D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,CAAE,MAAM,CAAEyN,QAAQ,CAAElQ,KAAK,CAAC,CAEzEmQ,qBAAqB,CAAEA,CAACD,QAAa,CAAElQ,KAAa,GAClD8D,UAAU,CAAC,wBAAwB,CAAE,MAAM,CAAEoM,QAAQ,CAAElQ,KAAK,CAAC,CAE/DsH,UAAU,CAAEA,CAAC7E,SAAiB,CAAE2E,MAAc,CAAE8I,QAAa,CAAElQ,KAAa,GAC1E8D,UAAU,CAAC,iBAAiBrB,SAAS,UAAU2E,MAAM,EAAE,CAAE,KAAK,CAAE8I,QAAQ,CAAElQ,KAAK,CAAC,CAElFuH,qBAAqB,CAAEA,CAACH,MAAc,CAAE8I,QAAa,CAAElQ,KAAa,GAClE8D,UAAU,CAAC,0BAA0BsD,MAAM,EAAE,CAAE,KAAK,CAAE8I,QAAQ,CAAElQ,KAAK,CAAC,CAExEkI,UAAU,CAAEA,CAACzF,SAAiB,CAAE2E,MAAc,CAAEpH,KAAa,GAC3D8D,UAAU,CAAC,iBAAiBrB,SAAS,UAAU2E,MAAM,EAAE,CAAE,QAAQ,CAAEjD,SAAS,CAAEnE,KAAK,CAAC,CAEtFmI,qBAAqB,CAAEA,CAACf,MAAc,CAAEpH,KAAa,GACnD8D,UAAU,CAAC,0BAA0BsD,MAAM,EAAE,CAAE,QAAQ,CAAEjD,SAAS,CAAEnE,KAAK,CAAC,CAE5E;AACAoQ,UAAU,CAAE,KAAAA,CAAO3N,SAAiB,CAAE2E,MAAc,CAAEiJ,WAAgB,CAAErQ,KAAa,GAAK,CACxF,GAAIxB,QAAQ,CAAC8R,YAAY,CAAE,CACzB;AACA,KAAM,CAAA5P,aAAa,CAAC,CAAC,CAErB;AACA,KAAM,CAAA6P,QAAQ,CAAG7L,IAAI,CAAC+J,KAAK,CAACxO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAI,IAAI,CAAC,CAElE;AACA,KAAM,CAAAsQ,SAAS,CAAGD,QAAQ,CAACrD,SAAS,CAAEuD,CAAM,EAAKA,CAAC,CAAC3P,EAAE,GAAKsG,MAAM,EAAIqJ,CAAC,CAAChO,SAAS,GAAKA,SAAS,CAAC,CAE9F,GAAI+N,SAAS,GAAK,CAAC,CAAC,CAAE,CACpB;AACA,KAAM,CAAAE,UAAU,CAAG,CACjB5P,EAAE,CAAE,WAAWI,IAAI,CAACkJ,GAAG,CAAC,CAAC,EAAE,CAC3BhD,MAAM,CACN7B,IAAI,CAAE8K,WAAW,CAAC9K,IAAI,CACtBtE,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCwP,MAAM,CAAE,CACN7P,EAAE,CAAEuP,WAAW,CAACO,QAAQ,CACxBnP,SAAS,CAAE4O,WAAW,CAACQ,eAAe,EAAI,MAAM,CAChDnP,QAAQ,CAAE2O,WAAW,CAACS,cAAc,EAAIT,WAAW,CAACO,QACtD,CACF,CAAC,CAED;AACA,GAAI,CAACL,QAAQ,CAACC,SAAS,CAAC,CAACb,QAAQ,CAAE,CACjCY,QAAQ,CAACC,SAAS,CAAC,CAACb,QAAQ,CAAG,EAAE,CACnC,CAEAY,QAAQ,CAACC,SAAS,CAAC,CAACb,QAAQ,CAAC5C,IAAI,CAAC2D,UAAU,CAAC,CAE7C;AACAzQ,YAAY,CAAC8O,OAAO,CAAC,OAAO,CAAErK,IAAI,CAACC,SAAS,CAAC4L,QAAQ,CAAC,CAAC,CAEvD,MAAO,CACLxK,OAAO,CAAE,IAAI,CACb3B,IAAI,CAAEsM,UAAU,CAChBvL,OAAO,CAAE,4BACX,CAAC,CACH,CAAC,IAAM,CACL,KAAM,IAAI,CAAAD,KAAK,CAAC,gBAAgB,CAAC,CACnC,CACF,CAAC,IAAM,CACL;AACA,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAtG,KAAK,CAACyS,IAAI,CAC/B,GAAGxS,YAAY,aAAakE,SAAS,UAAU2E,MAAM,WAAW,CAChEiJ,WAAW,CACX,CACE1Q,OAAO,CAAE,CACPQ,aAAa,CAAE,UAAUH,KAAK,EAChC,CACF,CACF,CAAC,CACD,MAAO,CAAA4E,QAAQ,CAACR,IAAI,CACtB,CACF,CACF,CAAC,CAED;AACA4M,KAAK,CAAE,CACLC,WAAW,CAAEA,CAACxO,SAAiB,CAAEzC,KAAa,GAC5C8D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,CAAE,KAAK,CAAE0B,SAAS,CAAEnE,KAAK,CAAC,CAEzEkR,WAAW,CAAEA,CAACzO,SAAiB,CAAEkF,MAAc,CAAE3H,KAAa,GAC5D8D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUkF,MAAM,EAAE,CAAE,KAAK,CAAExD,SAAS,CAAEnE,KAAK,CAAC,CAEnFmR,UAAU,CAAEA,CAAC1O,SAAiB,CAAE2O,QAAa,CAAEpR,KAAa,GAC1D8D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,CAAE,MAAM,CAAE2O,QAAQ,CAAEpR,KAAK,CAAC,CAEzE6H,UAAU,CAAEA,CAACpF,SAAiB,CAAEkF,MAAc,CAAEyJ,QAAa,CAAEpR,KAAa,GAC1E8D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUkF,MAAM,EAAE,CAAE,KAAK,CAAEyJ,QAAQ,CAAEpR,KAAK,CAAC,CAElFqI,UAAU,CAAEA,CAAC5F,SAAiB,CAAEkF,MAAc,CAAE3H,KAAa,GAC3D8D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUkF,MAAM,EAAE,CAAE,QAAQ,CAAExD,SAAS,CAAEnE,KAAK,CACvF,CAAC,CAED;AACAqR,MAAM,CAAE,CACNC,YAAY,CAAEA,CAAC7O,SAAiB,CAAEzC,KAAa,GAC7C8D,UAAU,CAAC,aAAarB,SAAS,SAAS,CAAE,KAAK,CAAE,IAAI,CAAEzC,KAAK,CAAC,CACjEuR,YAAY,CAAEA,CAAC9O,SAAiB,CAAEqF,OAAe,CAAE9H,KAAa,GAC9D8D,UAAU,CAAC,aAAarB,SAAS,WAAWqF,OAAO,EAAE,CAAE,KAAK,CAAE,IAAI,CAAE9H,KAAK,CAAC,CAC5EwR,WAAW,CAAEA,CAAC/O,SAAiB,CAAEgP,SAAyB,CAAEzR,KAAa,GACvE8D,UAAU,CAAC,aAAarB,SAAS,SAAS,CAAE,MAAM,CAAEgP,SAAS,CAAEzR,KAAK,CAAC,CACvEgI,WAAW,CAAEA,CAACvF,SAAiB,CAAEqF,OAAe,CAAE2J,SAAyB,CAAEzR,KAAa,GACxF8D,UAAU,CAAC,aAAarB,SAAS,WAAWqF,OAAO,EAAE,CAAE,KAAK,CAAE2J,SAAS,CAAEzR,KAAK,CAAC,CACjFsI,WAAW,CAAEA,CAAC7F,SAAiB,CAAEqF,OAAe,CAAE9H,KAAa,GAC7D8D,UAAU,CAAC,aAAarB,SAAS,WAAWqF,OAAO,EAAE,CAAE,QAAQ,CAAE,IAAI,CAAE9H,KAAK,CAChF,CAAC,CAED;AACA0R,YAAY,CAAE,CACZC,iBAAiB,CAAEA,CAACC,WAAgB,CAAE5R,KAAa,GACjD8D,UAAU,CAAC,oBAAoB,CAAE,MAAM,CAAE8N,WAAW,CAAE5R,KAAK,CAAC,CAE9D6R,wBAAwB,CAAEA,CAACpP,SAAiB,CAAEzC,KAAa,GACzD8D,UAAU,CAAC,gCAAgCrB,SAAS,EAAE,CAAE,KAAK,CAAE0B,SAAS,CAAEnE,KAAK,CAAC,CAElF8R,kBAAkB,CAAEA,CAACC,SAAiB,CAAE/R,KAAa,GACnD8D,UAAU,CAAC,sBAAsBiO,SAAS,EAAE,CAAE,KAAK,CAAE5N,SAAS,CAAEnE,KAAK,CAAC,CAExEgS,uBAAuB,CAAEA,CAACD,SAAiB,CAAEpP,MAAW,CAAEsP,WAA+B,CAAEjS,KAAa,GACtG8D,UAAU,CAAC,sBAAsBiO,SAAS,SAAS,CAAE,OAAO,CAAE,CAAEpP,MAAM,CAAEsP,WAAY,CAAC,CAAEjS,KAAK,CAAC,CAE/FkS,kBAAkB,CAAEA,CAACH,SAAiB,CAAEE,WAA+B,CAAEjS,KAAa,GACpF8D,UAAU,CAAC,sBAAsBiO,SAAS,UAAU,CAAE,MAAM,CAAE,CAAEE,WAAY,CAAC,CAAEjS,KAAK,CAAC,CAEvFmS,iBAAiB,CAAEA,CAACJ,SAAiB,CAAEE,WAAmB,CAAEjS,KAAa,GACvE8D,UAAU,CAAC,sBAAsBiO,SAAS,SAAS,CAAE,MAAM,CAAE,CAAEE,WAAY,CAAC,CAAEjS,KAAK,CACvF,CAAC,CAED;AACAuM,WAAW,CAEX6F,SAAS,CAAE,CACTC,YAAY,CAAGrS,KAAa,EAC1B8D,UAAU,CAAC,aAAa,CAAE,KAAK,CAAE,IAAI,CAAE9D,KAAK,CAAC,CAC/CsS,eAAe,CAAEA,CAACC,KAAa,CAAEvS,KAAa,GAC5C8D,UAAU,CAAC,eAAeyO,KAAK,EAAE,CAAE,KAAK,CAAE,IAAI,CAAEvS,KAAK,CACzD,CAAC,CAED;AACAiK,WAAW,CAAE,CACXqE,iBAAiB,CAAE,KAAO,CAAAtO,KAAa,EAAK,CAC1C,GAAI,CACF;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,CACLoE,IAAI,CAAE,CACJ,CACEtD,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,eAAe,CACrBC,WAAW,CAAE,mCAAmC,CAChDC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,eAAe,CACrBC,WAAW,CAAE,4BAA4B,CACzCC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CACD,CACEL,EAAE,CAAE,QAAQ,CACZC,IAAI,CAAE,oBAAoB,CAC1BC,WAAW,CAAE,mCAAmC,CAChDC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAEL,CAAC,CACH,CAAE,MAAOwE,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED6M,iBAAiB,CAAE,KAAAA,CAAO/E,YAAoB,CAAEzN,KAAa,GAAK,CAChE,GAAI,CACF;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,CACLoE,IAAI,CAAE,CACJtD,EAAE,CAAE2M,YAAY,CAChB1M,IAAI,CAAE,iBAAiB,CACvBC,WAAW,CAAE,2BAA2B,CACxCC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CACF,CAAC,CACH,CAAE,MAAOwE,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED8M,gBAAgB,CAAE,KAAAA,CAAOC,cAAmB,CAAE1S,KAAa,GAAK,CAC9D,GAAI,CACF;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,CACLoE,IAAI,CAAE,CACJtD,EAAE,CAAEI,IAAI,CAACkJ,GAAG,CAAC,CAAC,CAACuI,QAAQ,CAAC,CAAC,CACzB,GAAGD,cAAc,CACjBzR,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCC,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CACF,CAAC,CACH,CAAE,MAAOwE,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDiN,gBAAgB,CAAE,KAAAA,CAAOnF,YAAoB,CAAEiF,cAAmB,CAAE1S,KAAa,GAAK,CACpF,GAAI,CACF;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,CACLoE,IAAI,CAAE,CACJtD,EAAE,CAAE2M,YAAY,CAChB,GAAGiF,cAAc,CACjBtR,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CACF,CAAC,CACH,CAAE,MAAOwE,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDkN,gBAAgB,CAAE,KAAAA,CAAOpF,YAAoB,CAAEzN,KAAa,GAAK,CAC/D,GAAI,CACF;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,CACLoE,IAAI,CAAE,CACJ2B,OAAO,CAAE,IAAI,CACbZ,OAAO,CAAE,iCACX,CACF,CAAC,CACH,CAAE,MAAOQ,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAAC,CAED;AACAmN,cAAc,CAAE,CACdC,0BAA0B,CAAEA,CAACtQ,SAAiB,CAAEzC,KAAa,GAC3D8D,UAAU,CAAC,iBAAiBrB,SAAS,kBAAkB,CAAE,KAAK,CAAE0B,SAAS,CAAEnE,KAAK,CAAC,CAEnFgT,oBAAoB,CAAEA,CAACjB,SAAiB,CAAE/R,KAAa,GACrD8D,UAAU,CAAC,wBAAwBiO,SAAS,EAAE,CAAE,KAAK,CAAE5N,SAAS,CAAEnE,KAAK,CAAC,CAE1EiT,mBAAmB,CAAEA,CAACrB,WAAgB,CAAE5R,KAAa,GACnD8D,UAAU,CAAC,sBAAsB,CAAE,MAAM,CAAE8N,WAAW,CAAE5R,KAAK,CAAC,CAEhEkT,yBAAyB,CAAEA,CAACnB,SAAiB,CAAEpP,MAAW,CAAEsP,WAA+B,CAAEjS,KAAa,GACxG8D,UAAU,CAAC,wBAAwBiO,SAAS,SAAS,CAAE,OAAO,CAAE,CAAEpP,MAAM,CAAEsP,WAAY,CAAC,CAAEjS,KAAK,CAAC,CAEjGmT,oBAAoB,CAAEA,CAACpB,SAAiB,CAAEE,WAA+B,CAAEjS,KAAa,GACtF8D,UAAU,CAAC,wBAAwBiO,SAAS,UAAU,CAAE,MAAM,CAAE,CAAEE,WAAY,CAAC,CAAEjS,KAAK,CAAC,CAEzFoT,mBAAmB,CAAEA,CAACrB,SAAiB,CAAEE,WAAmB,CAAEjS,KAAa,GACzE8D,UAAU,CAAC,wBAAwBiO,SAAS,SAAS,CAAE,MAAM,CAAE,CAAEE,WAAY,CAAC,CAAEjS,KAAK,CAAC,CAExFqT,oBAAoB,CAAGrT,KAAa,EAClC8D,UAAU,CAAC,sBAAsB,CAAE,KAAK,CAAEK,SAAS,CAAEnE,KAAK,CAC9D,CACF,CAAC,CAED,cAAe,CAAAqN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}