{"ast":null,"code":"import { TaskStatus } from '../types';\n\n// Backend task status enum values matching the C# enum\nexport let BackendTaskStatus = /*#__PURE__*/function (BackendTaskStatus) {\n  BackendTaskStatus[BackendTaskStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  BackendTaskStatus[BackendTaskStatus[\"InProgress\"] = 1] = \"InProgress\";\n  BackendTaskStatus[BackendTaskStatus[\"Completed\"] = 2] = \"Completed\";\n  BackendTaskStatus[BackendTaskStatus[\"Delayed\"] = 3] = \"Delayed\";\n  BackendTaskStatus[BackendTaskStatus[\"Blocked\"] = 4] = \"Blocked\";\n  BackendTaskStatus[BackendTaskStatus[\"Cancelled\"] = 5] = \"Cancelled\";\n  return BackendTaskStatus;\n}({});\n\n/**\n * Maps frontend TaskStatus to backend TaskStatus values\n * @param status Frontend task status\n * @returns Backend task status value\n */\nexport const mapToBackendStatus = frontendStatus => {\n  switch (frontendStatus) {\n    case TaskStatus.TODO:\n      return BackendTaskStatus.NotStarted;\n    case TaskStatus.IN_PROGRESS:\n      return BackendTaskStatus.InProgress;\n    case TaskStatus.REVIEW:\n      return BackendTaskStatus.InProgress;\n    // Map REVIEW to InProgress in backend\n    case TaskStatus.DONE:\n      return BackendTaskStatus.Completed;\n    default:\n      console.warn(`Unknown frontend task status: ${frontendStatus}`);\n      return BackendTaskStatus.NotStarted;\n  }\n};\n\n/**\n * Maps backend TaskStatus values to frontend TaskStatus\n * @param status Backend task status value or string\n * @returns Frontend task status\n */\nexport const mapToFrontendStatus = backendStatus => {\n  // Handle string status values (sometimes the API returns string values directly)\n  if (typeof backendStatus === 'string') {\n    switch (backendStatus) {\n      case 'TODO':\n        return TaskStatus.TODO;\n      case 'IN_PROGRESS':\n        return TaskStatus.IN_PROGRESS;\n      case 'REVIEW':\n        return TaskStatus.REVIEW;\n      case 'DONE':\n        return TaskStatus.DONE;\n      case 'NotStarted':\n        return TaskStatus.TODO;\n      case 'InProgress':\n        return TaskStatus.IN_PROGRESS;\n      case 'Completed':\n        return TaskStatus.DONE;\n      case 'Delayed':\n      case 'Blocked':\n        return TaskStatus.IN_PROGRESS;\n      case 'Cancelled':\n        return TaskStatus.DONE;\n      default:\n        console.warn(`Unknown backend task status string: ${backendStatus}`);\n        return TaskStatus.TODO;\n    }\n  }\n\n  // Handle numeric status values\n  switch (backendStatus) {\n    case BackendTaskStatus.NotStarted:\n      return TaskStatus.TODO;\n    case BackendTaskStatus.InProgress:\n      return TaskStatus.IN_PROGRESS;\n    case BackendTaskStatus.Completed:\n      return TaskStatus.DONE;\n    case BackendTaskStatus.Delayed:\n      return TaskStatus.IN_PROGRESS;\n    // Map Delayed to IN_PROGRESS in frontend\n    case BackendTaskStatus.Blocked:\n      return TaskStatus.IN_PROGRESS;\n    // Map Blocked to IN_PROGRESS in frontend\n    case BackendTaskStatus.Cancelled:\n      return TaskStatus.DONE;\n    // Map Cancelled to DONE in frontend\n    default:\n      console.warn(`Unknown backend task status number: ${backendStatus}`);\n      return TaskStatus.TODO;\n  }\n};","map":{"version":3,"names":["TaskStatus","BackendTaskStatus","mapToBackendStatus","frontendStatus","TODO","NotStarted","IN_PROGRESS","InProgress","REVIEW","DONE","Completed","console","warn","mapToFrontendStatus","backendStatus","Delayed","Blocked","Cancelled"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/taskStatusMapper.ts"],"sourcesContent":["import { TaskStatus } from '../types';\n\n// Backend task status enum values matching the C# enum\nexport enum BackendTaskStatus {\n  NotStarted = 0,\n  InProgress = 1,\n  Completed = 2,\n  Delayed = 3,\n  Blocked = 4,\n  Cancelled = 5\n}\n\n/**\n * Maps frontend TaskStatus to backend TaskStatus values\n * @param status Frontend task status\n * @returns Backend task status value\n */\nexport const mapToBackendStatus = (frontendStatus: TaskStatus): BackendTaskStatus => {\n  switch (frontendStatus) {\n    case TaskStatus.TODO:\n      return BackendTaskStatus.NotStarted;\n    case TaskStatus.IN_PROGRESS:\n      return BackendTaskStatus.InProgress;\n    case TaskStatus.REVIEW:\n      return BackendTaskStatus.InProgress; // Map REVIEW to InProgress in backend\n    case TaskStatus.DONE:\n      return BackendTaskStatus.Completed;\n    default:\n      console.warn(`Unknown frontend task status: ${frontendStatus}`);\n      return BackendTaskStatus.NotStarted;\n  }\n};\n\n/**\n * Maps backend TaskStatus values to frontend TaskStatus\n * @param status Backend task status value or string\n * @returns Frontend task status\n */\nexport const mapToFrontendStatus = (backendStatus: number | string): TaskStatus => {\n  // Handle string status values (sometimes the API returns string values directly)\n  if (typeof backendStatus === 'string') {\n    switch (backendStatus) {\n      case 'TODO':\n        return TaskStatus.TODO;\n      case 'IN_PROGRESS':\n        return TaskStatus.IN_PROGRESS;\n      case 'REVIEW':\n        return TaskStatus.REVIEW;\n      case 'DONE':\n        return TaskStatus.DONE;\n      case 'NotStarted':\n        return TaskStatus.TODO;\n      case 'InProgress':\n        return TaskStatus.IN_PROGRESS;\n      case 'Completed':\n        return TaskStatus.DONE;\n      case 'Delayed':\n      case 'Blocked':\n        return TaskStatus.IN_PROGRESS;\n      case 'Cancelled':\n        return TaskStatus.DONE;\n      default:\n        console.warn(`Unknown backend task status string: ${backendStatus}`);\n        return TaskStatus.TODO;\n    }\n  }\n  \n  // Handle numeric status values\n  switch (backendStatus) {\n    case BackendTaskStatus.NotStarted:\n      return TaskStatus.TODO;\n    case BackendTaskStatus.InProgress:\n      return TaskStatus.IN_PROGRESS;\n    case BackendTaskStatus.Completed:\n      return TaskStatus.DONE;\n    case BackendTaskStatus.Delayed:\n      return TaskStatus.IN_PROGRESS; // Map Delayed to IN_PROGRESS in frontend\n    case BackendTaskStatus.Blocked:\n      return TaskStatus.IN_PROGRESS; // Map Blocked to IN_PROGRESS in frontend\n    case BackendTaskStatus.Cancelled:\n      return TaskStatus.DONE; // Map Cancelled to DONE in frontend\n    default:\n      console.warn(`Unknown backend task status number: ${backendStatus}`);\n      return TaskStatus.TODO;\n  }\n}; "],"mappings":"AAAA,SAASA,UAAU,QAAQ,UAAU;;AAErC;AACA,WAAYC,iBAAiB,0BAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;;AAS7B;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAIC,cAA0B,IAAwB;EACnF,QAAQA,cAAc;IACpB,KAAKH,UAAU,CAACI,IAAI;MAClB,OAAOH,iBAAiB,CAACI,UAAU;IACrC,KAAKL,UAAU,CAACM,WAAW;MACzB,OAAOL,iBAAiB,CAACM,UAAU;IACrC,KAAKP,UAAU,CAACQ,MAAM;MACpB,OAAOP,iBAAiB,CAACM,UAAU;IAAE;IACvC,KAAKP,UAAU,CAACS,IAAI;MAClB,OAAOR,iBAAiB,CAACS,SAAS;IACpC;MACEC,OAAO,CAACC,IAAI,CAAC,iCAAiCT,cAAc,EAAE,CAAC;MAC/D,OAAOF,iBAAiB,CAACI,UAAU;EACvC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,mBAAmB,GAAIC,aAA8B,IAAiB;EACjF;EACA,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACrC,QAAQA,aAAa;MACnB,KAAK,MAAM;QACT,OAAOd,UAAU,CAACI,IAAI;MACxB,KAAK,aAAa;QAChB,OAAOJ,UAAU,CAACM,WAAW;MAC/B,KAAK,QAAQ;QACX,OAAON,UAAU,CAACQ,MAAM;MAC1B,KAAK,MAAM;QACT,OAAOR,UAAU,CAACS,IAAI;MACxB,KAAK,YAAY;QACf,OAAOT,UAAU,CAACI,IAAI;MACxB,KAAK,YAAY;QACf,OAAOJ,UAAU,CAACM,WAAW;MAC/B,KAAK,WAAW;QACd,OAAON,UAAU,CAACS,IAAI;MACxB,KAAK,SAAS;MACd,KAAK,SAAS;QACZ,OAAOT,UAAU,CAACM,WAAW;MAC/B,KAAK,WAAW;QACd,OAAON,UAAU,CAACS,IAAI;MACxB;QACEE,OAAO,CAACC,IAAI,CAAC,uCAAuCE,aAAa,EAAE,CAAC;QACpE,OAAOd,UAAU,CAACI,IAAI;IAC1B;EACF;;EAEA;EACA,QAAQU,aAAa;IACnB,KAAKb,iBAAiB,CAACI,UAAU;MAC/B,OAAOL,UAAU,CAACI,IAAI;IACxB,KAAKH,iBAAiB,CAACM,UAAU;MAC/B,OAAOP,UAAU,CAACM,WAAW;IAC/B,KAAKL,iBAAiB,CAACS,SAAS;MAC9B,OAAOV,UAAU,CAACS,IAAI;IACxB,KAAKR,iBAAiB,CAACc,OAAO;MAC5B,OAAOf,UAAU,CAACM,WAAW;IAAE;IACjC,KAAKL,iBAAiB,CAACe,OAAO;MAC5B,OAAOhB,UAAU,CAACM,WAAW;IAAE;IACjC,KAAKL,iBAAiB,CAACgB,SAAS;MAC9B,OAAOjB,UAAU,CAACS,IAAI;IAAE;IAC1B;MACEE,OAAO,CAACC,IAAI,CAAC,uCAAuCE,aAAa,EAAE,CAAC;MACpE,OAAOd,UAAU,CAACI,IAAI;EAC1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}