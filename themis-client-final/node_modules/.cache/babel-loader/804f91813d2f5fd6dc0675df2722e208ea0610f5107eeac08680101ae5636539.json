{"ast":null,"code":"import { ProjectStatus, ProjectPriority, ProjectTemplateType } from '../types';\n\n// Empty Departments\nexport const mockDepartments = [];\n\n// Empty Users\nexport const mockUsers = [];\n\n// Empty Projects\nexport const mockProjects = [];\n\n// Empty Tasks\nexport const mockTasks = [];\n\n// Empty Risks\nexport const mockRisks = [];\n\n// Empty Meetings\nexport const mockMeetings = [];\n\n// Empty Issues\nexport const mockIssues = [];\n\n// Helper function to generate random activities - returns empty array\nexport const generateRandomActivities = count => {\n  return [];\n};\n\n// Empty activities\nexport const mockActivities = [];\n\n// Empty change requests\nexport const mockChangeRequests = [];\n\n// Empty task requests\nexport const mockTaskRequests = [];\n\n// Empty function that returns empty array\nconst createDefaultTasks = () => {\n  return [];\n};\n\n// Empty function for default risks\nexport const createDefaultRisks = () => {\n  return [];\n};\n\n// Empty function for default issues\nexport const createDefaultIssues = () => {\n  return [];\n};\n\n// Empty function for default meetings\nexport const createDefaultMeetings = () => {\n  return [];\n};\n\n// Get a mock project reference to use in tasks\nconst getProjectForTask = projectId => {\n  const mockProject = {\n    id: projectId || 'mock-project',\n    name: 'Mock Project',\n    description: 'A mock project',\n    status: ProjectStatus.IN_PROGRESS,\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-01-01T00:00:00Z',\n    endDate: '2023-12-31T00:00:00Z',\n    projectManager: mockUsers[1],\n    department: mockDepartments[0],\n    progress: 50,\n    budget: 100000,\n    actualCost: 50000,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  };\n  return mockProject;\n};\n\n// Empty Notifications\nexport const mockNotifications = [];","map":{"version":3,"names":["ProjectStatus","ProjectPriority","ProjectTemplateType","mockDepartments","mockUsers","mockProjects","mockTasks","mockRisks","mockMeetings","mockIssues","generateRandomActivities","count","mockActivities","mockChangeRequests","mockTaskRequests","createDefaultTasks","createDefaultRisks","createDefaultIssues","createDefaultMeetings","getProjectForTask","projectId","mockProject","id","name","description","status","IN_PROGRESS","priority","MEDIUM","startDate","endDate","projectManager","department","progress","budget","actualCost","createdAt","updatedAt","templateType","DEFAULT","mockNotifications"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/services/mockData.ts"],"sourcesContent":["import { Project, User, Department, ProjectStatus, ProjectPriority, Task, TaskStatus, Risk, Meeting, Issue, UserRole, RiskStatus, IssueStatus, RiskImpact, TaskRequestStatus, MeetingStatus, TaskPriority, ProjectTemplateType } from '../types';\n\n// Empty Departments\nexport const mockDepartments: Department[] = [];\n\n// Empty Users\nexport const mockUsers: User[] = [];\n\n// Empty Projects\nexport const mockProjects: Project[] = [];\n\n// Empty Tasks\nexport const mockTasks: Task[] = [];\n\n// Empty Risks\nexport const mockRisks: Risk[] = [];\n\n// Empty Meetings\nexport const mockMeetings: Meeting[] = [];\n\n// Empty Issues\nexport const mockIssues: Issue[] = [];\n\n// Helper function to generate random activities - returns empty array\nexport const generateRandomActivities = (count: number) => {\n  return [];\n};\n\n// Empty activities\nexport const mockActivities = [];\n\n// Empty change requests\nexport const mockChangeRequests = [];\n\n// Empty task requests\nexport const mockTaskRequests = [];\n\n// Empty function that returns empty array\nconst createDefaultTasks = () => {\n  return [];\n};\n\n// Empty function for default risks\nexport const createDefaultRisks = () => {\n  return [];\n};\n\n// Empty function for default issues\nexport const createDefaultIssues = () => {\n  return [];\n};\n\n// Empty function for default meetings\nexport const createDefaultMeetings = () => {\n  return [];\n};\n\n// Get a mock project reference to use in tasks\nconst getProjectForTask = (projectId: string): Project => {\n  const mockProject: Project = {\n    id: projectId || 'mock-project',\n    name: 'Mock Project',\n    description: 'A mock project',\n    status: ProjectStatus.IN_PROGRESS,\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-01-01T00:00:00Z',\n    endDate: '2023-12-31T00:00:00Z',\n    projectManager: mockUsers[1],\n    department: mockDepartments[0],\n    progress: 50,\n    budget: 100000,\n    actualCost: 50000,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  };\n  return mockProject;\n};\n\n// Empty Notifications\nexport const mockNotifications = []; "],"mappings":"AAAA,SAAoCA,aAAa,EAAEC,eAAe,EAAyIC,mBAAmB,QAAQ,UAAU;;AAEhP;AACA,OAAO,MAAMC,eAA6B,GAAG,EAAE;;AAE/C;AACA,OAAO,MAAMC,SAAiB,GAAG,EAAE;;AAEnC;AACA,OAAO,MAAMC,YAAuB,GAAG,EAAE;;AAEzC;AACA,OAAO,MAAMC,SAAiB,GAAG,EAAE;;AAEnC;AACA,OAAO,MAAMC,SAAiB,GAAG,EAAE;;AAEnC;AACA,OAAO,MAAMC,YAAuB,GAAG,EAAE;;AAEzC;AACA,OAAO,MAAMC,UAAmB,GAAG,EAAE;;AAErC;AACA,OAAO,MAAMC,wBAAwB,GAAIC,KAAa,IAAK;EACzD,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,EAAE;;AAEhC;AACA,OAAO,MAAMC,kBAAkB,GAAG,EAAE;;AAEpC;AACA,OAAO,MAAMC,gBAAgB,GAAG,EAAE;;AAElC;AACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EACtC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EACzC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAIC,SAAiB,IAAc;EACxD,MAAMC,WAAoB,GAAG;IAC3BC,EAAE,EAAEF,SAAS,IAAI,cAAc;IAC/BG,IAAI,EAAE,cAAc;IACpBC,WAAW,EAAE,gBAAgB;IAC7BC,MAAM,EAAEzB,aAAa,CAAC0B,WAAW;IACjCC,QAAQ,EAAE1B,eAAe,CAAC2B,MAAM;IAChCC,SAAS,EAAE,sBAAsB;IACjCC,OAAO,EAAE,sBAAsB;IAC/BC,cAAc,EAAE3B,SAAS,CAAC,CAAC,CAAC;IAC5B4B,UAAU,EAAE7B,eAAe,CAAC,CAAC,CAAC;IAC9B8B,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE,sBAAsB;IACjCC,SAAS,EAAE,sBAAsB;IACjCC,YAAY,EAAEpC,mBAAmB,CAACqC;EACpC,CAAC;EACD,OAAOlB,WAAW;AACpB,CAAC;;AAED;AACA,OAAO,MAAMmB,iBAAiB,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}