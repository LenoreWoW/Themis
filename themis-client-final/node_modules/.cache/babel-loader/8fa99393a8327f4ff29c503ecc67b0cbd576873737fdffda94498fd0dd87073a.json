{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useThemeMode = () => {\n  _s();\n  // Get the initial theme mode from localStorage or use 'light' as default\n  const [themeMode, setThemeMode] = useState(() => {\n    const savedMode = localStorage.getItem('themisThemeMode');\n    return savedMode || 'light';\n  });\n  const isDarkMode = themeMode === 'dark';\n  const isLightMode = themeMode === 'light';\n\n  // Toggle between light and dark mode\n  const toggleThemeMode = () => {\n    setThemeMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n\n  // Save the theme mode to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('themisThemeMode', themeMode);\n\n    // Update the document's class for potential global styling\n    if (themeMode === 'dark') {\n      document.documentElement.classList.add('dark-mode');\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n    }\n  }, [themeMode]);\n  return {\n    themeMode,\n    isDarkMode,\n    isLightMode,\n    toggleThemeMode,\n    setThemeMode\n  };\n};\n_s(useThemeMode, \"IwR46NHFNg6HGV0bnky/k6/MFaE=\");\nexport default useThemeMode;","map":{"version":3,"names":["useState","useEffect","useThemeMode","_s","themeMode","setThemeMode","savedMode","localStorage","getItem","isDarkMode","isLightMode","toggleThemeMode","prevMode","setItem","document","documentElement","classList","add","remove"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/hooks/useThemeMode.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport type ThemeMode = 'light' | 'dark';\n\ninterface UseThemeModeReturn {\n  themeMode: ThemeMode;\n  isDarkMode: boolean;\n  isLightMode: boolean;\n  toggleThemeMode: () => void;\n  setThemeMode: (newMode: ThemeMode) => void;\n}\n\nconst useThemeMode = (): UseThemeModeReturn => {\n  // Get the initial theme mode from localStorage or use 'light' as default\n  const [themeMode, setThemeMode] = useState<ThemeMode>(() => {\n    const savedMode = localStorage.getItem('themisThemeMode');\n    return (savedMode as ThemeMode) || 'light';\n  });\n\n  const isDarkMode = themeMode === 'dark';\n  const isLightMode = themeMode === 'light';\n\n  // Toggle between light and dark mode\n  const toggleThemeMode = () => {\n    setThemeMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  };\n\n  // Save the theme mode to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('themisThemeMode', themeMode);\n    \n    // Update the document's class for potential global styling\n    if (themeMode === 'dark') {\n      document.documentElement.classList.add('dark-mode');\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n    }\n  }, [themeMode]);\n\n  return {\n    themeMode,\n    isDarkMode,\n    isLightMode,\n    toggleThemeMode,\n    setThemeMode,\n  };\n};\n\nexport default useThemeMode; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAY3C,MAAMC,YAAY,GAAGA,CAAA,KAA0B;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAY,MAAM;IAC1D,MAAMM,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACzD,OAAQF,SAAS,IAAkB,OAAO;EAC5C,CAAC,CAAC;EAEF,MAAMG,UAAU,GAAGL,SAAS,KAAK,MAAM;EACvC,MAAMM,WAAW,GAAGN,SAAS,KAAK,OAAO;;EAEzC;EACA,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC5BN,YAAY,CAAEO,QAAQ,IAAMA,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACvE,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdM,YAAY,CAACM,OAAO,CAAC,iBAAiB,EAAET,SAAS,CAAC;;IAElD;IACA,IAAIA,SAAS,KAAK,MAAM,EAAE;MACxBU,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IACrD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;IACxD;EACF,CAAC,EAAE,CAACd,SAAS,CAAC,CAAC;EAEf,OAAO;IACLA,SAAS;IACTK,UAAU;IACVC,WAAW;IACXC,eAAe;IACfN;EACF,CAAC;AACH,CAAC;AAACF,EAAA,CAlCID,YAAY;AAoClB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}