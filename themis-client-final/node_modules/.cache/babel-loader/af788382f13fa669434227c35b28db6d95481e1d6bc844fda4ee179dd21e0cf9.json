{"ast":null,"code":"var _jsxFileName = \"/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Snackbar, Alert } from '@mui/material';\n\n// Define the interface for the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with a default undefined value\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\n\n// Hook to use the notification context\nexport function useNotifications() {\n  _s();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}\n\n// Define the props interface for the provider\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\"); // Notification state interface\n// Provider component\nexport function NotificationProvider({\n  children\n}) {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [currentNotification, setCurrentNotification] = useState(undefined);\n\n  // Show a notification\n  const showAlert = (message, severity = 'info') => {\n    const newNotification = {\n      message,\n      severity,\n      key: new Date().getTime()\n    };\n    setNotifications(prevNotifications => [...prevNotifications, newNotification]);\n  };\n\n  // Clear all notifications\n  const clearAlerts = () => {\n    setNotifications([]);\n  };\n\n  // Handle notification queue\n  useEffect(() => {\n    if (notifications.length > 0 && !open) {\n      // Show the oldest notification\n      setCurrentNotification(notifications[0]);\n      setOpen(true);\n      // Remove this notification from the queue\n      setNotifications(notifications.slice(1));\n    }\n  }, [notifications, open]);\n\n  // Handle notification close\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      showAlert,\n      clearAlerts\n    },\n    children: [children, currentNotification && /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: open,\n      autoHideDuration: 6000,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleClose,\n        severity: currentNotification.severity,\n        sx: {\n          width: '100%'\n        },\n        children: currentNotification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, currentNotification.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s2(NotificationProvider, \"s1oyvzklFCESCOlkvaGEQjGz4qQ=\");\n_c = NotificationProvider;\nexport default NotificationContext;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Snackbar","Alert","jsxDEV","_jsxDEV","NotificationContext","undefined","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","open","setOpen","currentNotification","setCurrentNotification","showAlert","message","severity","newNotification","key","Date","getTime","prevNotifications","clearAlerts","length","slice","handleClose","event","reason","Provider","value","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Snackbar, Alert } from '@mui/material';\nimport { AlertColor } from '@mui/material/Alert';\nimport { useAuth } from './AuthContext';\n\n// Define the interface for the context\ninterface NotificationContextType {\n  showAlert: (message: string, severity: AlertColor) => void;\n  clearAlerts: () => void;\n}\n\n// Create the context with a default undefined value\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\n// Hook to use the notification context\nexport function useNotifications() {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}\n\n// Define the props interface for the provider\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\n// Notification state interface\ninterface Notification {\n  message: string;\n  severity: AlertColor;\n  key: number;\n}\n\n// Provider component\nexport function NotificationProvider({ children }: NotificationProviderProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [open, setOpen] = useState(false);\n  const [currentNotification, setCurrentNotification] = useState<Notification | undefined>(undefined);\n  \n  // Show a notification\n  const showAlert = (message: string, severity: AlertColor = 'info') => {\n    const newNotification: Notification = {\n      message,\n      severity,\n      key: new Date().getTime(),\n    };\n    \n    setNotifications(prevNotifications => [...prevNotifications, newNotification]);\n  };\n  \n  // Clear all notifications\n  const clearAlerts = () => {\n    setNotifications([]);\n  };\n  \n  // Handle notification queue\n  useEffect(() => {\n    if (notifications.length > 0 && !open) {\n      // Show the oldest notification\n      setCurrentNotification(notifications[0]);\n      setOpen(true);\n      // Remove this notification from the queue\n      setNotifications(notifications.slice(1));\n    }\n  }, [notifications, open]);\n  \n  // Handle notification close\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  \n  return (\n    <NotificationContext.Provider value={{ showAlert, clearAlerts }}>\n      {children}\n      {currentNotification && (\n        <Snackbar\n          key={currentNotification.key}\n          open={open}\n          autoHideDuration={6000}\n          onClose={handleClose}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        >\n          <Alert\n            onClose={handleClose}\n            severity={currentNotification.severity}\n            sx={{ width: '100%' }}\n          >\n            {currentNotification.message}\n          </Alert>\n        </Snackbar>\n      )}\n    </NotificationContext.Provider>\n  );\n}\n\nexport default NotificationContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,QAAQ,EAAEC,KAAK,QAAQ,eAAe;;AAI/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,MAAMC,mBAAmB,gBAAGR,aAAa,CAAsCS,SAAS,CAAC;;AAEzF;AACA,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAMC,OAAO,GAAGX,UAAU,CAACO,mBAAmB,CAAC;EAC/C,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,6DAA6D,CAAC;EAChF;EACA,OAAOD,OAAO;AAChB;;AAEA;AAAAD,EAAA,CARgBD,gBAAgB,mCAahC;AAOA;AACA,OAAO,SAASI,oBAAoBA,CAAC;EAAEC;AAAoC,CAAC,EAAE;EAAAC,GAAA;EAC5E,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAiB,EAAE,CAAC;EACtE,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAA2BO,SAAS,CAAC;;EAEnG;EACA,MAAMc,SAAS,GAAGA,CAACC,OAAe,EAAEC,QAAoB,GAAG,MAAM,KAAK;IACpE,MAAMC,eAA6B,GAAG;MACpCF,OAAO;MACPC,QAAQ;MACRE,GAAG,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;IAC1B,CAAC;IAEDX,gBAAgB,CAACY,iBAAiB,IAAI,CAAC,GAAGA,iBAAiB,EAAEJ,eAAe,CAAC,CAAC;EAChF,CAAC;;EAED;EACA,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBb,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd,IAAIc,aAAa,CAACe,MAAM,GAAG,CAAC,IAAI,CAACb,IAAI,EAAE;MACrC;MACAG,sBAAsB,CAACL,aAAa,CAAC,CAAC,CAAC,CAAC;MACxCG,OAAO,CAAC,IAAI,CAAC;MACb;MACAF,gBAAgB,CAACD,aAAa,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,CAAChB,aAAa,EAAEE,IAAI,CAAC,CAAC;;EAEzB;EACA,MAAMe,WAAW,GAAGA,CAACC,KAAoC,EAAEC,MAAe,KAAK;IAC7E,IAAIA,MAAM,KAAK,WAAW,EAAE;MAC1B;IACF;IACAhB,OAAO,CAAC,KAAK,CAAC;EAChB,CAAC;EAED,oBACEb,OAAA,CAACC,mBAAmB,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAEf,SAAS;MAAEQ;IAAY,CAAE;IAAAhB,QAAA,GAC7DA,QAAQ,EACRM,mBAAmB,iBAClBd,OAAA,CAACH,QAAQ;MAEPe,IAAI,EAAEA,IAAK;MACXoB,gBAAgB,EAAE,IAAK;MACvBC,OAAO,EAAEN,WAAY;MACrBO,YAAY,EAAE;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAA5B,QAAA,eAE3DR,OAAA,CAACF,KAAK;QACJmC,OAAO,EAAEN,WAAY;QACrBT,QAAQ,EAAEJ,mBAAmB,CAACI,QAAS;QACvCmB,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAA9B,QAAA,EAErBM,mBAAmB,CAACG;MAAO;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB;IAAC,GAZH5B,mBAAmB,CAACM,GAAG;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAapB,CACX;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC2B,CAAC;AAEnC;AAACjC,GAAA,CA9DeF,oBAAoB;AAAAoC,EAAA,GAApBpC,oBAAoB;AAgEpC,eAAeN,mBAAmB;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}