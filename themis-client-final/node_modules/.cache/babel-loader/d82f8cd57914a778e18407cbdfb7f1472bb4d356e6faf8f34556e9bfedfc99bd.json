{"ast":null,"code":"import{useState,useEffect}from'react';const useThemeMode=()=>{// Get the initial theme mode from localStorage or use 'light' as default\nconst[themeMode,setThemeMode]=useState(()=>{const savedMode=localStorage.getItem('themisThemeMode');return savedMode||'light';});const isDarkMode=themeMode==='dark';const isLightMode=themeMode==='light';// Toggle between light and dark mode\nconst toggleThemeMode=()=>{setThemeMode(prevMode=>prevMode==='light'?'dark':'light');};// Save the theme mode to localStorage whenever it changes\nuseEffect(()=>{localStorage.setItem('themisThemeMode',themeMode);// Update the document's class for potential global styling\nif(themeMode==='dark'){document.documentElement.classList.add('dark-mode');}else{document.documentElement.classList.remove('dark-mode');}},[themeMode]);return{themeMode,isDarkMode,isLightMode,toggleThemeMode,setThemeMode};};export default useThemeMode;","map":{"version":3,"names":["useState","useEffect","useThemeMode","themeMode","setThemeMode","savedMode","localStorage","getItem","isDarkMode","isLightMode","toggleThemeMode","prevMode","setItem","document","documentElement","classList","add","remove"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/hooks/useThemeMode.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport type ThemeMode = 'light' | 'dark';\n\ninterface UseThemeModeReturn {\n  themeMode: ThemeMode;\n  isDarkMode: boolean;\n  isLightMode: boolean;\n  toggleThemeMode: () => void;\n  setThemeMode: (newMode: ThemeMode) => void;\n}\n\nconst useThemeMode = (): UseThemeModeReturn => {\n  // Get the initial theme mode from localStorage or use 'light' as default\n  const [themeMode, setThemeMode] = useState<ThemeMode>(() => {\n    const savedMode = localStorage.getItem('themisThemeMode');\n    return (savedMode as ThemeMode) || 'light';\n  });\n\n  const isDarkMode = themeMode === 'dark';\n  const isLightMode = themeMode === 'light';\n\n  // Toggle between light and dark mode\n  const toggleThemeMode = () => {\n    setThemeMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  };\n\n  // Save the theme mode to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('themisThemeMode', themeMode);\n    \n    // Update the document's class for potential global styling\n    if (themeMode === 'dark') {\n      document.documentElement.classList.add('dark-mode');\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n    }\n  }, [themeMode]);\n\n  return {\n    themeMode,\n    isDarkMode,\n    isLightMode,\n    toggleThemeMode,\n    setThemeMode,\n  };\n};\n\nexport default useThemeMode; "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAY3C,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAA0B,CAC7C;AACA,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGJ,QAAQ,CAAY,IAAM,CAC1D,KAAM,CAAAK,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CACzD,MAAQ,CAAAF,SAAS,EAAkB,OAAO,CAC5C,CAAC,CAAC,CAEF,KAAM,CAAAG,UAAU,CAAGL,SAAS,GAAK,MAAM,CACvC,KAAM,CAAAM,WAAW,CAAGN,SAAS,GAAK,OAAO,CAEzC;AACA,KAAM,CAAAO,eAAe,CAAGA,CAAA,GAAM,CAC5BN,YAAY,CAAEO,QAAQ,EAAMA,QAAQ,GAAK,OAAO,CAAG,MAAM,CAAG,OAAQ,CAAC,CACvE,CAAC,CAED;AACAV,SAAS,CAAC,IAAM,CACdK,YAAY,CAACM,OAAO,CAAC,iBAAiB,CAAET,SAAS,CAAC,CAElD;AACA,GAAIA,SAAS,GAAK,MAAM,CAAE,CACxBU,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC,CACrD,CAAC,IAAM,CACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC,CACxD,CACF,CAAC,CAAE,CAACd,SAAS,CAAC,CAAC,CAEf,MAAO,CACLA,SAAS,CACTK,UAAU,CACVC,WAAW,CACXC,eAAe,CACfN,YACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}