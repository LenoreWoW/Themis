{"ast":null,"code":"import{UserRole}from'../types';/**\n * Checks if a user with the given role can approve projects\n * @param role - The user's role\n * @returns Boolean indicating if the user can approve projects\n */export const canApproveProjects=role=>{return[UserRole.ADMIN,UserRole.MAIN_PMO,UserRole.EXECUTIVE].includes(role);};// Function to check if user can manage projects (create, update, delete)\nexport const canManageProjects=role=>{return[UserRole.ADMIN,UserRole.PROJECT_MANAGER,UserRole.SUB_PMO,UserRole.MAIN_PMO].includes(role);};// Function to check if user can add tasks to a project\nexport const canAddTasks=role=>{return[UserRole.ADMIN,UserRole.PROJECT_MANAGER,UserRole.TEAM_LEAD,UserRole.SUB_PMO,UserRole.MAIN_PMO].includes(role);};// Function to check if user can request tasks for a project\nexport const canRequestTasks=role=>{return[UserRole.ADMIN,UserRole.PROJECT_MANAGER,UserRole.TEAM_LEAD,UserRole.DEVELOPER,UserRole.DESIGNER,UserRole.QA,UserRole.SUB_PMO,UserRole.MAIN_PMO].includes(role);};// Function to check if user can view all projects\nexport const canViewAllProjects=role=>{return[UserRole.ADMIN,UserRole.SUB_PMO,UserRole.MAIN_PMO,UserRole.EXECUTIVE].includes(role);};// Function to check if user can manage departments (create, update, delete)\nexport const canManageDepartments=role=>{return[UserRole.ADMIN,UserRole.EXECUTIVE,UserRole.MAIN_PMO,UserRole.DEPARTMENT_DIRECTOR].includes(role);};// Function to check if user can manage legacy projects (only SUB_PMO and MAIN_PMO roles)\nexport const canManageLegacyProjects=role=>{return[UserRole.ADMIN,UserRole.SUB_PMO,UserRole.MAIN_PMO].includes(role);};","map":{"version":3,"names":["UserRole","canApproveProjects","role","ADMIN","MAIN_PMO","EXECUTIVE","includes","canManageProjects","PROJECT_MANAGER","SUB_PMO","canAddTasks","TEAM_LEAD","canRequestTasks","DEVELOPER","DESIGNER","QA","canViewAllProjects","canManageDepartments","DEPARTMENT_DIRECTOR","canManageLegacyProjects"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/permissions.ts"],"sourcesContent":["import { UserRole } from '../types';\n\n/**\n * Checks if a user with the given role can approve projects\n * @param role - The user's role\n * @returns Boolean indicating if the user can approve projects\n */\nexport const canApproveProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.MAIN_PMO,\n    UserRole.EXECUTIVE\n  ].includes(role);\n};\n\n// Function to check if user can manage projects (create, update, delete)\nexport const canManageProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.PROJECT_MANAGER,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n};\n\n// Function to check if user can add tasks to a project\nexport const canAddTasks = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.PROJECT_MANAGER,\n    UserRole.TEAM_LEAD,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n};\n\n// Function to check if user can request tasks for a project\nexport const canRequestTasks = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.PROJECT_MANAGER,\n    UserRole.TEAM_LEAD,\n    UserRole.DEVELOPER,\n    UserRole.DESIGNER,\n    UserRole.QA,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n};\n\n// Function to check if user can view all projects\nexport const canViewAllProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO,\n    UserRole.EXECUTIVE\n  ].includes(role);\n};\n\n// Function to check if user can manage departments (create, update, delete)\nexport const canManageDepartments = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.EXECUTIVE,\n    UserRole.MAIN_PMO,\n    UserRole.DEPARTMENT_DIRECTOR\n  ].includes(role);\n};\n\n// Function to check if user can manage legacy projects (only SUB_PMO and MAIN_PMO roles)\nexport const canManageLegacyProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n}; "],"mappings":"AAAA,OAASA,QAAQ,KAAQ,UAAU,CAEnC;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,kBAAkB,CAAIC,IAAc,EAAc,CAC7D,MAAO,CACLF,QAAQ,CAACG,KAAK,CACdH,QAAQ,CAACI,QAAQ,CACjBJ,QAAQ,CAACK,SAAS,CACnB,CAACC,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,iBAAiB,CAAIL,IAAc,EAAc,CAC5D,MAAO,CACLF,QAAQ,CAACG,KAAK,CACdH,QAAQ,CAACQ,eAAe,CACxBR,QAAQ,CAACS,OAAO,CAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,WAAW,CAAIR,IAAc,EAAc,CACtD,MAAO,CACLF,QAAQ,CAACG,KAAK,CACdH,QAAQ,CAACQ,eAAe,CACxBR,QAAQ,CAACW,SAAS,CAClBX,QAAQ,CAACS,OAAO,CAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC,CAED;AACA,MAAO,MAAM,CAAAU,eAAe,CAAIV,IAAc,EAAc,CAC1D,MAAO,CACLF,QAAQ,CAACG,KAAK,CACdH,QAAQ,CAACQ,eAAe,CACxBR,QAAQ,CAACW,SAAS,CAClBX,QAAQ,CAACa,SAAS,CAClBb,QAAQ,CAACc,QAAQ,CACjBd,QAAQ,CAACe,EAAE,CACXf,QAAQ,CAACS,OAAO,CAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC,CAED;AACA,MAAO,MAAM,CAAAc,kBAAkB,CAAId,IAAc,EAAc,CAC7D,MAAO,CACLF,QAAQ,CAACG,KAAK,CACdH,QAAQ,CAACS,OAAO,CAChBT,QAAQ,CAACI,QAAQ,CACjBJ,QAAQ,CAACK,SAAS,CACnB,CAACC,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC,CAED;AACA,MAAO,MAAM,CAAAe,oBAAoB,CAAIf,IAAc,EAAc,CAC/D,MAAO,CACLF,QAAQ,CAACG,KAAK,CACdH,QAAQ,CAACK,SAAS,CAClBL,QAAQ,CAACI,QAAQ,CACjBJ,QAAQ,CAACkB,mBAAmB,CAC7B,CAACZ,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC,CAED;AACA,MAAO,MAAM,CAAAiB,uBAAuB,CAAIjB,IAAc,EAAc,CAClE,MAAO,CACLF,QAAQ,CAACG,KAAK,CACdH,QAAQ,CAACS,OAAO,CAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}