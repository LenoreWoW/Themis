{"ast":null,"code":"import { UserRole } from '../types';\n\n/**\n * Checks if a user with the given role can approve projects\n * @param role - The user's role\n * @returns Boolean indicating if the user can approve projects\n */\nexport const canApproveProjects = role => {\n  return [UserRole.ADMIN, UserRole.MAIN_PMO, UserRole.EXECUTIVE].includes(role);\n};\n\n// Function to check if user can manage projects (create, update, delete)\nexport const canManageProjects = role => {\n  return [UserRole.ADMIN, UserRole.PROJECT_MANAGER, UserRole.SUB_PMO, UserRole.MAIN_PMO].includes(role);\n};\n\n// Function to check if user can add tasks to a project\nexport const canAddTasks = role => {\n  return [UserRole.ADMIN, UserRole.PROJECT_MANAGER, UserRole.TEAM_LEAD, UserRole.SUB_PMO, UserRole.MAIN_PMO].includes(role);\n};\n\n// Function to check if user can request tasks for a project\nexport const canRequestTasks = role => {\n  return [UserRole.ADMIN, UserRole.PROJECT_MANAGER, UserRole.TEAM_LEAD, UserRole.DEVELOPER, UserRole.DESIGNER, UserRole.QA, UserRole.SUB_PMO, UserRole.MAIN_PMO].includes(role);\n};\n\n// Function to check if user can view all projects\nexport const canViewAllProjects = role => {\n  return [UserRole.ADMIN, UserRole.SUB_PMO, UserRole.MAIN_PMO, UserRole.EXECUTIVE].includes(role);\n};\n\n// Function to check if user can manage departments (create, update, delete)\nexport const canManageDepartments = role => {\n  return [UserRole.ADMIN, UserRole.EXECUTIVE, UserRole.MAIN_PMO, UserRole.DEPARTMENT_DIRECTOR].includes(role);\n};\n\n// Function to check if user can manage legacy projects (only SUB_PMO and MAIN_PMO roles)\nexport const canManageLegacyProjects = role => {\n  return [UserRole.ADMIN, UserRole.SUB_PMO, UserRole.MAIN_PMO].includes(role);\n};","map":{"version":3,"names":["UserRole","canApproveProjects","role","ADMIN","MAIN_PMO","EXECUTIVE","includes","canManageProjects","PROJECT_MANAGER","SUB_PMO","canAddTasks","TEAM_LEAD","canRequestTasks","DEVELOPER","DESIGNER","QA","canViewAllProjects","canManageDepartments","DEPARTMENT_DIRECTOR","canManageLegacyProjects"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/permissions.ts"],"sourcesContent":["import { UserRole } from '../types';\n\n/**\n * Checks if a user with the given role can approve projects\n * @param role - The user's role\n * @returns Boolean indicating if the user can approve projects\n */\nexport const canApproveProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.MAIN_PMO,\n    UserRole.EXECUTIVE\n  ].includes(role);\n};\n\n// Function to check if user can manage projects (create, update, delete)\nexport const canManageProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.PROJECT_MANAGER,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n};\n\n// Function to check if user can add tasks to a project\nexport const canAddTasks = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.PROJECT_MANAGER,\n    UserRole.TEAM_LEAD,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n};\n\n// Function to check if user can request tasks for a project\nexport const canRequestTasks = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.PROJECT_MANAGER,\n    UserRole.TEAM_LEAD,\n    UserRole.DEVELOPER,\n    UserRole.DESIGNER,\n    UserRole.QA,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n};\n\n// Function to check if user can view all projects\nexport const canViewAllProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO,\n    UserRole.EXECUTIVE\n  ].includes(role);\n};\n\n// Function to check if user can manage departments (create, update, delete)\nexport const canManageDepartments = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.EXECUTIVE,\n    UserRole.MAIN_PMO,\n    UserRole.DEPARTMENT_DIRECTOR\n  ].includes(role);\n};\n\n// Function to check if user can manage legacy projects (only SUB_PMO and MAIN_PMO roles)\nexport const canManageLegacyProjects = (role: UserRole): boolean => {\n  return [\n    UserRole.ADMIN,\n    UserRole.SUB_PMO,\n    UserRole.MAIN_PMO\n  ].includes(role);\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,UAAU;;AAEnC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAIC,IAAc,IAAc;EAC7D,OAAO,CACLF,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACI,QAAQ,EACjBJ,QAAQ,CAACK,SAAS,CACnB,CAACC,QAAQ,CAACJ,IAAI,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAIL,IAAc,IAAc;EAC5D,OAAO,CACLF,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACQ,eAAe,EACxBR,QAAQ,CAACS,OAAO,EAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAIR,IAAc,IAAc;EACtD,OAAO,CACLF,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACQ,eAAe,EACxBR,QAAQ,CAACW,SAAS,EAClBX,QAAQ,CAACS,OAAO,EAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMU,eAAe,GAAIV,IAAc,IAAc;EAC1D,OAAO,CACLF,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACQ,eAAe,EACxBR,QAAQ,CAACW,SAAS,EAClBX,QAAQ,CAACa,SAAS,EAClBb,QAAQ,CAACc,QAAQ,EACjBd,QAAQ,CAACe,EAAE,EACXf,QAAQ,CAACS,OAAO,EAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMc,kBAAkB,GAAId,IAAc,IAAc;EAC7D,OAAO,CACLF,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACS,OAAO,EAChBT,QAAQ,CAACI,QAAQ,EACjBJ,QAAQ,CAACK,SAAS,CACnB,CAACC,QAAQ,CAACJ,IAAI,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMe,oBAAoB,GAAIf,IAAc,IAAc;EAC/D,OAAO,CACLF,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACK,SAAS,EAClBL,QAAQ,CAACI,QAAQ,EACjBJ,QAAQ,CAACkB,mBAAmB,CAC7B,CAACZ,QAAQ,CAACJ,IAAI,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMiB,uBAAuB,GAAIjB,IAAc,IAAc;EAClE,OAAO,CACLF,QAAQ,CAACG,KAAK,EACdH,QAAQ,CAACS,OAAO,EAChBT,QAAQ,CAACI,QAAQ,CAClB,CAACE,QAAQ,CAACJ,IAAI,CAAC;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}