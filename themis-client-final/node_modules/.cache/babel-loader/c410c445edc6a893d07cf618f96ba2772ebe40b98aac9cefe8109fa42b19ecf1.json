{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL, FEATURES } from '../config';\nimport { v4 as uuidv4 } from 'uuid';\nimport { UserRole, TaskPriority, RiskStatus, RiskImpact, IssueStatus, TaskRequestStatus } from '../types';\nimport { mockProjects, mockUsers, mockDepartments as importedMockDepartments, createDefaultTasks } from './mockData';\nimport AuthService from './AuthService';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Helper function to simulate delay\nconst delay = () => new Promise(resolve => setTimeout(resolve, 500));\n\n// Helper to simulate network delay\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// Standard delay duration\nconst simulateDelay = () => sleep(Math.random() * 300 + 200); // 200-500ms\n\n// Create empty mock objects for all data types\nconst mockITDepartment = {\n  id: '',\n  name: '',\n  description: '',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\n// Empty arrays for all mock data\nconst defaultProjectId = '';\nconst mockTasks = [];\nconst defaultProjects = [];\nconst defaultMeetings = [];\n\n// Empty test users\nconst testUsers = {\n  admin: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.ADMIN,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager1: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager2: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  developer: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.DEVELOPER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  designer: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.DESIGNER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n};\nfunction getMockData(endpoint, config) {\n  return new Promise(resolve => {\n    // Simulate network delay\n    setTimeout(() => {\n      console.log(`[MOCK] GET request to ${endpoint}`);\n\n      // Handle departments\n      if (endpoint.startsWith('/departments')) {\n        var _endpoint$match;\n        const departmentId = (_endpoint$match = endpoint.match(/\\/departments\\/([^\\/]+)/)) === null || _endpoint$match === void 0 ? void 0 : _endpoint$match[1];\n        if (departmentId) {\n          const department = importedMockDepartments.find(d => d.id === departmentId);\n          return resolve(department || null);\n        }\n        return resolve(importedMockDepartments);\n      }\n\n      // Handle users\n      if (endpoint.startsWith('/users')) {\n        var _endpoint$match2;\n        const userId = (_endpoint$match2 = endpoint.match(/\\/users\\/([^\\/]+)/)) === null || _endpoint$match2 === void 0 ? void 0 : _endpoint$match2[1];\n        if (userId) {\n          const user = mockUsers.find(u => u.id === userId);\n          return resolve(user || null);\n        }\n        return resolve(mockUsers);\n      }\n\n      // Handle projects\n      if (endpoint.startsWith('/projects')) {\n        var _endpoint$match3;\n        const projectId = (_endpoint$match3 = endpoint.match(/\\/projects\\/([^\\/]+)/)) === null || _endpoint$match3 === void 0 ? void 0 : _endpoint$match3[1];\n        if (endpoint.includes('/tasks')) {\n          // Handle tasks for a specific project\n          if (projectId) {\n            const project = mockProjects.find(p => p.id === projectId);\n            if (project) {\n              const tasks = createDefaultTasks(project.id);\n              return resolve(tasks);\n            }\n          }\n          return resolve([]);\n        }\n        if (projectId) {\n          // Return a specific project\n          const project = mockProjects.find(p => p.id === projectId);\n          return resolve(project || null);\n        }\n\n        // Return all projects, possibly filtered\n        let filteredProjects = [...mockProjects];\n\n        // Handle query parameters for filtering\n        if (config !== null && config !== void 0 && config.params) {\n          const {\n            departmentId,\n            status,\n            priority,\n            search\n          } = config.params;\n          if (departmentId) {\n            filteredProjects = filteredProjects.filter(p => p.departmentId === departmentId);\n          }\n          if (status) {\n            filteredProjects = filteredProjects.filter(p => p.status === status);\n          }\n          if (priority) {\n            filteredProjects = filteredProjects.filter(p => p.priority === priority);\n          }\n          if (search) {\n            const searchLower = search.toLowerCase();\n            filteredProjects = filteredProjects.filter(p => p.name.toLowerCase().includes(searchLower) || p.description.toLowerCase().includes(searchLower));\n          }\n        }\n        return resolve(filteredProjects);\n      }\n\n      // If no handler for this endpoint\n      console.log(`[MOCK] No handler for endpoint: ${endpoint}`);\n      resolve([]);\n    }, 600); // Simulate network delay\n  });\n}\n\n// Handle POST requests for mock data\nfunction postMockData(endpoint, data) {\n  return new Promise(resolve => {\n    // Simulate network delay\n    setTimeout(() => {\n      console.log(`[MOCK] POST request to ${endpoint}`, data);\n\n      // Handle project creation\n      if (endpoint === '/projects') {\n        const newProject = {\n          ...data,\n          id: `p${mockProjects.length + 1}`,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          progress: 0\n        };\n\n        // Link department\n        if (data.departmentId) {\n          const department = importedMockDepartments.find(d => d.id === data.departmentId);\n          if (department) {\n            newProject.department = department;\n          }\n        }\n\n        // Link project manager\n        if (data.projectManagerId) {\n          const manager = mockUsers.find(u => u.id === data.projectManagerId);\n          if (manager) {\n            newProject.projectManager = manager;\n          }\n        }\n\n        // Link team members\n        if (data.teamMemberIds && Array.isArray(data.teamMemberIds)) {\n          newProject.teamMembers = data.teamMemberIds.map(id => mockUsers.find(u => u.id === id)).filter(Boolean);\n        }\n        mockProjects.push(newProject);\n        return resolve(newProject);\n      }\n\n      // If no handler for this endpoint\n      console.log(`[MOCK] No POST handler for endpoint: ${endpoint}`);\n      resolve(data);\n    }, 800);\n  });\n}\n\n/**\n * Handles the API response\n */\nfunction handleResponse(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return {\n      data: response.data,\n      success: true\n    };\n  } else {\n    return {\n      data: response.data,\n      success: false,\n      message: `Request failed with status ${response.status}`\n    };\n  }\n}\n\n/**\n * Main API request function that handles authentication and error handling\n */\nexport const apiRequest = async (endpoint, method = 'GET', data) => {\n  const USE_MOCK_DATA = true; // Set to true for development without backend\n\n  try {\n    const token = AuthService.getToken();\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    if (USE_MOCK_DATA) {\n      // Return mock data (with persistence)\n      console.log(`Using mock data for endpoint: ${endpoint}, method: ${method}`);\n      if (method === 'GET') {\n        const responseData = await getMockData(endpoint, {\n          params: data\n        });\n        return {\n          data: responseData,\n          success: true\n        };\n      } else if (method === 'POST') {\n        const responseData = await postMockData(endpoint, data);\n        return {\n          data: responseData,\n          success: true\n        };\n      } else {\n        // For other methods, just return success\n        return {\n          data: data || {},\n          success: true\n        };\n      }\n    }\n\n    // Real API request\n    const config = {\n      method,\n      url: endpoint,\n      headers,\n      ...(method === 'GET' ? {\n        params: data\n      } : {\n        data\n      })\n    };\n    const response = await axios(config);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('API request failed:', error);\n    if (USE_MOCK_DATA) {\n      console.log(`Falling back to mock data for endpoint: ${endpoint}`);\n      if (method === 'GET') {\n        const responseData = await getMockData(endpoint, {\n          params: data\n        });\n        return {\n          data: responseData,\n          success: true\n        };\n      } else if (method === 'POST') {\n        const responseData = await postMockData(endpoint, data);\n        return {\n          data: responseData,\n          success: true\n        };\n      }\n    }\n    throw error;\n  }\n};\n\n// Default mock risks\nconst createDefaultRisks = projectId => [{\n  id: '1',\n  projectId,\n  title: 'Data Migration Risk',\n  description: 'Risk of data loss during migration process',\n  status: RiskStatus.IDENTIFIED,\n  impact: RiskImpact.HIGH,\n  probability: 70,\n  mitigation: 'Create multiple backups before migration and perform test migrations on sample data',\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-10T00:00:00Z',\n  updatedAt: '2023-01-10T00:00:00Z'\n}, {\n  id: '2',\n  projectId,\n  title: 'Resource Availability Risk',\n  description: 'Risk of key team members being unavailable during critical project phases',\n  status: RiskStatus.ASSESSED,\n  impact: RiskImpact.MEDIUM,\n  probability: 50,\n  mitigation: 'Develop contingency plans and cross-train team members',\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-15T00:00:00Z',\n  updatedAt: '2023-01-15T00:00:00Z'\n}];\n\n// Default mock issues\nconst createDefaultIssues = projectId => [{\n  id: '1',\n  projectId,\n  title: 'Integration Failure with Legacy System',\n  description: 'The new system cannot properly integrate with the existing legacy system',\n  status: IssueStatus.OPEN,\n  impact: RiskImpact.HIGH,\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-02-10T00:00:00Z',\n  updatedAt: '2023-02-10T00:00:00Z'\n}, {\n  id: '2',\n  projectId,\n  title: 'Performance Bottleneck in Module A',\n  description: 'Module A performance is not meeting expected throughput requirements',\n  status: IssueStatus.IN_PROGRESS,\n  impact: RiskImpact.MEDIUM,\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-02-15T00:00:00Z',\n  updatedAt: '2023-02-20T00:00:00Z'\n}, {\n  id: '3',\n  projectId,\n  title: 'Security Vulnerability in Authentication',\n  description: 'Security audit identified a potential vulnerability in the authentication process',\n  status: IssueStatus.RESOLVED,\n  impact: RiskImpact.CRITICAL,\n  resolutionSummary: 'Implemented updated security protocols and fixed the vulnerability with patch 1.2.3',\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-25T00:00:00Z',\n  updatedAt: '2023-02-05T00:00:00Z'\n}];\n\n// Helper function to simulate login\nexport const login = async (email, password) => {\n  // Return a minimal user object\n  return {\n    success: true,\n    data: {\n      id: '',\n      username: '',\n      firstName: '',\n      lastName: '',\n      email: email || '',\n      role: UserRole.ADMIN,\n      // Still need admin role for access\n      department: {\n        id: '',\n        name: '',\n        description: ''\n      },\n      isActive: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    message: 'Login successful'\n  };\n};\nconst defaultUsers = [{\n  id: '1',\n  username: 'john.doe',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john.doe@themis.com',\n  role: UserRole.PROJECT_MANAGER,\n  department: importedMockDepartments[0],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '2',\n  username: 'jane.smith',\n  firstName: 'Jane',\n  lastName: 'Smith',\n  email: 'jane.smith@themis.com',\n  role: UserRole.DEVELOPER,\n  department: importedMockDepartments[0],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '3',\n  username: 'mike.johnson',\n  firstName: 'Mike',\n  lastName: 'Johnson',\n  email: 'mike.johnson@themis.com',\n  role: UserRole.DESIGNER,\n  department: importedMockDepartments[1],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '4',\n  username: 'sarah.wilson',\n  firstName: 'Sarah',\n  lastName: 'Wilson',\n  email: 'sarah.wilson@themis.com',\n  role: UserRole.DEVELOPER,\n  department: importedMockDepartments[0],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '5',\n  username: 'david.brown',\n  firstName: 'David',\n  lastName: 'Brown',\n  email: 'david.brown@themis.com',\n  role: UserRole.PROJECT_MANAGER,\n  department: importedMockDepartments[2],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}];\nconst assignments = {\n  getAllAssignments: async token => {\n    await delay();\n    return {\n      data: [],\n      success: true\n    };\n  },\n  getAssignmentById: async (id, token) => {\n    await delay();\n    return null;\n  },\n  createAssignment: async (data, token) => {\n    await delay();\n    const newAssignment = {\n      id: '',\n      ...data,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    return {\n      success: true,\n      data: newAssignment\n    };\n  },\n  updateAssignment: async (id, data, token) => {\n    await delay();\n    return {\n      success: false,\n      error: 'Assignment not found'\n    };\n  },\n  deleteAssignment: async (id, token) => {\n    await delay();\n    return {\n      success: true\n    };\n  }\n};\n\n// Create a named API object to export instead of using anonymous default export\nconst apiRoutes = {\n  // Auth endpoints\n  auth: {\n    login: adIdentifier => {\n      // Mock implementation for testing without backend\n      console.log('Using mock login implementation');\n      return Promise.resolve({\n        userId: '1',\n        username: adIdentifier,\n        role: UserRole.ADMIN,\n        // Defaulting to ADMIN for testing\n        departmentId: '1',\n        token: 'mock-token-' + Date.now(),\n        success: true,\n        message: 'Login successful'\n      });\n    },\n    refreshToken: refreshToken => apiRequest('/api/auth/refresh', 'POST', {\n      refreshToken\n    }),\n    logout: token => apiRequest('/api/auth/logout', 'POST', {})\n  },\n  // User endpoints\n  users: {\n    getCurrentUser: async token => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'User not found'\n      };\n    },\n    getAllUsers: async token => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getUserById: async (userId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'User not found'\n      };\n    },\n    createUser: async (userData, token) => {\n      await delay();\n      const newUser = {\n        id: '',\n        username: userData.username || '',\n        firstName: userData.firstName || '',\n        lastName: userData.lastName || '',\n        email: userData.email || '',\n        role: userData.role || UserRole.DEVELOPER,\n        isActive: true,\n        department: {},\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      return {\n        data: newUser,\n        success: true\n      };\n    },\n    updateUser: async (userId, userData, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'User not found'\n      };\n    },\n    deleteUser: async (userId, token) => {\n      await delay();\n      return {\n        success: true\n      };\n    },\n    assignRole: (userId, role, token) => apiRequest(`/api/users/${userId}/role`, 'PUT', {\n      role\n    }),\n    assignDepartment: (userId, departmentId, token) => apiRequest(`/api/users/${userId}/department`, 'PUT', {\n      departmentId\n    }),\n    getAllDepartments: token => apiRequest('/api/users/departments', 'GET')\n  },\n  // Project endpoints\n  projects: {\n    getAllProjects: async token => {\n      await simulateDelay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getProjectById: async (id, token) => {\n      await simulateDelay();\n      return {\n        data: null,\n        success: false,\n        error: 'Project not found'\n      };\n    },\n    createProject: async (projectData, token) => {\n      await simulateDelay();\n      const newProject = {\n        id: projectData.id || uuidv4(),\n        ...projectData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      return {\n        data: newProject,\n        success: true\n      };\n    },\n    updateProject: async (projectId, updatedData, token) => {\n      try {\n        await simulateDelay();\n        return {\n          data: null,\n          success: false,\n          error: 'Project not found'\n        };\n      } catch (error) {\n        console.error('Error updating project:', error);\n        throw error;\n      }\n    },\n    deleteProject: async (projectId, token) => {\n      await simulateDelay();\n      return {\n        data: {\n          message: 'Project deleted successfully'\n        },\n        success: true\n      };\n    },\n    uploadAttachment: (projectId, formData, token) => apiRequest(`/api/projects/${projectId}/attachments`, 'POST', formData),\n    getAttachments: (projectId, token) => apiRequest(`/api/projects/${projectId}/attachments`, 'GET'),\n    deleteAttachment: (projectId, attachmentId, token) => apiRequest(`/api/projects/${projectId}/attachments/${attachmentId}`, 'DELETE'),\n    getProject: async (projectId, token) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/projects/${projectId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n\n        // For now, return mock data\n        return {\n          data: {\n            id: projectId,\n            name: \"Mock Project\",\n            description: \"This is a mock project returned by the API\",\n            startDate: new Date().toISOString(),\n            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            status: \"IN_PROGRESS\",\n            priority: \"MEDIUM\",\n            budget: 100000,\n            progress: 50,\n            department: {\n              id: \"dept-1\",\n              name: \"IT Department\"\n            },\n            projectManager: {\n              id: \"user-1\",\n              firstName: \"John\",\n              lastName: \"Doe\"\n            },\n            approvalStatus: \"SUBMITTED\",\n            comments: \"This is a sample comment on the project\",\n            reviewHistory: [],\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching project:', error);\n        throw error;\n      }\n    }\n  },\n  // Task endpoints\n  tasks: {\n    getAllTasks: async (projectId, token) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getAllIndependentTasks: async token => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getTaskById: async (projectId, taskId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    getIndependentTaskById: async (taskId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    createTask: async (projectId, taskData, token) => {\n      await delay();\n      return {\n        data: {\n          ...taskData,\n          id: ''\n        },\n        success: true\n      };\n    },\n    createIndependentTask: async (taskData, token) => {\n      await delay();\n      return {\n        data: {\n          ...taskData,\n          id: ''\n        },\n        success: true\n      };\n    },\n    updateTask: async (projectId, taskId, taskData, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    updateIndependentTask: async (taskId, taskData, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    deleteTask: async (projectId, taskId, token) => {\n      await delay();\n      return {\n        success: true\n      };\n    },\n    deleteIndependentTask: async (taskId, token) => {\n      await delay();\n      return {\n        success: true\n      };\n    },\n    // Add task comment\n    addComment: async (projectId, taskId, commentData, token) => {\n      if (FEATURES.OFFLINE_MODE) {\n        // In offline mode, simulate API response\n        await simulateDelay();\n\n        // Get existing tasks from localStorage\n        const allTasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n\n        // Find the specific task to add the comment to\n        const taskIndex = allTasks.findIndex(t => t.id === taskId && t.projectId === projectId);\n        if (taskIndex !== -1) {\n          // Create a new comment\n          const newComment = {\n            id: `comment-${Date.now()}`,\n            taskId,\n            text: commentData.text,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            author: {\n              id: commentData.authorId,\n              firstName: commentData.authorFirstName || 'User',\n              lastName: commentData.authorLastName || commentData.authorId\n            }\n          };\n\n          // Add comment to the task\n          if (!allTasks[taskIndex].comments) {\n            allTasks[taskIndex].comments = [];\n          }\n          allTasks[taskIndex].comments.push(newComment);\n\n          // Save back to localStorage\n          localStorage.setItem('tasks', JSON.stringify(allTasks));\n          return {\n            success: true,\n            data: newComment,\n            message: 'Comment added successfully'\n          };\n        } else {\n          throw new Error('Task not found');\n        }\n      } else {\n        // In online mode, make actual API call\n        const response = await axios.post(`${API_BASE_URL}/projects/${projectId}/tasks/${taskId}/comments`, commentData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return {\n          data: [],\n          success: true\n        };\n      }\n    }\n  },\n  // Risk endpoints\n  risks: {\n    getAllRisks: async (projectId, token) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getRiskById: async (projectId, riskId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Risk not found'\n      };\n    },\n    createRisk: async (projectId, riskData, token) => {\n      await delay();\n      return {\n        data: {\n          ...riskData,\n          id: ''\n        },\n        success: true\n      };\n    },\n    updateRisk: async (projectId, riskId, riskData, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Risk not found'\n      };\n    },\n    deleteRisk: async (projectId, riskId, token) => {\n      await delay();\n      return {\n        success: true\n      };\n    }\n  },\n  // Issue endpoints\n  issues: {\n    getAllIssues: async (projectId, token) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getIssueById: async (projectId, issueId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Issue not found'\n      };\n    },\n    createIssue: async (projectId, issueData, token) => {\n      await delay();\n      return {\n        data: {\n          ...issueData,\n          id: ''\n        },\n        success: true\n      };\n    },\n    updateIssue: async (projectId, issueId, issueData, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Issue not found'\n      };\n    },\n    deleteIssue: async (projectId, issueId, token) => {\n      await delay();\n      return {\n        success: true\n      };\n    }\n  },\n  // Task Request endpoints\n  taskRequests: {\n    createTaskRequest: async (requestData, token) => {\n      await delay();\n      // Create a minimal TaskRequest object to satisfy type requirements\n      const defaultTaskRequest = {\n        id: uuidv4(),\n        title: requestData.title || '',\n        description: requestData.description || '',\n        priority: requestData.priority || TaskPriority.MEDIUM,\n        status: TaskRequestStatus.PENDING,\n        requestedBy: requestData.requestedBy || {},\n        projectId: requestData.projectId || '',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        ...requestData\n      };\n      return {\n        data: defaultTaskRequest,\n        success: true\n      };\n    },\n    getTaskRequestsByProject: async (projectId, token) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getTaskRequestById: async (requestId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    },\n    updateTaskRequestStatus: async (requestId, status, reviewNotes, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    },\n    approveTaskRequest: async (requestId, reviewNotes, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    },\n    rejectTaskRequest: async (requestId, reviewNotes, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    }\n  },\n  // Assignment endpoints\n  assignments,\n  auditLogs: {\n    getAuditLogs: async token => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getAuditLogById: async (logId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Audit log not found'\n      };\n    }\n  },\n  // Department endpoints\n  departments: {\n    getAllDepartments: async token => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getDepartmentById: async (departmentId, token) => {\n      await delay();\n      return null;\n    },\n    createDepartment: async (departmentData, token) => {\n      await delay();\n      const newDepartment = {\n        id: '',\n        name: departmentData.name || '',\n        description: departmentData.description || '',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      return {\n        data: newDepartment,\n        success: true\n      };\n    },\n    updateDepartment: async (departmentId, departmentData, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Department not found'\n      };\n    },\n    deleteDepartment: async (departmentId, token) => {\n      await delay();\n      return {\n        data: {\n          success: true,\n          message: \"Department deleted successfully\"\n        }\n      };\n    }\n  },\n  // Change Request endpoints\n  changeRequests: {\n    getChangeRequestsByProject: async (projectId, token) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getChangeRequestById: async (requestId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n    createChangeRequest: async (requestData, token) => {\n      await delay();\n      return {\n        data: {\n          id: '',\n          ...requestData\n        },\n        success: true\n      };\n    },\n    updateChangeRequestStatus: async (requestId, status, reviewNotes, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n    approveChangeRequest: async (requestId, reviewNotes, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n    rejectChangeRequest: async (requestId, reviewNotes, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n    getAllChangeRequests: async token => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    }\n  },\n  // Add meetings API with correct types\n  meetings: {\n    getAllMeetings: async token => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    getMeetingById: async (meetingId, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Meeting not found'\n      };\n    },\n    createMeeting: async (meetingData, token) => {\n      await delay();\n      const newMeeting = {\n        id: '',\n        title: meetingData.title || '',\n        description: meetingData.description || '',\n        startTime: meetingData.startTime || new Date().toISOString(),\n        endTime: meetingData.endTime || new Date().toISOString(),\n        organizer: {},\n        participants: [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      return {\n        data: newMeeting,\n        success: true\n      };\n    },\n    updateMeeting: async (meetingId, meetingData, token) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Meeting not found'\n      };\n    },\n    deleteMeeting: async (meetingId, token) => {\n      await delay();\n      return {\n        success: true\n      };\n    }\n  }\n};\nexport default apiRoutes;","map":{"version":3,"names":["axios","API_BASE_URL","FEATURES","v4","uuidv4","UserRole","TaskPriority","RiskStatus","RiskImpact","IssueStatus","TaskRequestStatus","mockProjects","mockUsers","mockDepartments","importedMockDepartments","createDefaultTasks","AuthService","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","delay","Promise","resolve","setTimeout","sleep","ms","simulateDelay","Math","random","mockITDepartment","id","name","description","createdAt","Date","toISOString","updatedAt","defaultProjectId","mockTasks","defaultProjects","defaultMeetings","testUsers","admin","username","firstName","lastName","email","role","ADMIN","department","isActive","manager1","MANAGER","manager2","developer","DEVELOPER","designer","DESIGNER","getMockData","endpoint","console","log","startsWith","_endpoint$match","departmentId","match","find","d","_endpoint$match2","userId","user","u","_endpoint$match3","projectId","includes","project","p","tasks","filteredProjects","params","status","priority","search","filter","searchLower","toLowerCase","postMockData","data","newProject","length","progress","projectManagerId","manager","projectManager","teamMemberIds","Array","isArray","teamMembers","map","Boolean","push","handleResponse","response","success","message","apiRequest","method","USE_MOCK_DATA","getToken","responseData","url","error","createDefaultRisks","title","IDENTIFIED","impact","HIGH","probability","mitigation","owner","createdBy","ASSESSED","MEDIUM","createDefaultIssues","OPEN","IN_PROGRESS","RESOLVED","CRITICAL","resolutionSummary","login","password","defaultUsers","PROJECT_MANAGER","assignments","getAllAssignments","getAssignmentById","createAssignment","newAssignment","updateAssignment","deleteAssignment","apiRoutes","auth","adIdentifier","now","refreshToken","logout","users","getCurrentUser","getAllUsers","getUserById","createUser","userData","newUser","updateUser","deleteUser","assignRole","assignDepartment","getAllDepartments","projects","getAllProjects","getProjectById","createProject","projectData","updateProject","updatedData","deleteProject","uploadAttachment","formData","getAttachments","deleteAttachment","attachmentId","getProject","startDate","endDate","budget","approvalStatus","comments","reviewHistory","getAllTasks","getAllIndependentTasks","getTaskById","taskId","getIndependentTaskById","createTask","taskData","createIndependentTask","updateTask","updateIndependentTask","deleteTask","deleteIndependentTask","addComment","commentData","OFFLINE_MODE","allTasks","JSON","parse","taskIndex","findIndex","t","newComment","text","author","authorId","authorFirstName","authorLastName","setItem","stringify","Error","post","risks","getAllRisks","getRiskById","riskId","createRisk","riskData","updateRisk","deleteRisk","issues","getAllIssues","getIssueById","issueId","createIssue","issueData","updateIssue","deleteIssue","taskRequests","createTaskRequest","requestData","defaultTaskRequest","PENDING","requestedBy","getTaskRequestsByProject","getTaskRequestById","requestId","updateTaskRequestStatus","reviewNotes","approveTaskRequest","rejectTaskRequest","auditLogs","getAuditLogs","getAuditLogById","logId","departments","getDepartmentById","createDepartment","departmentData","newDepartment","updateDepartment","deleteDepartment","changeRequests","getChangeRequestsByProject","getChangeRequestById","createChangeRequest","updateChangeRequestStatus","approveChangeRequest","rejectChangeRequest","getAllChangeRequests","meetings","getAllMeetings","getMeetingById","meetingId","createMeeting","meetingData","newMeeting","startTime","endTime","organizer","participants","updateMeeting","deleteMeeting"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/services/api.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { API_BASE_URL, FEATURES } from '../config';\nimport LocalStorageService from './LocalStorageService';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ProjectStatus, TaskStatus, UserRole, TaskPriority, RiskStatus, RiskImpact, IssueStatus, Project, Task, User, Department, Meeting, Risk, Issue, Assignment, AssignmentStatus, ApiResponse, MeetingStatus, ProjectPriority, ProjectTemplateType, TaskRequestStatus } from '../types';\nimport { \n  mockProjects, \n  mockUsers, \n  mockRisks, \n  mockMeetings, \n  mockIssues,\n  mockDepartments as importedMockDepartments,\n  createDefaultTasks\n} from './mockData';\nimport AuthService from './AuthService';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Helper function to simulate delay\nconst delay = () => new Promise(resolve => setTimeout(resolve, 500));\n\n// Helper to simulate network delay\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Standard delay duration\nconst simulateDelay = () => sleep(Math.random() * 300 + 200); // 200-500ms\n\n// Create empty mock objects for all data types\nconst mockITDepartment: Department = {\n  id: '',\n  name: '',\n  description: '',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\n// Empty arrays for all mock data\nconst defaultProjectId = '';\nconst mockTasks: Task[] = [];\nconst defaultProjects: Project[] = [];\nconst defaultMeetings: Meeting[] = [];\n\n// Empty test users\nconst testUsers = {\n  admin: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.ADMIN,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager1: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager2: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  developer: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.DEVELOPER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  designer: {\n    id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: UserRole.DESIGNER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n};\n\nfunction getMockData(endpoint: string, config?: AxiosRequestConfig): Promise<any> {\n  return new Promise((resolve) => {\n    // Simulate network delay\n    setTimeout(() => {\n      console.log(`[MOCK] GET request to ${endpoint}`);\n      \n      // Handle departments\n      if (endpoint.startsWith('/departments')) {\n        const departmentId = endpoint.match(/\\/departments\\/([^\\/]+)/)?.[1];\n        if (departmentId) {\n          const department = importedMockDepartments.find(d => d.id === departmentId);\n          return resolve(department || null);\n        }\n        return resolve(importedMockDepartments);\n      }\n      \n      // Handle users\n      if (endpoint.startsWith('/users')) {\n        const userId = endpoint.match(/\\/users\\/([^\\/]+)/)?.[1];\n        if (userId) {\n          const user = mockUsers.find(u => u.id === userId);\n          return resolve(user || null);\n        }\n        return resolve(mockUsers);\n      }\n      \n      // Handle projects\n      if (endpoint.startsWith('/projects')) {\n        const projectId = endpoint.match(/\\/projects\\/([^\\/]+)/)?.[1];\n        \n        if (endpoint.includes('/tasks')) {\n          // Handle tasks for a specific project\n          if (projectId) {\n            const project = mockProjects.find(p => p.id === projectId);\n            if (project) {\n              const tasks = createDefaultTasks(project.id);\n              return resolve(tasks);\n            }\n          }\n          return resolve([]);\n        }\n        \n        if (projectId) {\n          // Return a specific project\n          const project = mockProjects.find(p => p.id === projectId);\n          return resolve(project || null);\n        }\n        \n        // Return all projects, possibly filtered\n        let filteredProjects = [...mockProjects];\n        \n        // Handle query parameters for filtering\n        if (config?.params) {\n          const { departmentId, status, priority, search } = config.params;\n          \n          if (departmentId) {\n            filteredProjects = filteredProjects.filter(p => p.departmentId === departmentId);\n          }\n          \n          if (status) {\n            filteredProjects = filteredProjects.filter(p => p.status === status);\n          }\n          \n          if (priority) {\n            filteredProjects = filteredProjects.filter(p => p.priority === priority);\n          }\n          \n          if (search) {\n            const searchLower = search.toLowerCase();\n            filteredProjects = filteredProjects.filter(p => \n              p.name.toLowerCase().includes(searchLower) || \n              p.description.toLowerCase().includes(searchLower)\n            );\n          }\n        }\n        \n        return resolve(filteredProjects);\n      }\n      \n      // If no handler for this endpoint\n      console.log(`[MOCK] No handler for endpoint: ${endpoint}`);\n      resolve([]);\n    }, 600); // Simulate network delay\n  });\n}\n\n// Handle POST requests for mock data\nfunction postMockData(endpoint: string, data: any): Promise<any> {\n  return new Promise((resolve) => {\n    // Simulate network delay\n    setTimeout(() => {\n      console.log(`[MOCK] POST request to ${endpoint}`, data);\n      \n      // Handle project creation\n      if (endpoint === '/projects') {\n        const newProject = {\n          ...data,\n          id: `p${mockProjects.length + 1}`,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          progress: 0,\n        };\n        \n        // Link department\n        if (data.departmentId) {\n          const department = importedMockDepartments.find(d => d.id === data.departmentId);\n          if (department) {\n            newProject.department = department;\n          }\n        }\n        \n        // Link project manager\n        if (data.projectManagerId) {\n          const manager = mockUsers.find(u => u.id === data.projectManagerId);\n          if (manager) {\n            newProject.projectManager = manager;\n          }\n        }\n        \n        // Link team members\n        if (data.teamMemberIds && Array.isArray(data.teamMemberIds)) {\n          newProject.teamMembers = data.teamMemberIds\n            .map(id => mockUsers.find(u => u.id === id))\n            .filter(Boolean);\n        }\n        \n        mockProjects.push(newProject);\n        return resolve(newProject);\n      }\n      \n      // If no handler for this endpoint\n      console.log(`[MOCK] No POST handler for endpoint: ${endpoint}`);\n      resolve(data);\n    }, 800);\n  });\n}\n\n/**\n * Handles the API response\n */\nfunction handleResponse<T>(response: AxiosResponse): ApiResponse<T> {\n  if (response.status >= 200 && response.status < 300) {\n    return {\n      data: response.data,\n      success: true\n    };\n  } else {\n    return {\n      data: response.data,\n      success: false,\n      message: `Request failed with status ${response.status}`\n    };\n  }\n}\n\n/**\n * Main API request function that handles authentication and error handling\n */\nexport const apiRequest = async (endpoint: string, method: string = 'GET', data?: any): Promise<ApiResponse<any>> => {\n  const USE_MOCK_DATA = true; // Set to true for development without backend\n  \n  try {\n    const token = AuthService.getToken();\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    if (USE_MOCK_DATA) {\n      // Return mock data (with persistence)\n      console.log(`Using mock data for endpoint: ${endpoint}, method: ${method}`);\n      if (method === 'GET') {\n        const responseData = await getMockData(endpoint, { params: data });\n        return {\n          data: responseData,\n          success: true\n        };\n      } else if (method === 'POST') {\n        const responseData = await postMockData(endpoint, data);\n        return {\n          data: responseData,\n          success: true\n        };\n      } else {\n        // For other methods, just return success\n        return {\n          data: data || {},\n          success: true\n        };\n      }\n    }\n\n    // Real API request\n    const config: AxiosRequestConfig = {\n      method,\n      url: endpoint,\n      headers,\n      ...(method === 'GET' ? { params: data } : { data }),\n    };\n\n    const response = await axios(config);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('API request failed:', error);\n    if (USE_MOCK_DATA) {\n      console.log(`Falling back to mock data for endpoint: ${endpoint}`);\n      if (method === 'GET') {\n        const responseData = await getMockData(endpoint, { params: data });\n        return {\n          data: responseData,\n          success: true\n        };\n      } else if (method === 'POST') {\n        const responseData = await postMockData(endpoint, data);\n        return {\n          data: responseData,\n          success: true\n        };\n      }\n    }\n    throw error;\n  }\n};\n\n// Default mock risks\nconst createDefaultRisks = (projectId: string) => [\n  {\n    id: '1',\n    projectId,\n    title: 'Data Migration Risk',\n    description: 'Risk of data loss during migration process',\n    status: RiskStatus.IDENTIFIED,\n    impact: RiskImpact.HIGH,\n    probability: 70,\n    mitigation: 'Create multiple backups before migration and perform test migrations on sample data',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-10T00:00:00Z',\n    updatedAt: '2023-01-10T00:00:00Z'\n  },\n  {\n    id: '2',\n    projectId,\n    title: 'Resource Availability Risk',\n    description: 'Risk of key team members being unavailable during critical project phases',\n    status: RiskStatus.ASSESSED,\n    impact: RiskImpact.MEDIUM,\n    probability: 50,\n    mitigation: 'Develop contingency plans and cross-train team members',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-15T00:00:00Z'\n  }\n];\n\n// Default mock issues\nconst createDefaultIssues = (projectId: string) => [\n  {\n    id: '1',\n    projectId,\n    title: 'Integration Failure with Legacy System',\n    description: 'The new system cannot properly integrate with the existing legacy system',\n    status: IssueStatus.OPEN,\n    impact: RiskImpact.HIGH,\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-02-10T00:00:00Z',\n    updatedAt: '2023-02-10T00:00:00Z'\n  },\n  {\n    id: '2',\n    projectId,\n    title: 'Performance Bottleneck in Module A',\n    description: 'Module A performance is not meeting expected throughput requirements',\n    status: IssueStatus.IN_PROGRESS,\n    impact: RiskImpact.MEDIUM,\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-02-15T00:00:00Z',\n    updatedAt: '2023-02-20T00:00:00Z'\n  },\n  {\n    id: '3',\n    projectId,\n    title: 'Security Vulnerability in Authentication',\n    description: 'Security audit identified a potential vulnerability in the authentication process',\n    status: IssueStatus.RESOLVED,\n    impact: RiskImpact.CRITICAL,\n    resolutionSummary: 'Implemented updated security protocols and fixed the vulnerability with patch 1.2.3',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-25T00:00:00Z',\n    updatedAt: '2023-02-05T00:00:00Z'\n  }\n];\n\n// Helper function to simulate login\nexport const login = async (email: string, password: string) => {\n  // Return a minimal user object\n  return {\n    success: true,\n    data: {\n      id: '',\n      username: '',\n      firstName: '',\n      lastName: '',\n      email: email || '',\n      role: UserRole.ADMIN, // Still need admin role for access\n      department: {\n        id: '',\n        name: '',\n        description: ''\n      },\n      isActive: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    message: 'Login successful'\n  };\n};\n\nconst defaultUsers: User[] = [\n  {\n    id: '1',\n    username: 'john.doe',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@themis.com',\n    role: UserRole.PROJECT_MANAGER,\n    department: importedMockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    username: 'jane.smith',\n    firstName: 'Jane',\n    lastName: 'Smith',\n    email: 'jane.smith@themis.com',\n    role: UserRole.DEVELOPER,\n    department: importedMockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    username: 'mike.johnson',\n    firstName: 'Mike',\n    lastName: 'Johnson',\n    email: 'mike.johnson@themis.com',\n    role: UserRole.DESIGNER,\n    department: importedMockDepartments[1],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '4',\n    username: 'sarah.wilson',\n    firstName: 'Sarah',\n    lastName: 'Wilson',\n    email: 'sarah.wilson@themis.com',\n    role: UserRole.DEVELOPER,\n    department: importedMockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '5',\n    username: 'david.brown',\n    firstName: 'David',\n    lastName: 'Brown',\n    email: 'david.brown@themis.com',\n    role: UserRole.PROJECT_MANAGER,\n    department: importedMockDepartments[2],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\nconst assignments = {\n  getAllAssignments: async (token: string) => {\n    await delay();\n    return {\n      data: [],\n      success: true\n    };\n  },\n  \n  getAssignmentById: async (id: string, token: string): Promise<Assignment | null> => {\n    await delay();\n    return null;\n  },\n\n  createAssignment: async (data: Partial<Assignment>, token: string) => {\n    await delay();\n    const newAssignment: Assignment = {\n      id: '',\n      ...data,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    } as Assignment;\n    return {\n      success: true,\n      data: newAssignment,\n    };\n  },\n\n  updateAssignment: async (id: string, data: Partial<Assignment>, token: string) => {\n    await delay();\n    return {\n      success: false,\n      error: 'Assignment not found',\n    };\n  },\n\n  deleteAssignment: async (id: string, token: string) => {\n    await delay();\n    return {\n      success: true,\n    };\n  },\n};\n\n// Create a named API object to export instead of using anonymous default export\nconst apiRoutes = {\n  // Auth endpoints\n  auth: {\n    login: (adIdentifier: string) => {\n      // Mock implementation for testing without backend\n      console.log('Using mock login implementation');\n      return Promise.resolve({\n        userId: '1',\n        username: adIdentifier,\n        role: UserRole.ADMIN, // Defaulting to ADMIN for testing\n        departmentId: '1',\n        token: 'mock-token-' + Date.now(),\n        success: true,\n        message: 'Login successful'\n      });\n    },\n    \n    refreshToken: (refreshToken: string) => \n      apiRequest('/api/auth/refresh', 'POST', { refreshToken }),\n    \n    logout: (token: string) => \n      apiRequest('/api/auth/logout', 'POST', {}),\n  },\n\n  // User endpoints\n  users: {\n    getCurrentUser: async (token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'User not found'\n      };\n    },\n    \n    getAllUsers: async (token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getUserById: async (userId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'User not found'\n      };\n    },\n    \n    createUser: async (userData: Partial<User>, token: string) => {\n      await delay();\n      const newUser: User = {\n        id: '',\n        username: userData.username || '',\n        firstName: userData.firstName || '',\n        lastName: userData.lastName || '',\n        email: userData.email || '',\n        role: userData.role || UserRole.DEVELOPER,\n        isActive: true,\n        department: {} as Department,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      } as User;\n      \n      return {\n        data: newUser,\n        success: true\n      };\n    },\n    \n    updateUser: async (userId: string, userData: Partial<User>, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'User not found'\n      };\n    },\n    \n    deleteUser: async (userId: string, token: string) => {\n      await delay();\n      return {\n        success: true\n      };\n    },\n    \n    assignRole: (userId: string, role: string, token: string) => \n      apiRequest(`/api/users/${userId}/role`, 'PUT', { role }),\n      \n    assignDepartment: (userId: string, departmentId: string, token: string) => \n      apiRequest(`/api/users/${userId}/department`, 'PUT', { departmentId }),\n      \n    getAllDepartments: (token: string) => \n      apiRequest('/api/users/departments', 'GET'),\n  },\n\n  // Project endpoints\n  projects: {\n    getAllProjects: async (token: string) => {\n      await simulateDelay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getProjectById: async (id: string, token: string) => {\n      await simulateDelay();\n      return {\n        data: null,\n        success: false,\n        error: 'Project not found'\n      };\n    },\n    \n    createProject: async (projectData: any, token: string) => {\n      await simulateDelay();\n      const newProject = {\n        id: projectData.id || uuidv4(),\n        ...projectData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      return {\n        data: newProject,\n        success: true\n      };\n    },\n    \n    updateProject: async (projectId: string, updatedData: Partial<Project>, token: string) => {\n      try {\n        await simulateDelay();\n        return {\n          data: null,\n          success: false,\n          error: 'Project not found'\n        };\n      } catch (error) {\n        console.error('Error updating project:', error);\n        throw error;\n      }\n    },\n    \n    deleteProject: async (projectId: string, token: string) => {\n      await simulateDelay();\n      return {\n        data: { message: 'Project deleted successfully' },\n        success: true\n      };\n    },\n      \n    uploadAttachment: (projectId: string, formData: FormData, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments`, 'POST', formData),\n      \n    getAttachments: (projectId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments`, 'GET'),\n      \n    deleteAttachment: (projectId: string, attachmentId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments/${attachmentId}`, 'DELETE'),\n\n    getProject: async (projectId: string, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/projects/${projectId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: projectId,\n            name: \"Mock Project\",\n            description: \"This is a mock project returned by the API\",\n            startDate: new Date().toISOString(),\n            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            status: \"IN_PROGRESS\",\n            priority: \"MEDIUM\",\n            budget: 100000,\n            progress: 50,\n            department: {\n              id: \"dept-1\",\n              name: \"IT Department\"\n            },\n            projectManager: {\n              id: \"user-1\",\n              firstName: \"John\",\n              lastName: \"Doe\"\n            },\n            approvalStatus: \"SUBMITTED\",\n            comments: \"This is a sample comment on the project\",\n            reviewHistory: [],\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching project:', error);\n        throw error;\n      }\n    },\n  },\n\n  // Task endpoints\n  tasks: {\n    getAllTasks: async (projectId: string, token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getAllIndependentTasks: async (token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getTaskById: async (projectId: string, taskId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    \n    getIndependentTaskById: async (taskId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    \n    createTask: async (projectId: string, taskData: any, token: string) => {\n      await delay();\n      return {\n        data: { ...taskData, id: '' },\n        success: true\n      };\n    },\n    \n    createIndependentTask: async (taskData: any, token: string) => {\n      await delay();\n      return {\n        data: { ...taskData, id: '' },\n        success: true\n      };\n    },\n    \n    updateTask: async (projectId: string, taskId: string, taskData: any, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    \n    updateIndependentTask: async (taskId: string, taskData: any, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task not found'\n      };\n    },\n    \n    deleteTask: async (projectId: string, taskId: string, token: string) => {\n      await delay();\n      return {\n        success: true\n      };\n    },\n    \n    deleteIndependentTask: async (taskId: string, token: string) => {\n      await delay();\n      return {\n        success: true\n      };\n    },\n\n    // Add task comment\n    addComment: async (projectId: string, taskId: string, commentData: any, token: string) => {\n      if (FEATURES.OFFLINE_MODE) {\n        // In offline mode, simulate API response\n        await simulateDelay();\n        \n        // Get existing tasks from localStorage\n        const allTasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n        \n        // Find the specific task to add the comment to\n        const taskIndex = allTasks.findIndex((t: any) => t.id === taskId && t.projectId === projectId);\n        \n        if (taskIndex !== -1) {\n          // Create a new comment\n          const newComment = {\n            id: `comment-${Date.now()}`,\n            taskId,\n            text: commentData.text,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            author: {\n              id: commentData.authorId,\n              firstName: commentData.authorFirstName || 'User',\n              lastName: commentData.authorLastName || commentData.authorId,\n            }\n          };\n          \n          // Add comment to the task\n          if (!allTasks[taskIndex].comments) {\n            allTasks[taskIndex].comments = [];\n          }\n          \n          allTasks[taskIndex].comments.push(newComment);\n          \n          // Save back to localStorage\n          localStorage.setItem('tasks', JSON.stringify(allTasks));\n          \n          return {\n            success: true,\n            data: newComment,\n            message: 'Comment added successfully'\n          };\n        } else {\n          throw new Error('Task not found');\n        }\n      } else {\n        // In online mode, make actual API call\n        const response = await axios.post(\n          `${API_BASE_URL}/projects/${projectId}/tasks/${taskId}/comments`,\n          commentData,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          }\n        );\n        return {\n          data: [],\n          success: true\n        };\n      }\n    },\n  },\n\n  // Risk endpoints\n  risks: {\n    getAllRisks: async (projectId: string, token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getRiskById: async (projectId: string, riskId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Risk not found'\n      };\n    },\n    \n    createRisk: async (projectId: string, riskData: any, token: string) => {\n      await delay();\n      return {\n        data: { ...riskData, id: '' },\n        success: true\n      };\n    },\n    \n    updateRisk: async (projectId: string, riskId: string, riskData: any, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Risk not found'\n      };\n    },\n    \n    deleteRisk: async (projectId: string, riskId: string, token: string) => {\n      await delay();\n      return {\n        success: true\n      };\n    },\n  },\n\n  // Issue endpoints\n  issues: {\n    getAllIssues: async (projectId: string, token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getIssueById: async (projectId: string, issueId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Issue not found'\n      };\n    },\n    \n    createIssue: async (projectId: string, issueData: Partial<Issue>, token: string) => {\n      await delay();\n      return {\n        data: { ...issueData, id: '' } as Issue,\n        success: true\n      };\n    },\n    \n    updateIssue: async (projectId: string, issueId: string, issueData: Partial<Issue>, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Issue not found'\n      };\n    },\n    \n    deleteIssue: async (projectId: string, issueId: string, token: string) => {\n      await delay();\n      return {\n        success: true\n      };\n    }\n  },\n\n  // Task Request endpoints\n  taskRequests: {\n    createTaskRequest: async (requestData: any, token: string) => {\n      await delay();\n      // Create a minimal TaskRequest object to satisfy type requirements\n      const defaultTaskRequest = {\n        id: uuidv4(),\n        title: requestData.title || '',\n        description: requestData.description || '',\n        priority: requestData.priority || TaskPriority.MEDIUM,\n        status: TaskRequestStatus.PENDING,\n        requestedBy: requestData.requestedBy || {},\n        projectId: requestData.projectId || '',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        ...requestData\n      };\n      \n      return {\n        data: defaultTaskRequest,\n        success: true\n      };\n    },\n      \n    getTaskRequestsByProject: async (projectId: string, token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n      \n    getTaskRequestById: async (requestId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    },\n      \n    updateTaskRequestStatus: async (requestId: string, status: any, reviewNotes: string | undefined, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    },\n      \n    approveTaskRequest: async (requestId: string, reviewNotes: string | undefined, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    },\n      \n    rejectTaskRequest: async (requestId: string, reviewNotes: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Task request not found'\n      };\n    }\n  },\n\n  // Assignment endpoints\n  assignments,\n\n  auditLogs: {\n    getAuditLogs: async (token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getAuditLogById: async (logId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Audit log not found'\n      };\n    }\n  },\n\n  // Department endpoints\n  departments: {\n    getAllDepartments: async (token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getDepartmentById: async (departmentId: string, token: string): Promise<Department | null> => {\n      await delay();\n      return null;\n    },\n    \n    createDepartment: async (departmentData: Partial<Department>, token: string) => {\n      await delay();\n      const newDepartment: Department = {\n        id: '',\n        name: departmentData.name || '',\n        description: departmentData.description || '',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      } as Department;\n      \n      return {\n        data: newDepartment,\n        success: true\n      };\n    },\n    \n    updateDepartment: async (departmentId: string, departmentData: Partial<Department>, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Department not found'\n      };\n    },\n    \n    deleteDepartment: async (departmentId: string, token: string) => {\n      await delay();\n      return {\n        data: {\n          success: true,\n          message: \"Department deleted successfully\"\n        }\n      };\n    }\n  },\n  \n  // Change Request endpoints\n  changeRequests: {\n    getChangeRequestsByProject: async (projectId: string, token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n      \n    getChangeRequestById: async (requestId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n      \n    createChangeRequest: async (requestData: any, token: string) => {\n      await delay();\n      return {\n        data: { id: '', ...requestData },\n        success: true\n      };\n    },\n      \n    updateChangeRequestStatus: async (requestId: string, status: any, reviewNotes: string | undefined, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n      \n    approveChangeRequest: async (requestId: string, reviewNotes: string | undefined, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n      \n    rejectChangeRequest: async (requestId: string, reviewNotes: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Change request not found'\n      };\n    },\n      \n    getAllChangeRequests: async (token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    }\n  },\n\n  // Add meetings API with correct types\n  meetings: {\n    getAllMeetings: async (token: string) => {\n      await delay();\n      return {\n        data: [],\n        success: true\n      };\n    },\n    \n    getMeetingById: async (meetingId: string, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Meeting not found'\n      };\n    },\n    \n    createMeeting: async (meetingData: Partial<Meeting>, token: string) => {\n      await delay();\n      const newMeeting: Meeting = {\n        id: '',\n        title: meetingData.title || '',\n        description: meetingData.description || '',\n        startTime: meetingData.startTime || new Date().toISOString(),\n        endTime: meetingData.endTime || new Date().toISOString(),\n        organizer: {} as User,\n        participants: [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      } as Meeting;\n      \n      return {\n        data: newMeeting,\n        success: true\n      };\n    },\n    \n    updateMeeting: async (meetingId: string, meetingData: Partial<Meeting>, token: string) => {\n      await delay();\n      return {\n        data: null,\n        success: false,\n        error: 'Meeting not found'\n      };\n    },\n    \n    deleteMeeting: async (meetingId: string, token: string) => {\n      await delay();\n      return {\n        success: true\n      };\n    }\n  },\n};\n\nexport default apiRoutes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}