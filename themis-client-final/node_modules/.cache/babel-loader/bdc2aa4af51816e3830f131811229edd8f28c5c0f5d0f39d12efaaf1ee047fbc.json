{"ast":null,"code":"import { ProjectStatus, UserRole } from '../types';\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(date);\n};\nexport const getStatusColor = (status, endDate) => {\n  // Check if project is overdue\n  if (endDate && status === ProjectStatus.IN_PROGRESS) {\n    const today = new Date();\n    const projectEndDate = new Date(endDate);\n    if (projectEndDate < today) {\n      return '#d32f2f'; // Red color for overdue projects\n    }\n  }\n\n  // Default status colors\n  switch (status) {\n    case ProjectStatus.IN_PROGRESS:\n      return '#1976d2';\n    // blue\n    case ProjectStatus.COMPLETED:\n      return '#2e7d32';\n    // green\n    case ProjectStatus.ON_HOLD:\n      return '#ed6c02';\n    // orange\n    case ProjectStatus.CANCELLED:\n      return '#d32f2f';\n    // red\n    case ProjectStatus.PLANNING:\n      return '#9c27b0';\n    // purple\n    default:\n      return '#757575';\n    // grey\n  }\n};\n\n// Define dashboard access permissions\n\n/**\n * Determines dashboard access permissions based on user role\n * @param role The user's role\n * @returns Object with dashboard access permissions\n */\nexport const getDashboardAccess = role => {\n  // Default access (minimum permissions)\n  const defaultAccess = {\n    canViewAllProjects: false,\n    canViewRisksAndIssues: false,\n    canViewFinancials: false,\n    canViewClientData: false,\n    canViewDepartmentData: false,\n    canExportReports: false\n  };\n  if (!role) return defaultAccess;\n  switch (role) {\n    case UserRole.ADMIN:\n    case UserRole.EXECUTIVE:\n      // Full access for executives and admins\n      return {\n        canViewAllProjects: true,\n        canViewRisksAndIssues: true,\n        canViewFinancials: true,\n        canViewClientData: true,\n        canViewDepartmentData: true,\n        canExportReports: true\n      };\n    case UserRole.MAIN_PMO:\n      // Main PMO has wide access except some financial details\n      return {\n        canViewAllProjects: true,\n        canViewRisksAndIssues: true,\n        canViewFinancials: false,\n        canViewClientData: true,\n        canViewDepartmentData: true,\n        canExportReports: true\n      };\n    case UserRole.DEPARTMENT_DIRECTOR:\n      // Department directors see their own department data plus some cross-department views\n      return {\n        canViewAllProjects: false,\n        canViewRisksAndIssues: true,\n        canViewFinancials: true,\n        canViewClientData: false,\n        canViewDepartmentData: true,\n        canExportReports: true\n      };\n    case UserRole.SUB_PMO:\n      // Sub PMO has more limited access\n      return {\n        canViewAllProjects: false,\n        canViewRisksAndIssues: true,\n        canViewFinancials: false,\n        canViewClientData: false,\n        canViewDepartmentData: true,\n        canExportReports: false\n      };\n    case UserRole.PROJECT_MANAGER:\n      // Project managers only see their own projects\n      return {\n        canViewAllProjects: false,\n        canViewRisksAndIssues: false,\n        canViewFinancials: false,\n        canViewClientData: false,\n        canViewDepartmentData: false,\n        canExportReports: false\n      };\n    default:\n      return defaultAccess;\n  }\n};","map":{"version":3,"names":["ProjectStatus","UserRole","formatDate","dateString","date","Date","Intl","DateTimeFormat","year","month","day","format","getStatusColor","status","endDate","IN_PROGRESS","today","projectEndDate","COMPLETED","ON_HOLD","CANCELLED","PLANNING","getDashboardAccess","role","defaultAccess","canViewAllProjects","canViewRisksAndIssues","canViewFinancials","canViewClientData","canViewDepartmentData","canExportReports","ADMIN","EXECUTIVE","MAIN_PMO","DEPARTMENT_DIRECTOR","SUB_PMO","PROJECT_MANAGER"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/helpers.ts"],"sourcesContent":["import { ProjectStatus, UserRole } from '../types';\n\nexport const formatDate = (dateString: string): string => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(date);\n};\n\nexport const getStatusColor = (status: ProjectStatus, endDate?: string): string => {\n  // Check if project is overdue\n  if (endDate && status === ProjectStatus.IN_PROGRESS) {\n    const today = new Date();\n    const projectEndDate = new Date(endDate);\n    if (projectEndDate < today) {\n      return '#d32f2f'; // Red color for overdue projects\n    }\n  }\n\n  // Default status colors\n  switch (status) {\n    case ProjectStatus.IN_PROGRESS:\n      return '#1976d2'; // blue\n    case ProjectStatus.COMPLETED:\n      return '#2e7d32'; // green\n    case ProjectStatus.ON_HOLD:\n      return '#ed6c02'; // orange\n    case ProjectStatus.CANCELLED:\n      return '#d32f2f'; // red\n    case ProjectStatus.PLANNING:\n      return '#9c27b0'; // purple\n    default:\n      return '#757575'; // grey\n  }\n};\n\n// Define dashboard access permissions\nexport interface DashboardAccess {\n  canViewAllProjects: boolean;\n  canViewRisksAndIssues: boolean;\n  canViewFinancials: boolean;\n  canViewClientData: boolean;\n  canViewDepartmentData: boolean;\n  canExportReports: boolean;\n}\n\n/**\n * Determines dashboard access permissions based on user role\n * @param role The user's role\n * @returns Object with dashboard access permissions\n */\nexport const getDashboardAccess = (role?: UserRole): DashboardAccess => {\n  // Default access (minimum permissions)\n  const defaultAccess: DashboardAccess = {\n    canViewAllProjects: false,\n    canViewRisksAndIssues: false,\n    canViewFinancials: false,\n    canViewClientData: false,\n    canViewDepartmentData: false,\n    canExportReports: false\n  };\n  \n  if (!role) return defaultAccess;\n  \n  switch (role) {\n    case UserRole.ADMIN:\n    case UserRole.EXECUTIVE:\n      // Full access for executives and admins\n      return {\n        canViewAllProjects: true,\n        canViewRisksAndIssues: true,\n        canViewFinancials: true,\n        canViewClientData: true,\n        canViewDepartmentData: true,\n        canExportReports: true\n      };\n    \n    case UserRole.MAIN_PMO:\n      // Main PMO has wide access except some financial details\n      return {\n        canViewAllProjects: true,\n        canViewRisksAndIssues: true,\n        canViewFinancials: false,\n        canViewClientData: true,\n        canViewDepartmentData: true,\n        canExportReports: true\n      };\n      \n    case UserRole.DEPARTMENT_DIRECTOR:\n      // Department directors see their own department data plus some cross-department views\n      return {\n        canViewAllProjects: false,\n        canViewRisksAndIssues: true,\n        canViewFinancials: true,\n        canViewClientData: false,\n        canViewDepartmentData: true,\n        canExportReports: true\n      };\n      \n    case UserRole.SUB_PMO:\n      // Sub PMO has more limited access\n      return {\n        canViewAllProjects: false,\n        canViewRisksAndIssues: true,\n        canViewFinancials: false,\n        canViewClientData: false,\n        canViewDepartmentData: true,\n        canExportReports: false\n      };\n      \n    case UserRole.PROJECT_MANAGER:\n      // Project managers only see their own projects\n      return {\n        canViewAllProjects: false,\n        canViewRisksAndIssues: false,\n        canViewFinancials: false,\n        canViewClientData: false,\n        canViewDepartmentData: false,\n        canExportReports: false\n      };\n      \n    default:\n      return defaultAccess;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}