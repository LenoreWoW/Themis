{"ast":null,"code":"var _jsxFileName = \"/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/TaskContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst TaskContext = /*#__PURE__*/createContext(undefined);\n\n// Create the provider component\nexport const TaskProvider = ({\n  children,\n  projectId\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user,\n    token\n  } = useAuth();\n\n  // Mock implementation of task operations\n  const addTask = async task => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, you would call API here\n      // const response = await api.tasks.createTask(task, token);\n      // Mock successful response\n      const newTask = {\n        ...task,\n        id: Date.now().toString()\n      };\n      setTasks(prev => [...prev, newTask]);\n    } catch (err) {\n      console.error('Error adding task:', err);\n      setError('Failed to add task');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateTask = async (taskId, updatedTask) => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, you would call API here\n      // const response = await api.tasks.updateTask(taskId, updatedTask, token);\n      // Mock successful update\n      setTasks(prev => prev.map(task => task.id === taskId ? {\n        ...task,\n        ...updatedTask\n      } : task));\n    } catch (err) {\n      console.error('Error updating task:', err);\n      setError('Failed to update task');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteTask = async taskId => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, you would call API here\n      // await api.tasks.deleteTask(taskId, token);\n      // Mock successful delete\n      setTasks(prev => prev.filter(task => task.id !== taskId));\n    } catch (err) {\n      console.error('Error deleting task:', err);\n      setError('Failed to delete task');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const moveTask = async (taskId, newStatus) => {\n    updateTask(taskId, {\n      status: newStatus\n    });\n  };\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    const fetchTasks = async () => {\n      if (!token) return;\n      setLoading(true);\n      setError(null);\n      try {\n        // In a real app, you would fetch tasks from API\n        // const response = await api.tasks.getTasks(token);\n        // setTasks(response.data || []);\n\n        // For now, just use empty array\n        setTasks([]);\n      } catch (err) {\n        console.error('Error fetching tasks:', err);\n        setError('Failed to fetch tasks');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTasks();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      addTask,\n      updateTask,\n      deleteTask,\n      moveTask,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n// Create a hook to use the task context\n_s(TaskProvider, \"WGLtHNTgZTa0keNEpF/o+hcvjQk=\", false, function () {\n  return [useAuth];\n});\n_c = TaskProvider;\nexport const useTasks = () => {\n  _s2();\n  const context = useContext(TaskContext);\n  if (context === undefined) {\n    throw new Error('useTasks must be used within a TaskProvider');\n  }\n  return context;\n};\n_s2(useTasks, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default TaskContext;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","TaskContext","undefined","TaskProvider","children","projectId","_s","tasks","setTasks","loading","setLoading","error","setError","user","token","addTask","task","newTask","id","Date","now","toString","prev","err","console","updateTask","taskId","updatedTask","map","deleteTask","filter","moveTask","newStatus","status","fetchTasks","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTasks","_s2","context","Error","$RefreshReg$"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/TaskContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Task, TaskStatus } from '../types';\nimport api from '../services/api';\nimport { useAuth } from './AuthContext';\n\n// Define the context type\ninterface TaskContextType {\n  tasks: Task[];\n  addTask: (task: Task) => Promise<void>;\n  updateTask: (taskId: string, updatedTask: Partial<Task>) => Promise<void>;\n  deleteTask: (taskId: string) => Promise<void>;\n  moveTask: (taskId: string, newStatus: TaskStatus) => Promise<void>;\n  loading: boolean;\n  error: string | null;\n}\n\n// Create the context\nconst TaskContext = createContext<TaskContextType | undefined>(undefined);\n\n// Create the provider component\nexport const TaskProvider: React.FC<{ children: React.ReactNode, projectId?: string }> = ({ children, projectId }) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user, token } = useAuth();\n\n  // Mock implementation of task operations\n  const addTask = async (task: Task): Promise<void> => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real app, you would call API here\n      // const response = await api.tasks.createTask(task, token);\n      // Mock successful response\n      const newTask = { ...task, id: Date.now().toString() };\n      setTasks(prev => [...prev, newTask]);\n    } catch (err) {\n      console.error('Error adding task:', err);\n      setError('Failed to add task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateTask = async (taskId: string, updatedTask: Partial<Task>): Promise<void> => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real app, you would call API here\n      // const response = await api.tasks.updateTask(taskId, updatedTask, token);\n      // Mock successful update\n      setTasks(prev => prev.map(task => \n        task.id === taskId ? { ...task, ...updatedTask } : task\n      ));\n    } catch (err) {\n      console.error('Error updating task:', err);\n      setError('Failed to update task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteTask = async (taskId: string): Promise<void> => {\n    if (!token) return;\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // In a real app, you would call API here\n      // await api.tasks.deleteTask(taskId, token);\n      // Mock successful delete\n      setTasks(prev => prev.filter(task => task.id !== taskId));\n    } catch (err) {\n      console.error('Error deleting task:', err);\n      setError('Failed to delete task');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const moveTask = async (taskId: string, newStatus: TaskStatus): Promise<void> => {\n    updateTask(taskId, { status: newStatus });\n  };\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    const fetchTasks = async () => {\n      if (!token) return;\n      setLoading(true);\n      setError(null);\n      \n      try {\n        // In a real app, you would fetch tasks from API\n        // const response = await api.tasks.getTasks(token);\n        // setTasks(response.data || []);\n        \n        // For now, just use empty array\n        setTasks([]);\n      } catch (err) {\n        console.error('Error fetching tasks:', err);\n        setError('Failed to fetch tasks');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchTasks();\n  }, [token]);\n\n  return (\n    <TaskContext.Provider value={{ \n      tasks, \n      addTask, \n      updateTask, \n      deleteTask, \n      moveTask,\n      loading,\n      error\n    }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n\n// Create a hook to use the task context\nexport const useTasks = (): TaskContextType => {\n  const context = useContext(TaskContext);\n  if (context === undefined) {\n    throw new Error('useTasks must be used within a TaskProvider');\n  }\n  return context;\n};\n\nexport default TaskContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}