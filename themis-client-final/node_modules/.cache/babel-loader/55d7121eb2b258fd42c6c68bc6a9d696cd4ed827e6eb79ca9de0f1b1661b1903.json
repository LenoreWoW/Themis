{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth as useAuthContext } from '../context/AuthContext';\nexport const useAuth = () => {\n  _s();\n  // Use the existing AuthContext hook\n  const auth = useAuthContext();\n  const [authState, setAuthState] = useState({\n    user: null,\n    isAuthenticated: false\n  });\n  useEffect(() => {\n    // Load user from local storage on initial load\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        // Mock the decoding of the token\n        const user = JSON.parse(localStorage.getItem('user') || 'null');\n        if (user) {\n          setAuthState({\n            user,\n            isAuthenticated: true\n          });\n        }\n      } catch (error) {\n        console.error('Error loading user from storage:', error);\n      }\n    }\n  }, []);\n\n  // Determine if user can view all projects based on role\n  const canViewAllProjects = auth.isAdmin || auth.isExecutive || auth.isMainPMO;\n  return {\n    ...auth,\n    canViewAllProjects,\n    setUser: user => {\n      if (user) {\n        // Save user and token to local storage\n        localStorage.setItem('authToken', 'mock-token');\n        localStorage.setItem('user', JSON.stringify(user));\n        setAuthState({\n          user,\n          isAuthenticated: true\n        });\n      } else {\n        // Remove user and token from local storage\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n        setAuthState({\n          user: null,\n          isAuthenticated: false\n        });\n      }\n    }\n  };\n};\n_s(useAuth, \"zOW28RVvgB4unxqGAJa8076V/FE=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useEffect","useAuth","useAuthContext","_s","auth","authState","setAuthState","user","isAuthenticated","token","localStorage","getItem","JSON","parse","error","console","canViewAllProjects","isAdmin","isExecutive","isMainPMO","setUser","setItem","stringify","removeItem"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { User, UserRole } from '../types';\nimport { useAuth as useAuthContext } from '../context/AuthContext';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n}\n\nexport const useAuth = () => {\n  // Use the existing AuthContext hook\n  const auth = useAuthContext();\n  \n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    isAuthenticated: false,\n  });\n\n  useEffect(() => {\n    // Load user from local storage on initial load\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        // Mock the decoding of the token\n        const user = JSON.parse(localStorage.getItem('user') || 'null');\n        if (user) {\n          setAuthState({\n            user,\n            isAuthenticated: true,\n          });\n        }\n      } catch (error) {\n        console.error('Error loading user from storage:', error);\n      }\n    }\n  }, []);\n  \n  // Determine if user can view all projects based on role\n  const canViewAllProjects = auth.isAdmin || auth.isExecutive || auth.isMainPMO;\n  \n  return {\n    ...auth,\n    canViewAllProjects,\n    setUser: (user: User | null) => {\n      if (user) {\n        // Save user and token to local storage\n        localStorage.setItem('authToken', 'mock-token');\n        localStorage.setItem('user', JSON.stringify(user));\n        setAuthState({\n          user,\n          isAuthenticated: true,\n        });\n      } else {\n        // Remove user and token from local storage\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n        setAuthState({\n          user: null,\n          isAuthenticated: false,\n        });\n      }\n    },\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,OAAO,IAAIC,cAAc,QAAQ,wBAAwB;AAOlE,OAAO,MAAMD,OAAO,GAAGA,CAAA,KAAM;EAAAE,EAAA;EAC3B;EACA,MAAMC,IAAI,GAAGF,cAAc,CAAC,CAAC;EAE7B,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAY;IACpDQ,IAAI,EAAE,IAAI;IACVC,eAAe,EAAE;EACnB,CAAC,CAAC;EAEFR,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,EAAE;MACT,IAAI;QACF;QACA,MAAMF,IAAI,GAAGK,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC;QAC/D,IAAIJ,IAAI,EAAE;UACRD,YAAY,CAAC;YACXC,IAAI;YACJC,eAAe,EAAE;UACnB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,kBAAkB,GAAGZ,IAAI,CAACa,OAAO,IAAIb,IAAI,CAACc,WAAW,IAAId,IAAI,CAACe,SAAS;EAE7E,OAAO;IACL,GAAGf,IAAI;IACPY,kBAAkB;IAClBI,OAAO,EAAGb,IAAiB,IAAK;MAC9B,IAAIA,IAAI,EAAE;QACR;QACAG,YAAY,CAACW,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC;QAC/CX,YAAY,CAACW,OAAO,CAAC,MAAM,EAAET,IAAI,CAACU,SAAS,CAACf,IAAI,CAAC,CAAC;QAClDD,YAAY,CAAC;UACXC,IAAI;UACJC,eAAe,EAAE;QACnB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAE,YAAY,CAACa,UAAU,CAAC,WAAW,CAAC;QACpCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;QAC/BjB,YAAY,CAAC;UACXC,IAAI,EAAE,IAAI;UACVC,eAAe,EAAE;QACnB,CAAC,CAAC;MACJ;IACF;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CAtDWF,OAAO;EAAA,QAELC,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}