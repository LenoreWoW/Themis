{"ast":null,"code":"import { UserRole } from '../types';\nimport { ChangeRequestType } from '../types/change-request';\nimport { canApproveProjects } from './permissions';\n\n/**\n * Utility to audit the application's compliance with ClientTerms\n */\n\n/**\n * Check if a change request follows the proper approval flow\n * @param changeRequest - The change request to check\n * @param approver - The user approving the request\n */\nexport const validateChangeRequestApproval = (changeRequest, approver) => {\n  const result = {\n    passed: true,\n    issues: []\n  };\n\n  // Check if approver has permission to approve change requests\n  if (!canApproveProjects(approver.role)) {\n    result.passed = false;\n    result.issues.push(`User ${approver.firstName} ${approver.lastName} does not have permission to approve change requests`);\n  }\n\n  // Different approval flows based on change request type\n  switch (changeRequest.type) {\n    case ChangeRequestType.SCHEDULE:\n      // Project extensions require MAIN_PMO or ADMIN approval\n      if (approver.role !== UserRole.MAIN_PMO && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Project extensions must be approved by a Main PMO or Admin');\n      }\n      break;\n    case ChangeRequestType.BUDGET:\n      // Budget changes require EXECUTIVE or ADMIN approval\n      if (approver.role !== UserRole.EXECUTIVE && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Budget changes must be approved by an Executive or Admin');\n      }\n      break;\n    case ChangeRequestType.SCOPE:\n      // Scope changes require PROJECT_MANAGER, MAIN_PMO, EXECUTIVE or ADMIN approval\n      if (approver.role !== UserRole.PROJECT_MANAGER && approver.role !== UserRole.MAIN_PMO && approver.role !== UserRole.EXECUTIVE && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Scope changes must be approved by a Project Manager, Main PMO, Executive or Admin');\n      }\n      break;\n    case ChangeRequestType.RESOURCE:\n      // Project delegation requires MAIN_PMO or ADMIN approval\n      if (approver.role !== UserRole.MAIN_PMO && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Project delegation must be approved by a Main PMO or Admin');\n      }\n      break;\n    case ChangeRequestType.CLOSURE:\n      // Project closure requires EXECUTIVE or ADMIN approval\n      if (approver.role !== UserRole.EXECUTIVE && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Project closure must be approved by an Executive or Admin');\n      }\n      break;\n    default:\n      // Other changes follow standard approval flow\n      if (!canApproveProjects(approver.role)) {\n        result.passed = false;\n        result.issues.push('Change requests must be approved by a user with approval permissions');\n      }\n  }\n  return result;\n};\n\n/**\n * Run a full audit of the application for compliance with ClientTerms\n */\nexport const runFullAudit = () => {\n  const result = {\n    passed: true,\n    issues: []\n  };\n\n  // The full audit checks:\n  // 1. All projects have valid managers with appropriate roles\n  // 2. All change requests have followed the proper approval flow\n  // 3. All closed projects have proper closure documentation\n  // 4. All budget changes are properly justified\n  // 5. All delegated projects have transition plans\n\n  // Query the application's data store and perform detailed checks\n  const changeRequests = JSON.parse(localStorage.getItem('changeRequests') || '[]');\n  const users = JSON.parse(localStorage.getItem('users') || '[]');\n  const projects = JSON.parse(localStorage.getItem('projects') || '[]');\n\n  // Check for projects without valid managers\n  projects.forEach(project => {\n    if (!project.projectManager || !project.projectManager.id) {\n      result.passed = false;\n      result.issues.push(`Project ${project.name} does not have a valid project manager assigned`);\n    }\n  });\n\n  // Check if all current change requests follow approval flows\n  if (changeRequests.length > 0) {\n    changeRequests.forEach(cr => {\n      var _cr$scheduleChange, _cr$budgetChange, _cr$scopeChange, _cr$resourceChange;\n      if (cr.reviewerId) {\n        const approver = users.find(u => u.id === cr.reviewerId);\n        if (approver) {\n          const crAudit = validateChangeRequestApproval(cr, approver);\n          if (!crAudit.passed) {\n            result.passed = false;\n            result.issues.push(...crAudit.issues);\n          }\n        }\n      }\n\n      // Check for specific change request types and their requirements\n      switch (cr.type) {\n        case ChangeRequestType.SCHEDULE:\n          if (!((_cr$scheduleChange = cr.scheduleChange) !== null && _cr$scheduleChange !== void 0 && _cr$scheduleChange.proposedEndDate) && !cr.proposedEndDate) {\n            result.passed = false;\n            result.issues.push(`Schedule change request ${cr.id} is missing a new end date`);\n          }\n          break;\n        case ChangeRequestType.BUDGET:\n          if (!((_cr$budgetChange = cr.budgetChange) !== null && _cr$budgetChange !== void 0 && _cr$budgetChange.proposedBudget) && !cr.proposedBudget) {\n            result.passed = false;\n            result.issues.push(`Budget change request ${cr.id} is missing a new cost value`);\n          }\n          break;\n        case ChangeRequestType.SCOPE:\n          if (!((_cr$scopeChange = cr.scopeChange) !== null && _cr$scopeChange !== void 0 && _cr$scopeChange.changes) && !cr.scopeChanges) {\n            result.passed = false;\n            result.issues.push(`Scope change request ${cr.id} is missing scope description`);\n          }\n          break;\n        case ChangeRequestType.RESOURCE:\n          if (!((_cr$resourceChange = cr.resourceChange) !== null && _cr$resourceChange !== void 0 && _cr$resourceChange.changes) && !cr.resourceChanges) {\n            result.passed = false;\n            result.issues.push(`Resource change request ${cr.id} is missing required resources`);\n          }\n          break;\n        case ChangeRequestType.CLOSURE:\n          // For closure type, just check if there's a description since we don't have a dedicated field\n          if (cr.description.length < 10) {\n            result.passed = false;\n            result.issues.push(`Closure request ${cr.id} is missing sufficient closure reason`);\n          }\n          break;\n      }\n    });\n  }\n\n  // Check for closed projects without proper documentation\n  const closedProjects = projects.filter(p => p.status === 'CLOSED');\n  closedProjects.forEach(project => {\n    const closureRequests = changeRequests.filter(cr => cr.projectId === project.id && cr.type === ChangeRequestType.CLOSURE);\n    if (closureRequests.length === 0) {\n      result.passed = false;\n      result.issues.push(`Closed project ${project.name} does not have a closure request on record`);\n    }\n  });\n  return result;\n};\n\n/**\n * Get audit recommendations based on audit results\n */\nexport const getAuditRecommendations = auditResult => {\n  const recommendations = [];\n  if (!auditResult.passed) {\n    recommendations.push('Review the approval workflow for change requests');\n    recommendations.push('Ensure all users understand their approval authorities');\n    recommendations.push('Add validation in the UI to prevent unauthorized approvals');\n    recommendations.push('Implement real-time permission checks for all sensitive operations');\n  }\n  return recommendations;\n};","map":{"version":3,"names":["UserRole","ChangeRequestType","canApproveProjects","validateChangeRequestApproval","changeRequest","approver","result","passed","issues","role","push","firstName","lastName","type","SCHEDULE","MAIN_PMO","ADMIN","BUDGET","EXECUTIVE","SCOPE","PROJECT_MANAGER","RESOURCE","CLOSURE","runFullAudit","changeRequests","JSON","parse","localStorage","getItem","users","projects","forEach","project","projectManager","id","name","length","cr","_cr$scheduleChange","_cr$budgetChange","_cr$scopeChange","_cr$resourceChange","reviewerId","find","u","crAudit","scheduleChange","proposedEndDate","budgetChange","proposedBudget","scopeChange","changes","scopeChanges","resourceChange","resourceChanges","description","closedProjects","filter","p","status","closureRequests","projectId","getAuditRecommendations","auditResult","recommendations"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/utils/auditUtils.ts"],"sourcesContent":["import { User, UserRole } from '../types';\nimport { ChangeRequest, ChangeRequestType, ChangeRequestStatus } from '../types/change-request';\nimport { canApproveProjects } from './permissions';\n\n/**\n * Utility to audit the application's compliance with ClientTerms\n */\n\nexport interface AuditResult {\n  passed: boolean;\n  issues: string[];\n}\n\n/**\n * Check if a change request follows the proper approval flow\n * @param changeRequest - The change request to check\n * @param approver - The user approving the request\n */\nexport const validateChangeRequestApproval = (\n  changeRequest: ChangeRequest,\n  approver: User\n): AuditResult => {\n  const result: AuditResult = { passed: true, issues: [] };\n\n  // Check if approver has permission to approve change requests\n  if (!canApproveProjects(approver.role)) {\n    result.passed = false;\n    result.issues.push(`User ${approver.firstName} ${approver.lastName} does not have permission to approve change requests`);\n  }\n\n  // Different approval flows based on change request type\n  switch (changeRequest.type) {\n    case ChangeRequestType.SCHEDULE:\n      // Project extensions require MAIN_PMO or ADMIN approval\n      if (approver.role !== UserRole.MAIN_PMO && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Project extensions must be approved by a Main PMO or Admin');\n      }\n      break;\n    case ChangeRequestType.BUDGET:\n      // Budget changes require EXECUTIVE or ADMIN approval\n      if (approver.role !== UserRole.EXECUTIVE && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Budget changes must be approved by an Executive or Admin');\n      }\n      break;\n    case ChangeRequestType.SCOPE:\n      // Scope changes require PROJECT_MANAGER, MAIN_PMO, EXECUTIVE or ADMIN approval\n      if (\n        approver.role !== UserRole.PROJECT_MANAGER &&\n        approver.role !== UserRole.MAIN_PMO &&\n        approver.role !== UserRole.EXECUTIVE &&\n        approver.role !== UserRole.ADMIN\n      ) {\n        result.passed = false;\n        result.issues.push('Scope changes must be approved by a Project Manager, Main PMO, Executive or Admin');\n      }\n      break;\n    case ChangeRequestType.RESOURCE:\n      // Project delegation requires MAIN_PMO or ADMIN approval\n      if (approver.role !== UserRole.MAIN_PMO && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Project delegation must be approved by a Main PMO or Admin');\n      }\n      break;\n    case ChangeRequestType.CLOSURE:\n      // Project closure requires EXECUTIVE or ADMIN approval\n      if (approver.role !== UserRole.EXECUTIVE && approver.role !== UserRole.ADMIN) {\n        result.passed = false;\n        result.issues.push('Project closure must be approved by an Executive or Admin');\n      }\n      break;\n    default:\n      // Other changes follow standard approval flow\n      if (!canApproveProjects(approver.role)) {\n        result.passed = false;\n        result.issues.push('Change requests must be approved by a user with approval permissions');\n      }\n  }\n\n  return result;\n};\n\n/**\n * Run a full audit of the application for compliance with ClientTerms\n */\nexport const runFullAudit = (): AuditResult => {\n  const result: AuditResult = { passed: true, issues: [] };\n\n  // The full audit checks:\n  // 1. All projects have valid managers with appropriate roles\n  // 2. All change requests have followed the proper approval flow\n  // 3. All closed projects have proper closure documentation\n  // 4. All budget changes are properly justified\n  // 5. All delegated projects have transition plans\n  \n  // Query the application's data store and perform detailed checks\n  const changeRequests = JSON.parse(localStorage.getItem('changeRequests') || '[]');\n  const users = JSON.parse(localStorage.getItem('users') || '[]');\n  const projects = JSON.parse(localStorage.getItem('projects') || '[]');\n  \n  // Check for projects without valid managers\n  projects.forEach((project: any) => {\n    if (!project.projectManager || !project.projectManager.id) {\n      result.passed = false;\n      result.issues.push(`Project ${project.name} does not have a valid project manager assigned`);\n    }\n  });\n  \n  // Check if all current change requests follow approval flows\n  if (changeRequests.length > 0) {\n    changeRequests.forEach((cr: ChangeRequest) => {\n      if (cr.reviewerId) {\n        const approver = users.find((u: User) => u.id === cr.reviewerId);\n        if (approver) {\n          const crAudit = validateChangeRequestApproval(cr, approver);\n          if (!crAudit.passed) {\n            result.passed = false;\n            result.issues.push(...crAudit.issues);\n          }\n        }\n      }\n      \n      // Check for specific change request types and their requirements\n      switch(cr.type) {\n        case ChangeRequestType.SCHEDULE:\n          if (!cr.scheduleChange?.proposedEndDate && !cr.proposedEndDate) {\n            result.passed = false;\n            result.issues.push(`Schedule change request ${cr.id} is missing a new end date`);\n          }\n          break;\n        case ChangeRequestType.BUDGET:\n          if (!cr.budgetChange?.proposedBudget && !cr.proposedBudget) {\n            result.passed = false;\n            result.issues.push(`Budget change request ${cr.id} is missing a new cost value`);\n          }\n          break;\n        case ChangeRequestType.SCOPE:\n          if (!cr.scopeChange?.changes && !cr.scopeChanges) {\n            result.passed = false;\n            result.issues.push(`Scope change request ${cr.id} is missing scope description`);\n          }\n          break;\n        case ChangeRequestType.RESOURCE:\n          if (!cr.resourceChange?.changes && !cr.resourceChanges) {\n            result.passed = false;\n            result.issues.push(`Resource change request ${cr.id} is missing required resources`);\n          }\n          break;\n        case ChangeRequestType.CLOSURE:\n          // For closure type, just check if there's a description since we don't have a dedicated field\n          if (cr.description.length < 10) {\n            result.passed = false;\n            result.issues.push(`Closure request ${cr.id} is missing sufficient closure reason`);\n          }\n          break;\n      }\n    });\n  }\n  \n  // Check for closed projects without proper documentation\n  const closedProjects = projects.filter((p: any) => p.status === 'CLOSED');\n  closedProjects.forEach((project: any) => {\n    const closureRequests = changeRequests.filter(\n      (cr: ChangeRequest) => cr.projectId === project.id && cr.type === ChangeRequestType.CLOSURE\n    );\n    \n    if (closureRequests.length === 0) {\n      result.passed = false;\n      result.issues.push(`Closed project ${project.name} does not have a closure request on record`);\n    }\n  });\n\n  return result;\n};\n\n/**\n * Get audit recommendations based on audit results\n */\nexport const getAuditRecommendations = (auditResult: AuditResult): string[] => {\n  const recommendations: string[] = [];\n\n  if (!auditResult.passed) {\n    recommendations.push('Review the approval workflow for change requests');\n    recommendations.push('Ensure all users understand their approval authorities');\n    recommendations.push('Add validation in the UI to prevent unauthorized approvals');\n    recommendations.push('Implement real-time permission checks for all sensitive operations');\n  }\n\n  return recommendations;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}