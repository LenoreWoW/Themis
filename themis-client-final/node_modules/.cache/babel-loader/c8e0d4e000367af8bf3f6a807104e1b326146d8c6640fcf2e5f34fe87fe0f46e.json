{"ast":null,"code":"import{useEffect,useState}from'react';// Konami code sequence: up, up, down, down, left, right, left, right, b, a\nconst KONAMI_CODE=['ArrowUp','ArrowUp','ArrowDown','ArrowDown','ArrowLeft','ArrowRight','ArrowLeft','ArrowRight','KeyB','KeyA'];export const useKonamiCode=callback=>{const[keys,setKeys]=useState([]);useEffect(()=>{const handleKeyDown=event=>{// Use event.code for more consistent key detection across different keyboard layouts\nconst keyPressed=event.code;// Add the key to the sequence (keeping only the last N keys where N is the length of the Konami code)\nconst updatedKeys=[...keys,keyPressed].slice(-KONAMI_CODE.length);setKeys(updatedKeys);// Check if the sequence matches the Konami code\nconst isKonamiCode=updatedKeys.length===KONAMI_CODE.length&&updatedKeys.every((key,index)=>key===KONAMI_CODE[index]);if(isKonamiCode){// Execute the callback when Konami code is detected\ncallback();}};window.addEventListener('keydown',handleKeyDown);return()=>{window.removeEventListener('keydown',handleKeyDown);};},[keys,callback]);};","map":{"version":3,"names":["useEffect","useState","KONAMI_CODE","useKonamiCode","callback","keys","setKeys","handleKeyDown","event","keyPressed","code","updatedKeys","slice","length","isKonamiCode","every","key","index","window","addEventListener","removeEventListener"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/hooks/useKonamiCode.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n// Konami code sequence: up, up, down, down, left, right, left, right, b, a\nconst KONAMI_CODE = [\n  'ArrowUp', \n  'ArrowUp', \n  'ArrowDown', \n  'ArrowDown', \n  'ArrowLeft', \n  'ArrowRight', \n  'ArrowLeft', \n  'ArrowRight', \n  'KeyB', \n  'KeyA'\n];\n\nexport const useKonamiCode = (callback: () => void): void => {\n  const [keys, setKeys] = useState<string[]>([]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Use event.code for more consistent key detection across different keyboard layouts\n      const keyPressed = event.code;\n      \n      // Add the key to the sequence (keeping only the last N keys where N is the length of the Konami code)\n      const updatedKeys = [...keys, keyPressed].slice(-KONAMI_CODE.length);\n      setKeys(updatedKeys);\n      \n      // Check if the sequence matches the Konami code\n      const isKonamiCode = updatedKeys.length === KONAMI_CODE.length && \n        updatedKeys.every((key, index) => key === KONAMI_CODE[index]);\n      \n      if (isKonamiCode) {\n        // Execute the callback when Konami code is detected\n        callback();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [keys, callback]);\n}; "],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C;AACA,KAAM,CAAAC,WAAW,CAAG,CAClB,SAAS,CACT,SAAS,CACT,WAAW,CACX,WAAW,CACX,WAAW,CACX,YAAY,CACZ,WAAW,CACX,YAAY,CACZ,MAAM,CACN,MAAM,CACP,CAED,MAAO,MAAM,CAAAC,aAAa,CAAIC,QAAoB,EAAW,CAC3D,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGL,QAAQ,CAAW,EAAE,CAAC,CAE9CD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAO,aAAa,CAAIC,KAAoB,EAAK,CAC9C;AACA,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,IAAI,CAE7B;AACA,KAAM,CAAAC,WAAW,CAAG,CAAC,GAAGN,IAAI,CAAEI,UAAU,CAAC,CAACG,KAAK,CAAC,CAACV,WAAW,CAACW,MAAM,CAAC,CACpEP,OAAO,CAACK,WAAW,CAAC,CAEpB;AACA,KAAM,CAAAG,YAAY,CAAGH,WAAW,CAACE,MAAM,GAAKX,WAAW,CAACW,MAAM,EAC5DF,WAAW,CAACI,KAAK,CAAC,CAACC,GAAG,CAAEC,KAAK,GAAKD,GAAG,GAAKd,WAAW,CAACe,KAAK,CAAC,CAAC,CAE/D,GAAIH,YAAY,CAAE,CAChB;AACAV,QAAQ,CAAC,CAAC,CACZ,CACF,CAAC,CAEDc,MAAM,CAACC,gBAAgB,CAAC,SAAS,CAAEZ,aAAa,CAAC,CAEjD,MAAO,IAAM,CACXW,MAAM,CAACE,mBAAmB,CAAC,SAAS,CAAEb,aAAa,CAAC,CACtD,CAAC,CACH,CAAC,CAAE,CAACF,IAAI,CAAED,QAAQ,CAAC,CAAC,CACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}