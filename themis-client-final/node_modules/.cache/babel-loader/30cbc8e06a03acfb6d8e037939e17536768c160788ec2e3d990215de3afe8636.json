{"ast":null,"code":"// Keys for localStorage items\nconst STORAGE_KEYS = {\n  TASKS: 'themis_tasks',\n  PROJECTS: 'themis_projects',\n  MEETINGS: 'themis_meetings',\n  INDEPENDENT_TASKS: 'themis_independent_tasks',\n  RISKS: 'themis_risks',\n  ISSUES: 'themis_issues',\n  DEPARTMENTS: 'themis_departments'\n};\n\n// Interface for a Meeting object\n\n/**\n * Service for persisting data in localStorage when using mock data\n * This allows data to survive page refreshes during development\n */\nconst LocalStorageService = {\n  // Tasks\n  getTasks: projectId => {\n    try {\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.TASKS);\n      if (!tasksJson) return [];\n      const allTasks = JSON.parse(tasksJson);\n      return allTasks[projectId] || [];\n    } catch (error) {\n      console.error('Error retrieving tasks from localStorage:', error);\n      return [];\n    }\n  },\n  saveTasks: (projectId, tasks) => {\n    try {\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.TASKS);\n      const allTasks = tasksJson ? JSON.parse(tasksJson) : {};\n      allTasks[projectId] = tasks;\n      localStorage.setItem(STORAGE_KEYS.TASKS, JSON.stringify(allTasks));\n    } catch (error) {\n      console.error('Error saving tasks to localStorage:', error);\n    }\n  },\n  addTask: task => {\n    try {\n      var _task$project;\n      // Get the projectId from the task's project property\n      const projectId = (_task$project = task.project) === null || _task$project === void 0 ? void 0 : _task$project.id;\n      if (!projectId) return;\n      const tasks = LocalStorageService.getTasks(projectId);\n      tasks.push(task);\n      LocalStorageService.saveTasks(projectId, tasks);\n    } catch (error) {\n      console.error('Error adding task to localStorage:', error);\n    }\n  },\n  updateTask: (projectId, taskId, updatedTask) => {\n    try {\n      const tasks = LocalStorageService.getTasks(projectId);\n      const taskIndex = tasks.findIndex(t => t.id === taskId);\n      if (taskIndex === -1) return null;\n      tasks[taskIndex] = {\n        ...tasks[taskIndex],\n        ...updatedTask\n      };\n      LocalStorageService.saveTasks(projectId, tasks);\n      return tasks[taskIndex];\n    } catch (error) {\n      console.error('Error updating task in localStorage:', error);\n      return null;\n    }\n  },\n  deleteTask: (projectId, taskId) => {\n    try {\n      const tasks = LocalStorageService.getTasks(projectId);\n      const updatedTasks = tasks.filter(t => t.id !== taskId);\n      LocalStorageService.saveTasks(projectId, updatedTasks);\n    } catch (error) {\n      console.error('Error deleting task from localStorage:', error);\n    }\n  },\n  // Independent Tasks\n  getIndependentTasks: () => {\n    try {\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.INDEPENDENT_TASKS);\n      return tasksJson ? JSON.parse(tasksJson) : [];\n    } catch (error) {\n      console.error('Error retrieving independent tasks from localStorage:', error);\n      return [];\n    }\n  },\n  saveIndependentTasks: tasks => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.INDEPENDENT_TASKS, JSON.stringify(tasks));\n    } catch (error) {\n      console.error('Error saving independent tasks to localStorage:', error);\n    }\n  },\n  addIndependentTask: task => {\n    try {\n      const tasks = LocalStorageService.getIndependentTasks();\n      tasks.push(task);\n      LocalStorageService.saveIndependentTasks(tasks);\n    } catch (error) {\n      console.error('Error adding independent task to localStorage:', error);\n    }\n  },\n  updateIndependentTask: (taskId, updatedTask) => {\n    try {\n      const tasks = LocalStorageService.getIndependentTasks();\n      const taskIndex = tasks.findIndex(t => t.id === taskId);\n      if (taskIndex === -1) return null;\n      tasks[taskIndex] = {\n        ...tasks[taskIndex],\n        ...updatedTask\n      };\n      LocalStorageService.saveIndependentTasks(tasks);\n      return tasks[taskIndex];\n    } catch (error) {\n      console.error('Error updating independent task in localStorage:', error);\n      return null;\n    }\n  },\n  deleteIndependentTask: taskId => {\n    try {\n      const tasks = LocalStorageService.getIndependentTasks();\n      const updatedTasks = tasks.filter(t => t.id !== taskId);\n      LocalStorageService.saveIndependentTasks(updatedTasks);\n    } catch (error) {\n      console.error('Error deleting independent task from localStorage:', error);\n    }\n  },\n  // Projects\n  getProjects: () => {\n    try {\n      const projectsJson = localStorage.getItem(STORAGE_KEYS.PROJECTS);\n      return projectsJson ? JSON.parse(projectsJson) : [];\n    } catch (error) {\n      console.error('Error retrieving projects from localStorage:', error);\n      return [];\n    }\n  },\n  saveProjects: projects => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.PROJECTS, JSON.stringify(projects));\n    } catch (error) {\n      console.error('Error saving projects to localStorage:', error);\n    }\n  },\n  getProject: projectId => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      return projects.find(p => p.id === projectId) || null;\n    } catch (error) {\n      console.error('Error retrieving project from localStorage:', error);\n      return null;\n    }\n  },\n  addProject: project => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      projects.push(project);\n      LocalStorageService.saveProjects(projects);\n    } catch (error) {\n      console.error('Error adding project to localStorage:', error);\n    }\n  },\n  updateProject: (projectId, updatedProject) => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      const projectIndex = projects.findIndex(p => p.id === projectId);\n      if (projectIndex === -1) return null;\n      projects[projectIndex] = {\n        ...projects[projectIndex],\n        ...updatedProject\n      };\n      LocalStorageService.saveProjects(projects);\n      return projects[projectIndex];\n    } catch (error) {\n      console.error('Error updating project in localStorage:', error);\n      return null;\n    }\n  },\n  deleteProject: projectId => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      const updatedProjects = projects.filter(p => p.id !== projectId);\n      LocalStorageService.saveProjects(updatedProjects);\n\n      // Also delete associated tasks\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.TASKS);\n      if (tasksJson) {\n        const allTasks = JSON.parse(tasksJson);\n        delete allTasks[projectId];\n        localStorage.setItem(STORAGE_KEYS.TASKS, JSON.stringify(allTasks));\n      }\n\n      // Risks\n      const risksJson = localStorage.getItem(STORAGE_KEYS.RISKS);\n      if (risksJson) {\n        const allRisks = JSON.parse(risksJson);\n        delete allRisks[projectId];\n        localStorage.setItem(STORAGE_KEYS.RISKS, JSON.stringify(allRisks));\n      }\n\n      // Issues\n      const issuesJson = localStorage.getItem(STORAGE_KEYS.ISSUES);\n      if (issuesJson) {\n        const allIssues = JSON.parse(issuesJson);\n        delete allIssues[projectId];\n        localStorage.setItem(STORAGE_KEYS.ISSUES, JSON.stringify(allIssues));\n      }\n    } catch (error) {\n      console.error('Error deleting project from localStorage:', error);\n    }\n  },\n  // Meetings\n  getMeetings: () => {\n    try {\n      const meetingsJson = localStorage.getItem(STORAGE_KEYS.MEETINGS);\n      return meetingsJson ? JSON.parse(meetingsJson) : [];\n    } catch (error) {\n      console.error('Error retrieving meetings from localStorage:', error);\n      return [];\n    }\n  },\n  saveMeetings: meetings => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.MEETINGS, JSON.stringify(meetings));\n    } catch (error) {\n      console.error('Error saving meetings to localStorage:', error);\n    }\n  },\n  addMeeting: meeting => {\n    try {\n      const meetings = LocalStorageService.getMeetings();\n      meetings.push(meeting);\n      LocalStorageService.saveMeetings(meetings);\n    } catch (error) {\n      console.error('Error adding meeting to localStorage:', error);\n    }\n  },\n  updateMeeting: (meetingId, updatedMeeting) => {\n    try {\n      const meetings = LocalStorageService.getMeetings();\n      const meetingIndex = meetings.findIndex(m => m.id === meetingId);\n      if (meetingIndex === -1) return null;\n      meetings[meetingIndex] = {\n        ...meetings[meetingIndex],\n        ...updatedMeeting\n      };\n      LocalStorageService.saveMeetings(meetings);\n      return meetings[meetingIndex];\n    } catch (error) {\n      console.error('Error updating meeting in localStorage:', error);\n      return null;\n    }\n  },\n  deleteMeeting: meetingId => {\n    try {\n      const meetings = LocalStorageService.getMeetings();\n      const updatedMeetings = meetings.filter(m => m.id !== meetingId);\n      LocalStorageService.saveMeetings(updatedMeetings);\n    } catch (error) {\n      console.error('Error deleting meeting from localStorage:', error);\n    }\n  },\n  // Risks\n  getRisks: projectId => {\n    try {\n      const risksJson = localStorage.getItem(STORAGE_KEYS.RISKS);\n      if (!risksJson) return [];\n      const allRisks = JSON.parse(risksJson);\n      return allRisks[projectId] || [];\n    } catch (error) {\n      console.error('Error retrieving risks from localStorage:', error);\n      return [];\n    }\n  },\n  saveRisks: (projectId, risks) => {\n    try {\n      const risksJson = localStorage.getItem(STORAGE_KEYS.RISKS);\n      const allRisks = risksJson ? JSON.parse(risksJson) : {};\n      allRisks[projectId] = risks;\n      localStorage.setItem(STORAGE_KEYS.RISKS, JSON.stringify(allRisks));\n    } catch (error) {\n      console.error('Error saving risks to localStorage:', error);\n    }\n  },\n  addRisk: risk => {\n    try {\n      const {\n        projectId\n      } = risk;\n      const risks = LocalStorageService.getRisks(projectId);\n      risks.push(risk);\n      LocalStorageService.saveRisks(projectId, risks);\n    } catch (error) {\n      console.error('Error adding risk to localStorage:', error);\n    }\n  },\n  updateRisk: (projectId, riskId, updatedRisk) => {\n    try {\n      const risks = LocalStorageService.getRisks(projectId);\n      const riskIndex = risks.findIndex(r => r.id === riskId);\n      if (riskIndex === -1) return null;\n      risks[riskIndex] = {\n        ...risks[riskIndex],\n        ...updatedRisk\n      };\n      LocalStorageService.saveRisks(projectId, risks);\n      return risks[riskIndex];\n    } catch (error) {\n      console.error('Error updating risk in localStorage:', error);\n      return null;\n    }\n  },\n  deleteRisk: (projectId, riskId) => {\n    try {\n      const risks = LocalStorageService.getRisks(projectId);\n      const updatedRisks = risks.filter(r => r.id !== riskId);\n      LocalStorageService.saveRisks(projectId, updatedRisks);\n    } catch (error) {\n      console.error('Error deleting risk from localStorage:', error);\n    }\n  },\n  // Issues\n  getIssues: projectId => {\n    try {\n      const issuesJson = localStorage.getItem(STORAGE_KEYS.ISSUES);\n      if (!issuesJson) return [];\n      const allIssues = JSON.parse(issuesJson);\n      return allIssues[projectId] || [];\n    } catch (error) {\n      console.error('Error retrieving issues from localStorage:', error);\n      return [];\n    }\n  },\n  saveIssues: (projectId, issues) => {\n    try {\n      const issuesJson = localStorage.getItem(STORAGE_KEYS.ISSUES);\n      const allIssues = issuesJson ? JSON.parse(issuesJson) : {};\n      allIssues[projectId] = issues;\n      localStorage.setItem(STORAGE_KEYS.ISSUES, JSON.stringify(allIssues));\n    } catch (error) {\n      console.error('Error saving issues to localStorage:', error);\n    }\n  },\n  addIssue: issue => {\n    try {\n      const {\n        projectId\n      } = issue;\n      const issues = LocalStorageService.getIssues(projectId);\n      issues.push(issue);\n      LocalStorageService.saveIssues(projectId, issues);\n    } catch (error) {\n      console.error('Error adding issue to localStorage:', error);\n    }\n  },\n  updateIssue: (projectId, issueId, updatedIssue) => {\n    try {\n      const issues = LocalStorageService.getIssues(projectId);\n      const issueIndex = issues.findIndex(i => i.id === issueId);\n      if (issueIndex === -1) return null;\n      issues[issueIndex] = {\n        ...issues[issueIndex],\n        ...updatedIssue\n      };\n      LocalStorageService.saveIssues(projectId, issues);\n      return issues[issueIndex];\n    } catch (error) {\n      console.error('Error updating issue in localStorage:', error);\n      return null;\n    }\n  },\n  deleteIssue: (projectId, issueId) => {\n    try {\n      const issues = LocalStorageService.getIssues(projectId);\n      const updatedIssues = issues.filter(i => i.id !== issueId);\n      LocalStorageService.saveIssues(projectId, updatedIssues);\n    } catch (error) {\n      console.error('Error deleting issue from localStorage:', error);\n    }\n  },\n  // Departments\n  getDepartments: () => {\n    try {\n      const departmentsJson = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n      return departmentsJson ? JSON.parse(departmentsJson) : [];\n    } catch (error) {\n      console.error('Error retrieving departments from localStorage:', error);\n      return [];\n    }\n  },\n  saveDepartments: departments => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n    } catch (error) {\n      console.error('Error saving departments to localStorage:', error);\n    }\n  },\n  addDepartment: department => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      if (!departments.find(d => d.id === department.id)) {\n        departments.push(department);\n        LocalStorageService.saveDepartments(departments);\n      }\n    } catch (error) {\n      console.error('Error adding department to localStorage:', error);\n    }\n  },\n  getDepartment: departmentId => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      return departments.find(d => d.id === departmentId) || null;\n    } catch (error) {\n      console.error('Error retrieving department from localStorage:', error);\n      return null;\n    }\n  },\n  updateDepartment: (departmentId, updatedDepartment) => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      const departmentIndex = departments.findIndex(d => d.id === departmentId);\n      if (departmentIndex === -1) return null;\n      departments[departmentIndex] = {\n        ...departments[departmentIndex],\n        ...updatedDepartment\n      };\n      LocalStorageService.saveDepartments(departments);\n      return departments[departmentIndex];\n    } catch (error) {\n      console.error('Error updating department in localStorage:', error);\n      return null;\n    }\n  },\n  deleteDepartment: departmentId => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      const updatedDepartments = departments.filter(d => d.id !== departmentId);\n      LocalStorageService.saveDepartments(updatedDepartments);\n    } catch (error) {\n      console.error('Error deleting department from localStorage:', error);\n    }\n  },\n  // Initialize with default data if storage is empty\n  initialize: (defaultProjects = [], defaultMeetings = []) => {\n    try {\n      // Always set empty arrays regardless of what's passed in\n      LocalStorageService.saveProjects([]);\n      LocalStorageService.saveMeetings([]);\n      LocalStorageService.saveDepartments([]);\n\n      // Clear any other data that might exist\n      localStorage.removeItem(STORAGE_KEYS.TASKS);\n      localStorage.removeItem(STORAGE_KEYS.INDEPENDENT_TASKS);\n      localStorage.removeItem(STORAGE_KEYS.RISKS);\n      localStorage.removeItem(STORAGE_KEYS.ISSUES);\n      console.log('LocalStorage initialized with empty data');\n    } catch (error) {\n      console.error('Error initializing localStorage:', error);\n    }\n  },\n  // Clear all storage (for testing/reset)\n  clearAll: () => {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.TASKS);\n      localStorage.removeItem(STORAGE_KEYS.PROJECTS);\n      localStorage.removeItem(STORAGE_KEYS.MEETINGS);\n      localStorage.removeItem(STORAGE_KEYS.INDEPENDENT_TASKS);\n      localStorage.removeItem(STORAGE_KEYS.RISKS);\n      localStorage.removeItem(STORAGE_KEYS.ISSUES);\n      localStorage.removeItem(STORAGE_KEYS.DEPARTMENTS);\n    } catch (error) {\n      console.error('Error clearing localStorage:', error);\n    }\n  },\n  // Add a function to clear all application data\n  clearAllData: () => {\n    try {\n      // Get all keys from localStorage\n      const keys = Object.keys(localStorage);\n\n      // Filter and remove all keys that start with 'themis_'\n      keys.forEach(key => {\n        if (key.startsWith('themis_')) {\n          localStorage.removeItem(key);\n        }\n      });\n      console.log('All application data has been cleared from localStorage');\n    } catch (error) {\n      console.error('Error clearing application data from localStorage:', error);\n    }\n  }\n};\nexport default LocalStorageService;","map":{"version":3,"names":["STORAGE_KEYS","TASKS","PROJECTS","MEETINGS","INDEPENDENT_TASKS","RISKS","ISSUES","DEPARTMENTS","LocalStorageService","getTasks","projectId","tasksJson","localStorage","getItem","allTasks","JSON","parse","error","console","saveTasks","tasks","setItem","stringify","addTask","task","_task$project","project","id","push","updateTask","taskId","updatedTask","taskIndex","findIndex","t","deleteTask","updatedTasks","filter","getIndependentTasks","saveIndependentTasks","addIndependentTask","updateIndependentTask","deleteIndependentTask","getProjects","projectsJson","saveProjects","projects","getProject","find","p","addProject","updateProject","updatedProject","projectIndex","deleteProject","updatedProjects","risksJson","allRisks","issuesJson","allIssues","getMeetings","meetingsJson","saveMeetings","meetings","addMeeting","meeting","updateMeeting","meetingId","updatedMeeting","meetingIndex","m","deleteMeeting","updatedMeetings","getRisks","saveRisks","risks","addRisk","risk","updateRisk","riskId","updatedRisk","riskIndex","r","deleteRisk","updatedRisks","getIssues","saveIssues","issues","addIssue","issue","updateIssue","issueId","updatedIssue","issueIndex","i","deleteIssue","updatedIssues","getDepartments","departmentsJson","saveDepartments","departments","addDepartment","department","d","getDepartment","departmentId","updateDepartment","updatedDepartment","departmentIndex","deleteDepartment","updatedDepartments","initialize","defaultProjects","defaultMeetings","removeItem","log","clearAll","clearAllData","keys","Object","forEach","key","startsWith"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/services/LocalStorageService.ts"],"sourcesContent":["import { Task, Project, User, Risk, Issue, Department } from '../types';\n\n// Keys for localStorage items\nconst STORAGE_KEYS = {\n  TASKS: 'themis_tasks',\n  PROJECTS: 'themis_projects',\n  MEETINGS: 'themis_meetings',\n  INDEPENDENT_TASKS: 'themis_independent_tasks',\n  RISKS: 'themis_risks',\n  ISSUES: 'themis_issues',\n  DEPARTMENTS: 'themis_departments'\n};\n\n// Interface for a Meeting object\nexport interface Meeting {\n  id: string;\n  title: string;\n  description: string;\n  date?: string;\n  startTime: string;\n  endTime: string;\n  location?: string;\n  organizer: User;\n  participants: User[];\n  attendees?: User[];\n  isActive?: boolean;\n  meetingLink?: string;\n  projectId?: string;\n  status?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Service for persisting data in localStorage when using mock data\n * This allows data to survive page refreshes during development\n */\nconst LocalStorageService = {\n  // Tasks\n  getTasks: (projectId: string): Task[] => {\n    try {\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.TASKS);\n      if (!tasksJson) return [];\n      \n      const allTasks = JSON.parse(tasksJson) as Record<string, Task[]>;\n      return allTasks[projectId] || [];\n    } catch (error) {\n      console.error('Error retrieving tasks from localStorage:', error);\n      return [];\n    }\n  },\n  \n  saveTasks: (projectId: string, tasks: Task[]): void => {\n    try {\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.TASKS);\n      const allTasks = tasksJson ? JSON.parse(tasksJson) as Record<string, Task[]> : {};\n      \n      allTasks[projectId] = tasks;\n      localStorage.setItem(STORAGE_KEYS.TASKS, JSON.stringify(allTasks));\n    } catch (error) {\n      console.error('Error saving tasks to localStorage:', error);\n    }\n  },\n  \n  addTask: (task: Task): void => {\n    try {\n      // Get the projectId from the task's project property\n      const projectId = task.project?.id;\n      if (!projectId) return;\n      \n      const tasks = LocalStorageService.getTasks(projectId);\n      tasks.push(task);\n      LocalStorageService.saveTasks(projectId, tasks);\n    } catch (error) {\n      console.error('Error adding task to localStorage:', error);\n    }\n  },\n  \n  updateTask: (projectId: string, taskId: string, updatedTask: Partial<Task>): Task | null => {\n    try {\n      const tasks = LocalStorageService.getTasks(projectId);\n      const taskIndex = tasks.findIndex(t => t.id === taskId);\n      \n      if (taskIndex === -1) return null;\n      \n      tasks[taskIndex] = { ...tasks[taskIndex], ...updatedTask };\n      LocalStorageService.saveTasks(projectId, tasks);\n      \n      return tasks[taskIndex];\n    } catch (error) {\n      console.error('Error updating task in localStorage:', error);\n      return null;\n    }\n  },\n  \n  deleteTask: (projectId: string, taskId: string): void => {\n    try {\n      const tasks = LocalStorageService.getTasks(projectId);\n      const updatedTasks = tasks.filter(t => t.id !== taskId);\n      LocalStorageService.saveTasks(projectId, updatedTasks);\n    } catch (error) {\n      console.error('Error deleting task from localStorage:', error);\n    }\n  },\n  \n  // Independent Tasks\n  getIndependentTasks: (): Task[] => {\n    try {\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.INDEPENDENT_TASKS);\n      return tasksJson ? JSON.parse(tasksJson) : [];\n    } catch (error) {\n      console.error('Error retrieving independent tasks from localStorage:', error);\n      return [];\n    }\n  },\n  \n  saveIndependentTasks: (tasks: Task[]): void => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.INDEPENDENT_TASKS, JSON.stringify(tasks));\n    } catch (error) {\n      console.error('Error saving independent tasks to localStorage:', error);\n    }\n  },\n  \n  addIndependentTask: (task: Task): void => {\n    try {\n      const tasks = LocalStorageService.getIndependentTasks();\n      tasks.push(task);\n      LocalStorageService.saveIndependentTasks(tasks);\n    } catch (error) {\n      console.error('Error adding independent task to localStorage:', error);\n    }\n  },\n  \n  updateIndependentTask: (taskId: string, updatedTask: Partial<Task>): Task | null => {\n    try {\n      const tasks = LocalStorageService.getIndependentTasks();\n      const taskIndex = tasks.findIndex(t => t.id === taskId);\n      \n      if (taskIndex === -1) return null;\n      \n      tasks[taskIndex] = { ...tasks[taskIndex], ...updatedTask };\n      LocalStorageService.saveIndependentTasks(tasks);\n      \n      return tasks[taskIndex];\n    } catch (error) {\n      console.error('Error updating independent task in localStorage:', error);\n      return null;\n    }\n  },\n  \n  deleteIndependentTask: (taskId: string): void => {\n    try {\n      const tasks = LocalStorageService.getIndependentTasks();\n      const updatedTasks = tasks.filter(t => t.id !== taskId);\n      LocalStorageService.saveIndependentTasks(updatedTasks);\n    } catch (error) {\n      console.error('Error deleting independent task from localStorage:', error);\n    }\n  },\n  \n  // Projects\n  getProjects: (): Project[] => {\n    try {\n      const projectsJson = localStorage.getItem(STORAGE_KEYS.PROJECTS);\n      return projectsJson ? JSON.parse(projectsJson) : [];\n    } catch (error) {\n      console.error('Error retrieving projects from localStorage:', error);\n      return [];\n    }\n  },\n  \n  saveProjects: (projects: Project[]): void => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.PROJECTS, JSON.stringify(projects));\n    } catch (error) {\n      console.error('Error saving projects to localStorage:', error);\n    }\n  },\n  \n  getProject: (projectId: string): Project | null => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      return projects.find(p => p.id === projectId) || null;\n    } catch (error) {\n      console.error('Error retrieving project from localStorage:', error);\n      return null;\n    }\n  },\n  \n  addProject: (project: Project): void => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      projects.push(project);\n      LocalStorageService.saveProjects(projects);\n    } catch (error) {\n      console.error('Error adding project to localStorage:', error);\n    }\n  },\n  \n  updateProject: (projectId: string, updatedProject: Partial<Project>): Project | null => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      const projectIndex = projects.findIndex(p => p.id === projectId);\n      \n      if (projectIndex === -1) return null;\n      \n      projects[projectIndex] = { ...projects[projectIndex], ...updatedProject };\n      LocalStorageService.saveProjects(projects);\n      \n      return projects[projectIndex];\n    } catch (error) {\n      console.error('Error updating project in localStorage:', error);\n      return null;\n    }\n  },\n  \n  deleteProject: (projectId: string): void => {\n    try {\n      const projects = LocalStorageService.getProjects();\n      const updatedProjects = projects.filter(p => p.id !== projectId);\n      LocalStorageService.saveProjects(updatedProjects);\n      \n      // Also delete associated tasks\n      const tasksJson = localStorage.getItem(STORAGE_KEYS.TASKS);\n      if (tasksJson) {\n        const allTasks = JSON.parse(tasksJson) as Record<string, Task[]>;\n        delete allTasks[projectId];\n        localStorage.setItem(STORAGE_KEYS.TASKS, JSON.stringify(allTasks));\n      }\n      \n      // Risks\n      const risksJson = localStorage.getItem(STORAGE_KEYS.RISKS);\n      if (risksJson) {\n        const allRisks = JSON.parse(risksJson) as Record<string, Risk[]>;\n        delete allRisks[projectId];\n        localStorage.setItem(STORAGE_KEYS.RISKS, JSON.stringify(allRisks));\n      }\n      \n      // Issues\n      const issuesJson = localStorage.getItem(STORAGE_KEYS.ISSUES);\n      if (issuesJson) {\n        const allIssues = JSON.parse(issuesJson) as Record<string, Issue[]>;\n        delete allIssues[projectId];\n        localStorage.setItem(STORAGE_KEYS.ISSUES, JSON.stringify(allIssues));\n      }\n    } catch (error) {\n      console.error('Error deleting project from localStorage:', error);\n    }\n  },\n  \n  // Meetings\n  getMeetings: (): Meeting[] => {\n    try {\n      const meetingsJson = localStorage.getItem(STORAGE_KEYS.MEETINGS);\n      return meetingsJson ? JSON.parse(meetingsJson) : [];\n    } catch (error) {\n      console.error('Error retrieving meetings from localStorage:', error);\n      return [];\n    }\n  },\n  \n  saveMeetings: (meetings: Meeting[]): void => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.MEETINGS, JSON.stringify(meetings));\n    } catch (error) {\n      console.error('Error saving meetings to localStorage:', error);\n    }\n  },\n  \n  addMeeting: (meeting: Meeting): void => {\n    try {\n      const meetings = LocalStorageService.getMeetings();\n      meetings.push(meeting);\n      LocalStorageService.saveMeetings(meetings);\n    } catch (error) {\n      console.error('Error adding meeting to localStorage:', error);\n    }\n  },\n  \n  updateMeeting: (meetingId: string, updatedMeeting: Partial<Meeting>): Meeting | null => {\n    try {\n      const meetings = LocalStorageService.getMeetings();\n      const meetingIndex = meetings.findIndex(m => m.id === meetingId);\n      \n      if (meetingIndex === -1) return null;\n      \n      meetings[meetingIndex] = { ...meetings[meetingIndex], ...updatedMeeting };\n      LocalStorageService.saveMeetings(meetings);\n      \n      return meetings[meetingIndex];\n    } catch (error) {\n      console.error('Error updating meeting in localStorage:', error);\n      return null;\n    }\n  },\n  \n  deleteMeeting: (meetingId: string): void => {\n    try {\n      const meetings = LocalStorageService.getMeetings();\n      const updatedMeetings = meetings.filter(m => m.id !== meetingId);\n      LocalStorageService.saveMeetings(updatedMeetings);\n    } catch (error) {\n      console.error('Error deleting meeting from localStorage:', error);\n    }\n  },\n  \n  // Risks\n  getRisks: (projectId: string): Risk[] => {\n    try {\n      const risksJson = localStorage.getItem(STORAGE_KEYS.RISKS);\n      if (!risksJson) return [];\n      \n      const allRisks = JSON.parse(risksJson) as Record<string, Risk[]>;\n      return allRisks[projectId] || [];\n    } catch (error) {\n      console.error('Error retrieving risks from localStorage:', error);\n      return [];\n    }\n  },\n  \n  saveRisks: (projectId: string, risks: Risk[]): void => {\n    try {\n      const risksJson = localStorage.getItem(STORAGE_KEYS.RISKS);\n      const allRisks = risksJson ? JSON.parse(risksJson) as Record<string, Risk[]> : {};\n      \n      allRisks[projectId] = risks;\n      localStorage.setItem(STORAGE_KEYS.RISKS, JSON.stringify(allRisks));\n    } catch (error) {\n      console.error('Error saving risks to localStorage:', error);\n    }\n  },\n  \n  addRisk: (risk: Risk): void => {\n    try {\n      const { projectId } = risk;\n      \n      const risks = LocalStorageService.getRisks(projectId);\n      risks.push(risk);\n      LocalStorageService.saveRisks(projectId, risks);\n    } catch (error) {\n      console.error('Error adding risk to localStorage:', error);\n    }\n  },\n  \n  updateRisk: (projectId: string, riskId: string, updatedRisk: Partial<Risk>): Risk | null => {\n    try {\n      const risks = LocalStorageService.getRisks(projectId);\n      const riskIndex = risks.findIndex(r => r.id === riskId);\n      \n      if (riskIndex === -1) return null;\n      \n      risks[riskIndex] = { ...risks[riskIndex], ...updatedRisk };\n      LocalStorageService.saveRisks(projectId, risks);\n      \n      return risks[riskIndex];\n    } catch (error) {\n      console.error('Error updating risk in localStorage:', error);\n      return null;\n    }\n  },\n  \n  deleteRisk: (projectId: string, riskId: string): void => {\n    try {\n      const risks = LocalStorageService.getRisks(projectId);\n      const updatedRisks = risks.filter(r => r.id !== riskId);\n      LocalStorageService.saveRisks(projectId, updatedRisks);\n    } catch (error) {\n      console.error('Error deleting risk from localStorage:', error);\n    }\n  },\n  \n  // Issues\n  getIssues: (projectId: string): Issue[] => {\n    try {\n      const issuesJson = localStorage.getItem(STORAGE_KEYS.ISSUES);\n      if (!issuesJson) return [];\n      \n      const allIssues = JSON.parse(issuesJson) as Record<string, Issue[]>;\n      return allIssues[projectId] || [];\n    } catch (error) {\n      console.error('Error retrieving issues from localStorage:', error);\n      return [];\n    }\n  },\n  \n  saveIssues: (projectId: string, issues: Issue[]): void => {\n    try {\n      const issuesJson = localStorage.getItem(STORAGE_KEYS.ISSUES);\n      const allIssues = issuesJson ? JSON.parse(issuesJson) as Record<string, Issue[]> : {};\n      \n      allIssues[projectId] = issues;\n      localStorage.setItem(STORAGE_KEYS.ISSUES, JSON.stringify(allIssues));\n    } catch (error) {\n      console.error('Error saving issues to localStorage:', error);\n    }\n  },\n  \n  addIssue: (issue: Issue): void => {\n    try {\n      const { projectId } = issue;\n      \n      const issues = LocalStorageService.getIssues(projectId);\n      issues.push(issue);\n      LocalStorageService.saveIssues(projectId, issues);\n    } catch (error) {\n      console.error('Error adding issue to localStorage:', error);\n    }\n  },\n  \n  updateIssue: (projectId: string, issueId: string, updatedIssue: Partial<Issue>): Issue | null => {\n    try {\n      const issues = LocalStorageService.getIssues(projectId);\n      const issueIndex = issues.findIndex(i => i.id === issueId);\n      \n      if (issueIndex === -1) return null;\n      \n      issues[issueIndex] = { ...issues[issueIndex], ...updatedIssue };\n      LocalStorageService.saveIssues(projectId, issues);\n      \n      return issues[issueIndex];\n    } catch (error) {\n      console.error('Error updating issue in localStorage:', error);\n      return null;\n    }\n  },\n  \n  deleteIssue: (projectId: string, issueId: string): void => {\n    try {\n      const issues = LocalStorageService.getIssues(projectId);\n      const updatedIssues = issues.filter(i => i.id !== issueId);\n      LocalStorageService.saveIssues(projectId, updatedIssues);\n    } catch (error) {\n      console.error('Error deleting issue from localStorage:', error);\n    }\n  },\n  \n  // Departments\n  getDepartments: (): Department[] => {\n    try {\n      const departmentsJson = localStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n      return departmentsJson ? JSON.parse(departmentsJson) : [];\n    } catch (error) {\n      console.error('Error retrieving departments from localStorage:', error);\n      return [];\n    }\n  },\n  \n  saveDepartments: (departments: Department[]): void => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n    } catch (error) {\n      console.error('Error saving departments to localStorage:', error);\n    }\n  },\n  \n  addDepartment: (department: Department): void => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      if (!departments.find(d => d.id === department.id)) {\n        departments.push(department);\n        LocalStorageService.saveDepartments(departments);\n      }\n    } catch (error) {\n      console.error('Error adding department to localStorage:', error);\n    }\n  },\n  \n  getDepartment: (departmentId: string): Department | null => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      return departments.find(d => d.id === departmentId) || null;\n    } catch (error) {\n      console.error('Error retrieving department from localStorage:', error);\n      return null;\n    }\n  },\n  \n  updateDepartment: (departmentId: string, updatedDepartment: Partial<Department>): Department | null => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      const departmentIndex = departments.findIndex(d => d.id === departmentId);\n      \n      if (departmentIndex === -1) return null;\n      \n      departments[departmentIndex] = { ...departments[departmentIndex], ...updatedDepartment };\n      LocalStorageService.saveDepartments(departments);\n      \n      return departments[departmentIndex];\n    } catch (error) {\n      console.error('Error updating department in localStorage:', error);\n      return null;\n    }\n  },\n  \n  deleteDepartment: (departmentId: string): void => {\n    try {\n      const departments = LocalStorageService.getDepartments();\n      const updatedDepartments = departments.filter(d => d.id !== departmentId);\n      LocalStorageService.saveDepartments(updatedDepartments);\n    } catch (error) {\n      console.error('Error deleting department from localStorage:', error);\n    }\n  },\n  \n  // Initialize with default data if storage is empty\n  initialize: (defaultProjects: Project[] = [], defaultMeetings: Meeting[] = []): void => {\n    try {\n      // Always set empty arrays regardless of what's passed in\n      LocalStorageService.saveProjects([]);\n      LocalStorageService.saveMeetings([]);\n      LocalStorageService.saveDepartments([]);\n      \n      // Clear any other data that might exist\n      localStorage.removeItem(STORAGE_KEYS.TASKS);\n      localStorage.removeItem(STORAGE_KEYS.INDEPENDENT_TASKS);\n      localStorage.removeItem(STORAGE_KEYS.RISKS);\n      localStorage.removeItem(STORAGE_KEYS.ISSUES);\n      \n      console.log('LocalStorage initialized with empty data');\n    } catch (error) {\n      console.error('Error initializing localStorage:', error);\n    }\n  },\n  \n  // Clear all storage (for testing/reset)\n  clearAll: (): void => {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.TASKS);\n      localStorage.removeItem(STORAGE_KEYS.PROJECTS);\n      localStorage.removeItem(STORAGE_KEYS.MEETINGS);\n      localStorage.removeItem(STORAGE_KEYS.INDEPENDENT_TASKS);\n      localStorage.removeItem(STORAGE_KEYS.RISKS);\n      localStorage.removeItem(STORAGE_KEYS.ISSUES);\n      localStorage.removeItem(STORAGE_KEYS.DEPARTMENTS);\n    } catch (error) {\n      console.error('Error clearing localStorage:', error);\n    }\n  },\n  \n  // Add a function to clear all application data\n  clearAllData: (): void => {\n    try {\n      // Get all keys from localStorage\n      const keys = Object.keys(localStorage);\n      \n      // Filter and remove all keys that start with 'themis_'\n      keys.forEach(key => {\n        if (key.startsWith('themis_')) {\n          localStorage.removeItem(key);\n        }\n      });\n      \n      console.log('All application data has been cleared from localStorage');\n    } catch (error) {\n      console.error('Error clearing application data from localStorage:', error);\n    }\n  }\n};\n\nexport default LocalStorageService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}