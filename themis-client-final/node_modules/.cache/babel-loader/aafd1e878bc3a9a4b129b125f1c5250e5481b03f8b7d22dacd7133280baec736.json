{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Box,Typography,Paper,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,TablePagination,Chip,TextField,InputAdornment,Tooltip,Stack,ToggleButton,ToggleButtonGroup,Button}from'@mui/material';import{Search as SearchIcon,Assignment as AssignmentIcon,ViewList as ListIcon,ViewKanban as KanbanIcon,Add as AddIcon}from'@mui/icons-material';import{useAuth}from'../context/AuthContext';import{TaskStatus,TaskPriority,ProjectStatus,ProjectPriority,UserRole,ProjectTemplateType}from'../types';import{useTranslation}from'react-i18next';import TaskDetailDialog from'../components/Task/TaskDetailDialog';import TaskEditDialog from'../components/Task/TaskEditDialog';import KanbanBoard from'../components/Kanban/KanbanBoard';import AddTaskDialog from'../components/Task/AddTaskDialog';// Mock data for tasks\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const mockTasks=[{id:'1',title:'Requirements Gathering',projectName:'Digital Transformation',description:'Gather and document system requirements from stakeholders.',status:'IN_PROGRESS',priority:'HIGH',startDate:'2023-01-15',dueDate:'2023-01-31',assignee:'admin'},{id:'2',title:'Database Schema Design',projectName:'Digital Transformation',description:'Design the database schema for the new system.',status:'TODO',priority:'MEDIUM',startDate:'2023-02-01',dueDate:'2023-02-15',assignee:'admin'},{id:'3',title:'Frontend Prototype',projectName:'Digital Transformation',description:'Create a prototype of the user interface.',status:'TODO',priority:'MEDIUM',startDate:'2023-02-15',dueDate:'2023-03-01',assignee:'admin'},{id:'4',title:'API Documentation',projectName:'Cloud Migration',description:'Document all API endpoints and their usage.',status:'DONE',priority:'LOW',startDate:'2023-01-10',dueDate:'2023-01-20',assignee:'admin'},{id:'5',title:'Security Audit',projectName:'Cloud Migration',description:'Perform a security audit of the system.',status:'REVIEW',priority:'HIGH',startDate:'2023-01-25',dueDate:'2023-02-10',assignee:'admin'}];// Helper functions for determining the status and priority display\nconst getStatusColor=(status,dueDate)=>{// Check if the task is overdue (due date is before current date)\nif(dueDate&&new Date(dueDate)<new Date()){return'error';// Red color for overdue tasks\n}switch(status){case'TODO':return'default';case'IN_PROGRESS':return'primary';case'REVIEW':return'warning';case'DONE':return'success';default:return'default';}};const getStatusLabel=status=>{switch(status){case'TODO':return'To Do';case'IN_PROGRESS':return'In Progress';case'REVIEW':return'In Review';case'DONE':return'Completed';default:return status;}};const getPriorityColor=priority=>{switch(priority){case'LOW':return'success';case'MEDIUM':return'warning';case'HIGH':return'error';default:return'default';}};const TasksPage=()=>{const[page,setPage]=useState(0);const[rowsPerPage,setRowsPerPage]=useState(5);const[searchQuery,setSearchQuery]=useState('');const[tasks,setTasks]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState('');const[projects,setProjects]=useState([]);const[selectedTask,setSelectedTask]=useState(null);const[isTaskDetailOpen,setIsTaskDetailOpen]=useState(false);const[isTaskEditOpen,setIsTaskEditOpen]=useState(false);const[viewMode,setViewMode]=useState('list');const[isAddTaskDialogOpen,setIsAddTaskDialogOpen]=useState(false);const{user,token}=useAuth();const{t}=useTranslation();// Fetch tasks\nuseEffect(()=>{const fetchTasks=async()=>{try{setLoading(true);// In a real application, you would fetch tasks from your API\n// For now, we'll use mock data with a delay to simulate loading\nsetTimeout(()=>{const mockDepartment={id:'1',name:'IT Department',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};const mockUser={id:'1',username:'manager',firstName:'Project',lastName:'Manager',email:'manager@example.com',role:UserRole.PROJECT_MANAGER,department:mockDepartment,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};const mockProject={id:'1',name:'Digital Transformation',description:'Company-wide digital transformation initiative',status:ProjectStatus.IN_PROGRESS,priority:ProjectPriority.HIGH,startDate:'2023-01-01',endDate:'2023-12-31',projectManager:mockUser,department:mockDepartment,progress:50,budget:500000,actualCost:250000,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),templateType:ProjectTemplateType.DEFAULT};const transformedTasks=mockTasks.map(task=>({id:task.id,title:task.title,description:task.description,projectId:'1',status:task.status,priority:task.priority,startDate:task.startDate,dueDate:task.dueDate,assignee:{id:'1',username:task.assignee,firstName:'Admin',lastName:'User',email:'admin@example.com',role:UserRole.ADMIN,department:mockDepartment,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},project:mockProject,createdBy:{id:'1',username:'admin',firstName:'Admin',lastName:'User',email:'admin@example.com',role:UserRole.ADMIN,department:mockDepartment,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isMilestone:false}));setTasks(transformedTasks);// Mock projects\nsetProjects([{id:'1',name:'Digital Transformation'},{id:'2',name:'Cloud Migration'}]);setLoading(false);},500);}catch(err){console.error('Error fetching tasks:',err);setError('Failed to load tasks. Please try again later.');setLoading(false);}};fetchTasks();},[]);const handleChangePage=(event,newPage)=>{setPage(newPage);};const handleChangeRowsPerPage=event=>{setRowsPerPage(parseInt(event.target.value,10));setPage(0);};const handleSearchChange=event=>{setSearchQuery(event.target.value);setPage(0);};const handleTaskClick=taskId=>{const task=tasks.find(t=>t.id===taskId);if(task){setSelectedTask(task);setIsTaskDetailOpen(true);}};const handleCloseTaskDetail=()=>{setIsTaskDetailOpen(false);setSelectedTask(null);};const handleEditTask=task=>{setSelectedTask(task);setIsTaskDetailOpen(false);setIsTaskEditOpen(true);};const handleCloseTaskEdit=()=>{setIsTaskEditOpen(false);};const handleSaveTask=editedTask=>{// In a real app, this would call an API to update the task\nconsole.log('Save edited task:',editedTask);// Update the task in the local state\nsetTasks(prevTasks=>prevTasks.map(task=>task.id===editedTask.id?editedTask:task));setIsTaskEditOpen(false);};const handleUpdateProgress=(taskId,progress,newStatus)=>{// In a real app, this would call an API to update the task progress and status\nconsole.log('Update task progress:',taskId,progress,newStatus);// Update the task in the local state\nsetTasks(prevTasks=>prevTasks.map(task=>{if(task.id===taskId){return{...task,status:newStatus};}return task;}));};const handleAddComment=async(taskId,comment)=>{// In a real app, this would call an API to add the comment\nconsole.log('Add comment to task',taskId,comment);// Create the new comment\nconst newComment={id:`comment-${Date.now()}`,taskId:taskId,text:comment,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),author:{id:(user===null||user===void 0?void 0:user.id)||'1',firstName:(user===null||user===void 0?void 0:user.firstName)||'User',lastName:(user===null||user===void 0?void 0:user.lastName)||''}};// Update the tasks state with the new comment\nsetTasks(prevTasks=>prevTasks.map(task=>{if(task.id===taskId){// Create or update the comments array\nconst existingComments=task.comments||[];return{...task,comments:[...existingComments,newComment]};}return task;}));return Promise.resolve();};const handleViewModeChange=(event,newViewMode)=>{if(newViewMode!==null){setViewMode(newViewMode);}};const handleAddTaskDialogOpen=()=>{setIsAddTaskDialogOpen(true);};const handleAddTaskDialogClose=()=>{setIsAddTaskDialogOpen(false);};const handleTaskAdded=success=>{if(success){// In a real app, you would refresh the tasks list here\nconsole.log('Task added successfully');// Simulate adding a new task with a fetch\nconst fetchTasks=async()=>{try{// Mock update - in a real app this would be an API call\nsetTimeout(()=>{const mockDepartment={id:'1',name:'IT Department',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};const mockUser={id:'1',username:'manager',firstName:'Project',lastName:'Manager',email:'manager@example.com',role:UserRole.PROJECT_MANAGER,department:mockDepartment,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};const mockProject={id:'1',name:'Digital Transformation',description:'Company-wide digital transformation initiative',status:ProjectStatus.IN_PROGRESS,priority:ProjectPriority.HIGH,startDate:'2023-01-01',endDate:'2023-12-31',projectManager:mockUser,department:mockDepartment,progress:50,budget:500000,actualCost:250000,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),templateType:ProjectTemplateType.DEFAULT};// Add new task to existing tasks\nconst newTask={id:`task-${Date.now()}`,title:\"New Added Task\",description:\"This task was just added\",projectId:'1',status:TaskStatus.TODO,priority:TaskPriority.MEDIUM,startDate:new Date().toISOString(),dueDate:new Date(Date.now()+7*24*60*60*1000).toISOString(),assignee:mockUser,project:mockProject,createdBy:mockUser,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isMilestone:false};setTasks(prevTasks=>[...prevTasks,newTask]);},500);}catch(err){console.error('Error fetching tasks:',err);}};fetchTasks();}};// Filter tasks based on search query and current user\nconst filteredTasks=tasks.filter(task=>{var _task$assignee;// Only show tasks assigned to the current user (for this demo, show all if user is admin)\nconst isAssignedToUser=(user===null||user===void 0?void 0:user.username)===((_task$assignee=task.assignee)===null||_task$assignee===void 0?void 0:_task$assignee.username);// Check if the search query matches task title, description, or project\nconst matchesSearch=task.title.toLowerCase().includes(searchQuery.toLowerCase())||task.description.toLowerCase().includes(searchQuery.toLowerCase());return(isAssignedToUser||(user===null||user===void 0?void 0:user.role)===UserRole.ADMIN)&&matchesSearch;});return/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(Box,{sx:{mb:3,display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",component:\"h1\",children:t('assignments.myTasks')}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",color:\"text.secondary\",children:\"View and manage tasks assigned to you\"})]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",startIcon:/*#__PURE__*/_jsx(AddIcon,{}),onClick:handleAddTaskDialogOpen,children:\"Add Task\"})]}),/*#__PURE__*/_jsxs(Paper,{sx:{mb:3,p:2},children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:2,sx:{mb:2},children:[/*#__PURE__*/_jsx(TextField,{label:\"Search Tasks\",variant:\"outlined\",fullWidth:true,value:searchQuery,onChange:handleSearchChange,InputProps:{startAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"start\",children:/*#__PURE__*/_jsx(SearchIcon,{})})}}),/*#__PURE__*/_jsxs(ToggleButtonGroup,{value:viewMode,exclusive:true,onChange:handleViewModeChange,\"aria-label\":\"view mode\",size:\"small\",children:[/*#__PURE__*/_jsx(ToggleButton,{value:\"list\",\"aria-label\":\"list view\",children:/*#__PURE__*/_jsx(ListIcon,{})}),/*#__PURE__*/_jsx(ToggleButton,{value:\"kanban\",\"aria-label\":\"kanban view\",children:/*#__PURE__*/_jsx(KanbanIcon,{})})]})]}),viewMode==='list'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TableContainer,{children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Task\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Project\"}),/*#__PURE__*/_jsx(TableCell,{children:t('status.title')}),/*#__PURE__*/_jsx(TableCell,{children:t('priority.title')}),/*#__PURE__*/_jsx(TableCell,{children:\"Due Date\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:loading?/*#__PURE__*/_jsx(TableRow,{children:/*#__PURE__*/_jsx(TableCell,{colSpan:5,align:\"center\",children:/*#__PURE__*/_jsx(Box,{sx:{py:3},children:/*#__PURE__*/_jsx(Typography,{children:\"Loading tasks...\"})})})}):error?/*#__PURE__*/_jsx(TableRow,{children:/*#__PURE__*/_jsx(TableCell,{colSpan:5,align:\"center\",children:/*#__PURE__*/_jsx(Box,{sx:{py:3},children:/*#__PURE__*/_jsx(Typography,{color:\"error\",children:error})})})}):filteredTasks.length===0?/*#__PURE__*/_jsx(TableRow,{children:/*#__PURE__*/_jsx(TableCell,{colSpan:5,align:\"center\",children:/*#__PURE__*/_jsxs(Box,{sx:{py:3},children:[/*#__PURE__*/_jsx(AssignmentIcon,{sx:{fontSize:40,color:'text.secondary',mb:1}}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"No tasks found\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:searchQuery?'Try adjusting your search terms':'You have no tasks assigned to you'})]})})}):filteredTasks.slice(page*rowsPerPage,page*rowsPerPage+rowsPerPage).map(task=>/*#__PURE__*/_jsxs(TableRow,{hover:true,onClick:()=>handleTaskClick(task.id),sx:{cursor:'pointer'},children:[/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"body1\",fontWeight:\"medium\",children:task.title}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:task.description})]})}),/*#__PURE__*/_jsx(TableCell,{children:task.project.name}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(Tooltip,{title:task.dueDate&&new Date(task.dueDate)<new Date()?`${getStatusLabel(task.status)} (Overdue)`:getStatusLabel(task.status),children:/*#__PURE__*/_jsx(Chip,{label:getStatusLabel(task.status),color:getStatusColor(task.status,task.dueDate),size:\"small\"})})}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(Chip,{label:task.priority,color:getPriorityColor(task.priority),size:\"small\"})}),/*#__PURE__*/_jsx(TableCell,{children:new Date(task.dueDate).toLocaleDateString()})]},task.id))})]})}),/*#__PURE__*/_jsx(TablePagination,{rowsPerPageOptions:[5,10,25],component:\"div\",count:filteredTasks.length,rowsPerPage:rowsPerPage,page:page,onPageChange:handleChangePage,onRowsPerPageChange:handleChangeRowsPerPage})]}):/*#__PURE__*/_jsx(KanbanBoard,{tasks:filteredTasks,onTaskClick:handleTaskClick,onAddComment:handleAddComment,onUpdateProgress:handleUpdateProgress})]}),/*#__PURE__*/_jsx(TaskDetailDialog,{open:isTaskDetailOpen,task:selectedTask,onClose:handleCloseTaskDetail,onEdit:handleEditTask,onAddComment:handleAddComment}),/*#__PURE__*/_jsx(TaskEditDialog,{open:isTaskEditOpen,task:selectedTask,onClose:handleCloseTaskEdit,onSave:handleSaveTask,users:tasks.map(t=>t.assignee).filter(a=>!!a)}),/*#__PURE__*/_jsx(AddTaskDialog,{open:isAddTaskDialogOpen,onClose:handleAddTaskDialogClose,onTaskAdded:handleTaskAdded,isIndependentTask:true,allUsers:tasks.map(t=>t.assignee).filter(a=>!!a)})]});};export default TasksPage;","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TablePagination","Chip","TextField","InputAdornment","Tooltip","Stack","ToggleButton","ToggleButtonGroup","Button","Search","SearchIcon","Assignment","AssignmentIcon","ViewList","ListIcon","ViewKanban","KanbanIcon","Add","AddIcon","useAuth","TaskStatus","TaskPriority","ProjectStatus","ProjectPriority","UserRole","ProjectTemplateType","useTranslation","TaskDetailDialog","TaskEditDialog","KanbanBoard","AddTaskDialog","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","mockTasks","id","title","projectName","description","status","priority","startDate","dueDate","assignee","getStatusColor","Date","getStatusLabel","getPriorityColor","TasksPage","page","setPage","rowsPerPage","setRowsPerPage","searchQuery","setSearchQuery","tasks","setTasks","loading","setLoading","error","setError","projects","setProjects","selectedTask","setSelectedTask","isTaskDetailOpen","setIsTaskDetailOpen","isTaskEditOpen","setIsTaskEditOpen","viewMode","setViewMode","isAddTaskDialogOpen","setIsAddTaskDialogOpen","user","token","t","fetchTasks","setTimeout","mockDepartment","name","createdAt","toISOString","updatedAt","mockUser","username","firstName","lastName","email","role","PROJECT_MANAGER","department","mockProject","IN_PROGRESS","HIGH","endDate","projectManager","progress","budget","actualCost","templateType","DEFAULT","transformedTasks","map","task","projectId","ADMIN","project","createdBy","isMilestone","err","console","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","handleSearchChange","handleTaskClick","taskId","find","handleCloseTaskDetail","handleEditTask","handleCloseTaskEdit","handleSaveTask","editedTask","log","prevTasks","handleUpdateProgress","newStatus","handleAddComment","comment","newComment","now","text","author","existingComments","comments","Promise","resolve","handleViewModeChange","newViewMode","handleAddTaskDialogOpen","handleAddTaskDialogClose","handleTaskAdded","success","newTask","TODO","MEDIUM","filteredTasks","filter","_task$assignee","isAssignedToUser","matchesSearch","toLowerCase","includes","children","sx","mb","display","justifyContent","alignItems","variant","component","color","startIcon","onClick","p","direction","spacing","label","fullWidth","onChange","InputProps","startAdornment","position","exclusive","size","colSpan","align","py","length","fontSize","slice","hover","cursor","fontWeight","toLocaleDateString","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","onTaskClick","onAddComment","onUpdateProgress","open","onClose","onEdit","onSave","users","a","onTaskAdded","isIndependentTask","allUsers"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/pages/TasksPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  TextField,\n  InputAdornment,\n  Tooltip,\n  Stack,\n  ToggleButton,\n  ToggleButtonGroup,\n  Button\n} from '@mui/material';\nimport {\n  Search as SearchIcon,\n  Assignment as AssignmentIcon,\n  ViewList as ListIcon,\n  ViewKanban as KanbanIcon,\n  Add as AddIcon\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { Task, TaskStatus, TaskPriority, User, Project, ProjectStatus, ProjectPriority, Department, UserRole, ProjectTemplateType } from '../types';\nimport { TaskService } from '../services/TaskService';\nimport { useTranslation } from 'react-i18next';\nimport TaskDetailDialog from '../components/Task/TaskDetailDialog';\nimport TaskEditDialog from '../components/Task/TaskEditDialog';\nimport KanbanBoard from '../components/Kanban/KanbanBoard';\nimport AddTaskDialog from '../components/Task/AddTaskDialog';\n\n// Mock data for tasks\nconst mockTasks = [\n  { \n    id: '1', \n    title: 'Requirements Gathering', \n    projectName: 'Digital Transformation',\n    description: 'Gather and document system requirements from stakeholders.',\n    status: 'IN_PROGRESS', \n    priority: 'HIGH',\n    startDate: '2023-01-15', \n    dueDate: '2023-01-31',\n    assignee: 'admin'\n  },\n  { \n    id: '2', \n    title: 'Database Schema Design', \n    projectName: 'Digital Transformation',\n    description: 'Design the database schema for the new system.',\n    status: 'TODO', \n    priority: 'MEDIUM',\n    startDate: '2023-02-01', \n    dueDate: '2023-02-15',\n    assignee: 'admin'\n  },\n  { \n    id: '3', \n    title: 'Frontend Prototype', \n    projectName: 'Digital Transformation',\n    description: 'Create a prototype of the user interface.',\n    status: 'TODO', \n    priority: 'MEDIUM',\n    startDate: '2023-02-15', \n    dueDate: '2023-03-01',\n    assignee: 'admin'\n  },\n  { \n    id: '4', \n    title: 'API Documentation', \n    projectName: 'Cloud Migration',\n    description: 'Document all API endpoints and their usage.',\n    status: 'DONE', \n    priority: 'LOW',\n    startDate: '2023-01-10', \n    dueDate: '2023-01-20',\n    assignee: 'admin'\n  },\n  { \n    id: '5', \n    title: 'Security Audit', \n    projectName: 'Cloud Migration',\n    description: 'Perform a security audit of the system.',\n    status: 'REVIEW', \n    priority: 'HIGH',\n    startDate: '2023-01-25', \n    dueDate: '2023-02-10',\n    assignee: 'admin'\n  }\n];\n\n// Helper functions for determining the status and priority display\nconst getStatusColor = (status: string, dueDate?: string) => {\n  // Check if the task is overdue (due date is before current date)\n  if (dueDate && new Date(dueDate) < new Date()) {\n    return 'error'; // Red color for overdue tasks\n  }\n  \n  switch(status) {\n    case 'TODO': return 'default';\n    case 'IN_PROGRESS': return 'primary';\n    case 'REVIEW': return 'warning';\n    case 'DONE': return 'success';\n    default: return 'default';\n  }\n};\n\nconst getStatusLabel = (status: string) => {\n  switch(status) {\n    case 'TODO': return 'To Do';\n    case 'IN_PROGRESS': return 'In Progress';\n    case 'REVIEW': return 'In Review';\n    case 'DONE': return 'Completed';\n    default: return status;\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch(priority) {\n    case 'LOW': return 'success';\n    case 'MEDIUM': return 'warning';\n    case 'HIGH': return 'error';\n    default: return 'default';\n  }\n};\n\nconst TasksPage: React.FC = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [projects, setProjects] = useState<{id: string, name: string}[]>([]);\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n  const [isTaskDetailOpen, setIsTaskDetailOpen] = useState(false);\n  const [isTaskEditOpen, setIsTaskEditOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<'list' | 'kanban'>('list');\n  const [isAddTaskDialogOpen, setIsAddTaskDialogOpen] = useState(false);\n  \n  const { user, token } = useAuth();\n  const { t } = useTranslation();\n  \n  // Fetch tasks\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        setLoading(true);\n        \n        // In a real application, you would fetch tasks from your API\n        // For now, we'll use mock data with a delay to simulate loading\n        setTimeout(() => {\n          const mockDepartment: Department = {\n            id: '1',\n            name: 'IT Department',\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          };\n          \n          const mockUser: User = {\n            id: '1',\n            username: 'manager',\n            firstName: 'Project',\n            lastName: 'Manager',\n            email: 'manager@example.com',\n            role: UserRole.PROJECT_MANAGER,\n            department: mockDepartment,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          };\n          \n          const mockProject: Project = {\n            id: '1',\n            name: 'Digital Transformation',\n            description: 'Company-wide digital transformation initiative',\n            status: ProjectStatus.IN_PROGRESS,\n            priority: ProjectPriority.HIGH,\n            startDate: '2023-01-01',\n            endDate: '2023-12-31',\n            projectManager: mockUser,\n            department: mockDepartment,\n            progress: 50,\n            budget: 500000,\n            actualCost: 250000,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            templateType: ProjectTemplateType.DEFAULT\n          };\n          \n          const transformedTasks: Task[] = mockTasks.map(task => ({\n            id: task.id,\n            title: task.title,\n            description: task.description,\n            projectId: '1',\n            status: task.status as TaskStatus,\n            priority: task.priority as TaskPriority,\n            startDate: task.startDate,\n            dueDate: task.dueDate,\n            assignee: {\n              id: '1',\n              username: task.assignee,\n              firstName: 'Admin',\n              lastName: 'User',\n              email: 'admin@example.com',\n              role: UserRole.ADMIN,\n              department: mockDepartment,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            },\n            project: mockProject,\n            createdBy: {\n              id: '1',\n              username: 'admin',\n              firstName: 'Admin',\n              lastName: 'User',\n              email: 'admin@example.com',\n              role: UserRole.ADMIN,\n              department: mockDepartment,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            },\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            isMilestone: false\n          }));\n          \n          setTasks(transformedTasks);\n          \n          // Mock projects\n          setProjects([\n            { id: '1', name: 'Digital Transformation' },\n            { id: '2', name: 'Cloud Migration' }\n          ]);\n          \n          setLoading(false);\n        }, 500);\n      } catch (err) {\n        console.error('Error fetching tasks:', err);\n        setError('Failed to load tasks. Please try again later.');\n        setLoading(false);\n      }\n    };\n    \n    fetchTasks();\n  }, []);\n  \n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n  \n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  \n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n    setPage(0);\n  };\n  \n  const handleTaskClick = (taskId: string) => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      setSelectedTask(task);\n      setIsTaskDetailOpen(true);\n    }\n  };\n  \n  const handleCloseTaskDetail = () => {\n    setIsTaskDetailOpen(false);\n    setSelectedTask(null);\n  };\n  \n  const handleEditTask = (task: Task) => {\n    setSelectedTask(task);\n    setIsTaskDetailOpen(false);\n    setIsTaskEditOpen(true);\n  };\n  \n  const handleCloseTaskEdit = () => {\n    setIsTaskEditOpen(false);\n  };\n  \n  const handleSaveTask = (editedTask: Task) => {\n    // In a real app, this would call an API to update the task\n    console.log('Save edited task:', editedTask);\n    \n    // Update the task in the local state\n    setTasks(prevTasks => \n      prevTasks.map(task => \n        task.id === editedTask.id ? editedTask : task\n      )\n    );\n    \n    setIsTaskEditOpen(false);\n  };\n  \n  const handleUpdateProgress = (taskId: string, progress: number, newStatus: TaskStatus) => {\n    // In a real app, this would call an API to update the task progress and status\n    console.log('Update task progress:', taskId, progress, newStatus);\n    \n    // Update the task in the local state\n    setTasks(prevTasks => \n      prevTasks.map(task => {\n        if (task.id === taskId) {\n          return {\n            ...task,\n            status: newStatus\n          };\n        }\n        return task;\n      })\n    );\n  };\n  \n  const handleAddComment = async (taskId: string, comment: string) => {\n    // In a real app, this would call an API to add the comment\n    console.log('Add comment to task', taskId, comment);\n    \n    // Create the new comment\n    const newComment = {\n      id: `comment-${Date.now()}`,\n      taskId: taskId,\n      text: comment,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      author: {\n        id: user?.id || '1',\n        firstName: user?.firstName || 'User',\n        lastName: user?.lastName || ''\n      }\n    };\n    \n    // Update the tasks state with the new comment\n    setTasks(prevTasks => \n      prevTasks.map(task => {\n        if (task.id === taskId) {\n          // Create or update the comments array\n          const existingComments = task.comments || [];\n          return {\n            ...task,\n            comments: [...existingComments, newComment]\n          };\n        }\n        return task;\n      })\n    );\n    \n    return Promise.resolve();\n  };\n  \n  const handleViewModeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newViewMode: 'list' | 'kanban' | null\n  ) => {\n    if (newViewMode !== null) {\n      setViewMode(newViewMode);\n    }\n  };\n  \n  const handleAddTaskDialogOpen = () => {\n    setIsAddTaskDialogOpen(true);\n  };\n\n  const handleAddTaskDialogClose = () => {\n    setIsAddTaskDialogOpen(false);\n  };\n\n  const handleTaskAdded = (success: boolean) => {\n    if (success) {\n      // In a real app, you would refresh the tasks list here\n      console.log('Task added successfully');\n      // Simulate adding a new task with a fetch\n      const fetchTasks = async () => {\n        try {\n          // Mock update - in a real app this would be an API call\n          setTimeout(() => {\n            const mockDepartment: Department = {\n              id: '1',\n              name: 'IT Department',\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            };\n            \n            const mockUser: User = {\n              id: '1',\n              username: 'manager',\n              firstName: 'Project',\n              lastName: 'Manager',\n              email: 'manager@example.com',\n              role: UserRole.PROJECT_MANAGER,\n              department: mockDepartment,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            };\n            \n            const mockProject: Project = {\n              id: '1',\n              name: 'Digital Transformation',\n              description: 'Company-wide digital transformation initiative',\n              status: ProjectStatus.IN_PROGRESS,\n              priority: ProjectPriority.HIGH,\n              startDate: '2023-01-01',\n              endDate: '2023-12-31',\n              projectManager: mockUser,\n              department: mockDepartment,\n              progress: 50,\n              budget: 500000,\n              actualCost: 250000,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n              templateType: ProjectTemplateType.DEFAULT\n            };\n            \n            // Add new task to existing tasks\n            const newTask: Task = {\n              id: `task-${Date.now()}`,\n              title: \"New Added Task\",\n              description: \"This task was just added\",\n              projectId: '1',\n              status: TaskStatus.TODO,\n              priority: TaskPriority.MEDIUM,\n              startDate: new Date().toISOString(),\n              dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n              assignee: mockUser,\n              project: mockProject,\n              createdBy: mockUser,\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n              isMilestone: false\n            };\n            \n            setTasks(prevTasks => [...prevTasks, newTask]);\n          }, 500);\n        } catch (err) {\n          console.error('Error fetching tasks:', err);\n        }\n      };\n      \n      fetchTasks();\n    }\n  };\n  \n  // Filter tasks based on search query and current user\n  const filteredTasks = tasks.filter((task) => {\n    // Only show tasks assigned to the current user (for this demo, show all if user is admin)\n    const isAssignedToUser = user?.username === task.assignee?.username;\n    \n    // Check if the search query matches task title, description, or project\n    const matchesSearch = \n      task.title.toLowerCase().includes(searchQuery.toLowerCase()) || \n      task.description.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    return (isAssignedToUser || user?.role === UserRole.ADMIN) && matchesSearch;\n  });\n  \n  return (\n    <Box>\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <div>\n          <Typography variant=\"h4\" component=\"h1\">\n            {t('assignments.myTasks')}\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and manage tasks assigned to you\n          </Typography>\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<AddIcon />}\n          onClick={handleAddTaskDialogOpen}\n        >\n          Add Task\n        </Button>\n      </Box>\n      \n      <Paper sx={{ mb: 3, p: 2 }}>\n        <Stack direction=\"row\" spacing={2} sx={{ mb: 2 }}>\n          <TextField\n            label=\"Search Tasks\"\n            variant=\"outlined\"\n            fullWidth\n            value={searchQuery}\n            onChange={handleSearchChange}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n          />\n          <ToggleButtonGroup\n            value={viewMode}\n            exclusive\n            onChange={handleViewModeChange}\n            aria-label=\"view mode\"\n            size=\"small\"\n          >\n            <ToggleButton value=\"list\" aria-label=\"list view\">\n              <ListIcon />\n            </ToggleButton>\n            <ToggleButton value=\"kanban\" aria-label=\"kanban view\">\n              <KanbanIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Stack>\n        \n        {viewMode === 'list' ? (\n          <>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Task</TableCell>\n                    <TableCell>Project</TableCell>\n                    <TableCell>{t('status.title')}</TableCell>\n                    <TableCell>{t('priority.title')}</TableCell>\n                    <TableCell>Due Date</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {loading ? (\n                    <TableRow>\n                      <TableCell colSpan={5} align=\"center\">\n                        <Box sx={{ py: 3 }}>\n                          <Typography>Loading tasks...</Typography>\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  ) : error ? (\n                    <TableRow>\n                      <TableCell colSpan={5} align=\"center\">\n                        <Box sx={{ py: 3 }}>\n                          <Typography color=\"error\">{error}</Typography>\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  ) : filteredTasks.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={5} align=\"center\">\n                        <Box sx={{ py: 3 }}>\n                          <AssignmentIcon sx={{ fontSize: 40, color: 'text.secondary', mb: 1 }} />\n                          <Typography variant=\"h6\">No tasks found</Typography>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            {searchQuery ? 'Try adjusting your search terms' : 'You have no tasks assigned to you'}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredTasks\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((task) => (\n                        <TableRow \n                          key={task.id} \n                          hover\n                          onClick={() => handleTaskClick(task.id)}\n                          sx={{ cursor: 'pointer' }}\n                        >\n                          <TableCell>\n                            <Box>\n                              <Typography variant=\"body1\" fontWeight=\"medium\">\n                                {task.title}\n                              </Typography>\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                {task.description}\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>{task.project.name}</TableCell>\n                          <TableCell>\n                            <Tooltip \n                              title={\n                                task.dueDate && new Date(task.dueDate) < new Date()\n                                  ? `${getStatusLabel(task.status)} (Overdue)`\n                                  : getStatusLabel(task.status)\n                              }\n                            >\n                              <Chip \n                                label={getStatusLabel(task.status)} \n                                color={getStatusColor(task.status, task.dueDate) as any}\n                                size=\"small\"\n                              />\n                            </Tooltip>\n                          </TableCell>\n                          <TableCell>\n                            <Chip \n                              label={task.priority} \n                              color={getPriorityColor(task.priority) as any}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>{new Date(task.dueDate).toLocaleDateString()}</TableCell>\n                        </TableRow>\n                      ))\n                  )}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            \n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25]}\n              component=\"div\"\n              count={filteredTasks.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          </>\n        ) : (\n          <KanbanBoard \n            tasks={filteredTasks}\n            onTaskClick={handleTaskClick}\n            onAddComment={handleAddComment}\n            onUpdateProgress={handleUpdateProgress}\n          />\n        )}\n      </Paper>\n      \n      {/* Task Detail Dialog */}\n      <TaskDetailDialog\n        open={isTaskDetailOpen}\n        task={selectedTask}\n        onClose={handleCloseTaskDetail}\n        onEdit={handleEditTask}\n        onAddComment={handleAddComment}\n      />\n      \n      {/* Task Edit Dialog */}\n      <TaskEditDialog\n        open={isTaskEditOpen}\n        task={selectedTask}\n        onClose={handleCloseTaskEdit}\n        onSave={handleSaveTask}\n        users={tasks.map(t => t.assignee).filter((a): a is User => !!a)}\n      />\n      \n      {/* Add Task Dialog */}\n      <AddTaskDialog\n        open={isAddTaskDialogOpen}\n        onClose={handleAddTaskDialogClose}\n        onTaskAdded={handleTaskAdded}\n        isIndependentTask={true}\n        allUsers={tasks.map(t => t.assignee).filter((a): a is User => !!a)}\n      />\n    </Box>\n  );\n};\n\nexport default TasksPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}