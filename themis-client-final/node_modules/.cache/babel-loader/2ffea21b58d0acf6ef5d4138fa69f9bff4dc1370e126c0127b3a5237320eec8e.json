{"ast":null,"code":"/// <reference lib=\"webworker\" />\n/* eslint-disable no-restricted-globals */// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules/workbox-precaching\n// for more information about precaching.\nimport{clientsClaim}from'workbox-core';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute,createHandlerBoundToURL}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate,CacheFirst}from'workbox-strategies';clientsClaim();// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp=new RegExp('/[^/?]+\\\\.[^/]+$');registerRoute(// Return false to exempt requests from being fulfilled by index.html.\n_ref=>{let{request,url}=_ref;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains\n// a file extension, skip.\nif(fileExtensionRegexp.test(url.pathname)){return false;}// Return true to signal that we want to use the handler.\nreturn true;},createHandlerBoundToURL(process.env.PUBLIC_URL+'/index.html'));// Cache API responses\nregisterRoute(_ref2=>{let{url}=_ref2;return url.origin===self.location.origin&&url.pathname.startsWith('/api/');},new StaleWhileRevalidate({cacheName:'api-cache',plugins:[new ExpirationPlugin({maxEntries:50,maxAgeSeconds:60*60// 1 hour\n})]}));// Cache assets (images, fonts, etc.)\nregisterRoute(_ref3=>{let{request}=_ref3;return request.destination==='image'||request.destination==='font'||request.destination==='style';},new CacheFirst({cacheName:'assets-cache',plugins:[new ExpirationPlugin({maxEntries:60,maxAgeSeconds:7*24*60*60// 7 days\n})]}));// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message',event=>{if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});// Any other custom service worker logic can go here.\n// Custom offline fallback page\nself.addEventListener('fetch',event=>{// Skip cross-origin requests\nif(event.request.mode==='navigate'&&navigator.onLine===false){event.respondWith(caches.match('/offline.html').then(response=>{return response||fetch(event.request);}));}});","map":{"version":3,"names":["clientsClaim","ExpirationPlugin","precacheAndRoute","createHandlerBoundToURL","registerRoute","StaleWhileRevalidate","CacheFirst","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","_ref","request","url","mode","pathname","startsWith","test","process","env","PUBLIC_URL","_ref2","origin","location","cacheName","plugins","maxEntries","maxAgeSeconds","_ref3","destination","addEventListener","event","data","type","skipWaiting","navigator","onLine","respondWith","caches","match","then","response","fetch"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/service-worker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n/* eslint-disable no-restricted-globals */\n\n// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules/workbox-precaching\n// for more information about precaching.\nimport { clientsClaim } from 'workbox-core';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\nimport { registerRoute } from 'workbox-routing';\nimport { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nclientsClaim();\n\n// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);\n\n// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute(\n  // Return false to exempt requests from being fulfilled by index.html.\n  ({ request, url }: { request: Request; url: URL }) => {\n    // If this isn't a navigation, skip.\n    if (request.mode !== 'navigate') {\n      return false;\n    }\n\n    // If this is a URL that starts with /_, skip.\n    if (url.pathname.startsWith('/_')) {\n      return false;\n    }\n\n    // If this looks like a URL for a resource, because it contains\n    // a file extension, skip.\n    if (fileExtensionRegexp.test(url.pathname)) {\n      return false;\n    }\n\n    // Return true to signal that we want to use the handler.\n    return true;\n  },\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\n);\n\n// Cache API responses\nregisterRoute(\n  ({ url }) => url.origin === self.location.origin && url.pathname.startsWith('/api/'),\n  new StaleWhileRevalidate({\n    cacheName: 'api-cache',\n    plugins: [\n      new ExpirationPlugin({\n        maxEntries: 50,\n        maxAgeSeconds: 60 * 60, // 1 hour\n      }),\n    ],\n  })\n);\n\n// Cache assets (images, fonts, etc.)\nregisterRoute(\n  ({ request }) =>\n    request.destination === 'image' ||\n    request.destination === 'font' ||\n    request.destination === 'style',\n  new CacheFirst({\n    cacheName: 'assets-cache',\n    plugins: [\n      new ExpirationPlugin({\n        maxEntries: 60,\n        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days\n      }),\n    ],\n  })\n);\n\n// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n\n// Any other custom service worker logic can go here.\n// Custom offline fallback page\nself.addEventListener('fetch', (event) => {\n  // Skip cross-origin requests\n  if (event.request.mode === 'navigate' && navigator.onLine === false) {\n    event.respondWith(\n      caches.match('/offline.html').then((response) => {\n        return response || fetch(event.request);\n      })\n    );\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}