{"ast":null,"code":"// Add this import at the top of the file\n// User-related types\nexport let UserRole=/*#__PURE__*/function(UserRole){UserRole[\"ADMIN\"]=\"ADMIN\";UserRole[\"PROJECT_MANAGER\"]=\"PROJECT_MANAGER\";UserRole[\"SUB_PMO\"]=\"SUB_PMO\";UserRole[\"MAIN_PMO\"]=\"MAIN_PMO\";UserRole[\"DEPARTMENT_DIRECTOR\"]=\"DEPARTMENT_DIRECTOR\";UserRole[\"EXECUTIVE\"]=\"EXECUTIVE\";UserRole[\"TEAM_LEAD\"]=\"TEAM_LEAD\";UserRole[\"DEVELOPER\"]=\"DEVELOPER\";UserRole[\"PENDING\"]=\"PENDING\";return UserRole;}({});// Helper functions for role-based permissions\nexport const canManageProjects=role=>{return role===UserRole.ADMIN||role===UserRole.PROJECT_MANAGER||role===UserRole.SUB_PMO||role===UserRole.MAIN_PMO;};export const canApproveProjects=role=>{return role===UserRole.ADMIN||role===UserRole.SUB_PMO||role===UserRole.MAIN_PMO;};export const canAddTasks=role=>{return role===UserRole.ADMIN||role===UserRole.PROJECT_MANAGER||role===UserRole.SUB_PMO||role===UserRole.MAIN_PMO;};export const canRequestTasks=role=>{return role===UserRole.ADMIN||role===UserRole.PROJECT_MANAGER||role===UserRole.SUB_PMO||role===UserRole.MAIN_PMO;};export const canViewAllProjects=role=>{return role===UserRole.ADMIN||role===UserRole.MAIN_PMO||role===UserRole.EXECUTIVE;};// Department interface\n// Project-related types\nexport let ProjectStatus=/*#__PURE__*/function(ProjectStatus){ProjectStatus[\"PLANNING\"]=\"PLANNING\";ProjectStatus[\"IN_PROGRESS\"]=\"IN_PROGRESS\";ProjectStatus[\"ON_HOLD\"]=\"ON_HOLD\";ProjectStatus[\"COMPLETED\"]=\"COMPLETED\";ProjectStatus[\"CANCELLED\"]=\"CANCELLED\";return ProjectStatus;}({});// Define project template types\nexport let ProjectTemplateType=/*#__PURE__*/function(ProjectTemplateType){ProjectTemplateType[\"DEFAULT\"]=\"DEFAULT\";ProjectTemplateType[\"ERP\"]=\"ERP\";ProjectTemplateType[\"MARKETING\"]=\"MARKETING\";ProjectTemplateType[\"FINANCE\"]=\"FINANCE\";ProjectTemplateType[\"SUPPLY_CHAIN\"]=\"SUPPLY_CHAIN\";ProjectTemplateType[\"WEBSITE\"]=\"WEBSITE\";ProjectTemplateType[\"INFRASTRUCTURE\"]=\"INFRASTRUCTURE\";ProjectTemplateType[\"CUSTOM\"]=\"CUSTOM\";return ProjectTemplateType;}({});export let ProjectPriority=/*#__PURE__*/function(ProjectPriority){ProjectPriority[\"LOW\"]=\"LOW\";ProjectPriority[\"MEDIUM\"]=\"MEDIUM\";ProjectPriority[\"HIGH\"]=\"HIGH\";ProjectPriority[\"CRITICAL\"]=\"CRITICAL\";return ProjectPriority;}({});export let ProjectRiskLevel=/*#__PURE__*/function(ProjectRiskLevel){ProjectRiskLevel[\"LOW\"]=\"LOW\";ProjectRiskLevel[\"MEDIUM\"]=\"MEDIUM\";ProjectRiskLevel[\"HIGH\"]=\"HIGH\";ProjectRiskLevel[\"CRITICAL\"]=\"CRITICAL\";return ProjectRiskLevel;}({});// Attachment interface\n// Task-related types\nexport let TaskStatus=/*#__PURE__*/function(TaskStatus){TaskStatus[\"TODO\"]=\"TODO\";TaskStatus[\"IN_PROGRESS\"]=\"IN_PROGRESS\";TaskStatus[\"REVIEW\"]=\"REVIEW\";TaskStatus[\"DONE\"]=\"DONE\";return TaskStatus;}({});export let TaskPriority=/*#__PURE__*/function(TaskPriority){TaskPriority[\"LOW\"]=\"LOW\";TaskPriority[\"MEDIUM\"]=\"MEDIUM\";TaskPriority[\"HIGH\"]=\"HIGH\";return TaskPriority;}({});// Task comment interface\n// Risk-related types\nexport let RiskStatus=/*#__PURE__*/function(RiskStatus){RiskStatus[\"IDENTIFIED\"]=\"IDENTIFIED\";RiskStatus[\"ASSESSED\"]=\"ASSESSED\";RiskStatus[\"MITIGATED\"]=\"MITIGATED\";RiskStatus[\"CLOSED\"]=\"CLOSED\";return RiskStatus;}({});export let RiskImpact=/*#__PURE__*/function(RiskImpact){RiskImpact[\"LOW\"]=\"LOW\";RiskImpact[\"MEDIUM\"]=\"MEDIUM\";RiskImpact[\"HIGH\"]=\"HIGH\";RiskImpact[\"CRITICAL\"]=\"CRITICAL\";return RiskImpact;}({});// Issue-related types\nexport let IssueStatus=/*#__PURE__*/function(IssueStatus){IssueStatus[\"OPEN\"]=\"OPEN\";IssueStatus[\"IN_PROGRESS\"]=\"IN_PROGRESS\";IssueStatus[\"RESOLVED\"]=\"RESOLVED\";IssueStatus[\"CLOSED\"]=\"CLOSED\";return IssueStatus;}({});// Weekly update types\nexport let UpdateStatus=/*#__PURE__*/function(UpdateStatus){UpdateStatus[\"DRAFT\"]=\"DRAFT\";UpdateStatus[\"SUBMITTED\"]=\"SUBMITTED\";UpdateStatus[\"APPROVED_BY_SUB_PMO\"]=\"APPROVED_BY_SUB_PMO\";UpdateStatus[\"APPROVED_BY_MAIN_PMO\"]=\"APPROVED_BY_MAIN_PMO\";UpdateStatus[\"REJECTED\"]=\"REJECTED\";return UpdateStatus;}({});// Weekly Update interface for project update tracking\n// Change Request Types\nexport let ChangeRequestType=/*#__PURE__*/function(ChangeRequestType){ChangeRequestType[\"SCHEDULE\"]=\"SCHEDULE\";ChangeRequestType[\"BUDGET\"]=\"BUDGET\";ChangeRequestType[\"SCOPE\"]=\"SCOPE\";ChangeRequestType[\"RESOURCE\"]=\"RESOURCE\";ChangeRequestType[\"CLOSURE\"]=\"CLOSURE\";ChangeRequestType[\"OTHER\"]=\"OTHER\";return ChangeRequestType;}({});export let ChangeRequestStatus=/*#__PURE__*/function(ChangeRequestStatus){ChangeRequestStatus[\"PENDING\"]=\"PENDING\";ChangeRequestStatus[\"APPROVED\"]=\"APPROVED\";ChangeRequestStatus[\"REJECTED\"]=\"REJECTED\";return ChangeRequestStatus;}({});// Financial types\n// Notification types\nexport let NotificationType=/*#__PURE__*/function(NotificationType){NotificationType[\"TASK_ASSIGNED\"]=\"TASK_ASSIGNED\";NotificationType[\"TASK_DUE_SOON\"]=\"TASK_DUE_SOON\";NotificationType[\"TASK_OVERDUE\"]=\"TASK_OVERDUE\";NotificationType[\"UPDATE_DUE\"]=\"UPDATE_DUE\";NotificationType[\"UPDATE_APPROVED\"]=\"UPDATE_APPROVED\";NotificationType[\"UPDATE_REJECTED\"]=\"UPDATE_REJECTED\";NotificationType[\"CHANGE_REQUEST_APPROVED\"]=\"CHANGE_REQUEST_APPROVED\";NotificationType[\"CHANGE_REQUEST_REJECTED\"]=\"CHANGE_REQUEST_REJECTED\";NotificationType[\"APPROVAL_NEEDED\"]=\"APPROVAL_NEEDED\";return NotificationType;}({});// Audit log types\nexport let AuditAction=/*#__PURE__*/function(AuditAction){AuditAction[\"CREATE\"]=\"CREATE\";AuditAction[\"UPDATE\"]=\"UPDATE\";AuditAction[\"DELETE\"]=\"DELETE\";AuditAction[\"LOGIN\"]=\"LOGIN\";AuditAction[\"LOGOUT\"]=\"LOGOUT\";AuditAction[\"APPROVE\"]=\"APPROVE\";AuditAction[\"REJECT\"]=\"REJECT\";AuditAction[\"SUBMIT\"]=\"SUBMIT\";return AuditAction;}({});// KPI types\n// Project Charter types\n// Meeting-related types\nexport let MeetingStatus=/*#__PURE__*/function(MeetingStatus){MeetingStatus[\"SCHEDULED\"]=\"SCHEDULED\";MeetingStatus[\"IN_PROGRESS\"]=\"IN_PROGRESS\";MeetingStatus[\"COMPLETED\"]=\"COMPLETED\";MeetingStatus[\"CANCELLED\"]=\"CANCELLED\";return MeetingStatus;}({});export let AssignmentStatus=/*#__PURE__*/function(AssignmentStatus){AssignmentStatus[\"PENDING\"]=\"PENDING\";AssignmentStatus[\"IN_PROGRESS\"]=\"IN_PROGRESS\";AssignmentStatus[\"COMPLETED\"]=\"COMPLETED\";AssignmentStatus[\"CANCELLED\"]=\"CANCELLED\";return AssignmentStatus;}({});// API Response type\nexport let TaskRequestStatus=/*#__PURE__*/function(TaskRequestStatus){TaskRequestStatus[\"PENDING\"]=\"PENDING\";TaskRequestStatus[\"APPROVED\"]=\"APPROVED\";TaskRequestStatus[\"REJECTED\"]=\"REJECTED\";TaskRequestStatus[\"IN_REVIEW\"]=\"IN_REVIEW\";return TaskRequestStatus;}({});// Goal-related types\nexport let GoalType=/*#__PURE__*/function(GoalType){GoalType[\"STRATEGIC\"]=\"STRATEGIC\";GoalType[\"ANNUAL\"]=\"ANNUAL\";GoalType[\"QUARTERLY\"]=\"QUARTERLY\";GoalType[\"MONTHLY\"]=\"MONTHLY\";return GoalType;}({});export let GoalCategory=/*#__PURE__*/function(GoalCategory){GoalCategory[\"PERFORMANCE\"]=\"PERFORMANCE\";GoalCategory[\"FINANCIAL\"]=\"FINANCIAL\";GoalCategory[\"CUSTOMER\"]=\"CUSTOMER\";GoalCategory[\"LEARNING\"]=\"LEARNING\";GoalCategory[\"PROCESS\"]=\"PROCESS\";return GoalCategory;}({});export let GoalStatus=/*#__PURE__*/function(GoalStatus){GoalStatus[\"NOT_STARTED\"]=\"NOT_STARTED\";GoalStatus[\"IN_PROGRESS\"]=\"IN_PROGRESS\";GoalStatus[\"COMPLETED\"]=\"COMPLETED\";GoalStatus[\"ON_HOLD\"]=\"ON_HOLD\";return GoalStatus;}({});// Define an interface for weighted project links\n// Add a new interface for review comments\nexport*from'./project-closure';export*from'./change-request';","map":{"version":3,"names":["UserRole","canManageProjects","role","ADMIN","PROJECT_MANAGER","SUB_PMO","MAIN_PMO","canApproveProjects","canAddTasks","canRequestTasks","canViewAllProjects","EXECUTIVE","ProjectStatus","ProjectTemplateType","ProjectPriority","ProjectRiskLevel","TaskStatus","TaskPriority","RiskStatus","RiskImpact","IssueStatus","UpdateStatus","ChangeRequestType","ChangeRequestStatus","NotificationType","AuditAction","MeetingStatus","AssignmentStatus","TaskRequestStatus","GoalType","GoalCategory","GoalStatus"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/types/index.ts"],"sourcesContent":["// Add this import at the top of the file\nimport { ApprovalStatus } from '../context/AuthContext';\n\n// User-related types\nexport enum UserRole {\n  ADMIN = 'ADMIN',\n  PROJECT_MANAGER = 'PROJECT_MANAGER',\n  SUB_PMO = 'SUB_PMO',\n  MAIN_PMO = 'MAIN_PMO',\n  DEPARTMENT_DIRECTOR = 'DEPARTMENT_DIRECTOR',\n  EXECUTIVE = 'EXECUTIVE',\n  TEAM_LEAD = 'TEAM_LEAD',\n  DEVELOPER = 'DEVELOPER',\n  PENDING = 'PENDING'\n}\n\n// Helper functions for role-based permissions\nexport const canManageProjects = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.PROJECT_MANAGER || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canApproveProjects = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canAddTasks = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.PROJECT_MANAGER || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canRequestTasks = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN ||\n         role === UserRole.PROJECT_MANAGER || \n         role === UserRole.SUB_PMO || \n         role === UserRole.MAIN_PMO;\n};\n\nexport const canViewAllProjects = (role: UserRole): boolean => {\n  return role === UserRole.ADMIN || \n         role === UserRole.MAIN_PMO || \n         role === UserRole.EXECUTIVE;\n};\n\n// Department interface\nexport interface Department {\n  id: string;\n  name: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface User {\n  id: string;\n  username: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: UserRole;\n  department: Department;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface AuthResponse {\n  userId: string;\n  username: string;\n  role: UserRole;\n  departmentId?: string;\n  token: string;\n  success: boolean;\n  message: string;\n  user?: User; // Keep for backward compatibility\n}\n\n// Project-related types\nexport enum ProjectStatus {\n  PLANNING = 'PLANNING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  ON_HOLD = 'ON_HOLD',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED'\n}\n\n// Define project template types\nexport enum ProjectTemplateType {\n  DEFAULT = 'DEFAULT',\n  ERP = 'ERP',\n  MARKETING = 'MARKETING',\n  FINANCE = 'FINANCE',\n  SUPPLY_CHAIN = 'SUPPLY_CHAIN',\n  WEBSITE = 'WEBSITE',\n  INFRASTRUCTURE = 'INFRASTRUCTURE',\n  CUSTOM = 'CUSTOM'\n}\n\nexport enum ProjectPriority {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\nexport enum ProjectRiskLevel {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\n// Attachment interface\nexport interface Attachment {\n  id: string;\n  name: string;\n  filename: string;\n  type: string;\n  size: number;\n  url: string;\n  uploadedBy: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Project {\n  id: string;\n  name: string;\n  description: string;\n  startDate: string;\n  endDate: string;\n  status: ProjectStatus;\n  projectManager?: User;\n  department?: Department;\n  budget: number;\n  goalsLink?: string;\n  client?: string;\n  actualCost?: number;\n  priority: ProjectPriority;\n  createdAt: string;\n  updatedAt: string;\n  // Add approval workflow properties\n  approvalStatus?: ApprovalStatus;\n  comments?: string;\n  reviewHistory?: ReviewComment[];\n  lastReviewedBy?: User;\n  lastReviewedAt?: string;\n  progress?: number;\n  // Legacy project properties\n  legacyImport?: boolean;\n  isDraft?: boolean;\n  // Template type for determining the detail page layout\n  templateType?: ProjectTemplateType;\n}\n\n// Task-related types\nexport enum TaskStatus {\n  TODO = 'TODO',\n  IN_PROGRESS = 'IN_PROGRESS',\n  REVIEW = 'REVIEW',\n  DONE = 'DONE'\n}\n\nexport enum TaskPriority {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH'\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  description: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  startDate: string;\n  dueDate: string;\n  projectId: string;\n  assignee?: User;\n  createdAt: string;\n  updatedAt: string;\n  comments?: TaskComment[];\n}\n\n// Task comment interface\nexport interface TaskComment {\n  id: string;\n  taskId: string;\n  text: string;\n  createdAt: string;\n  updatedAt: string;\n  author: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n}\n\n// Risk-related types\nexport enum RiskStatus {\n  IDENTIFIED = 'IDENTIFIED',\n  ASSESSED = 'ASSESSED',\n  MITIGATED = 'MITIGATED',\n  CLOSED = 'CLOSED'\n}\n\nexport enum RiskImpact {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\nexport interface Risk {\n  id: string;\n  projectId: string;\n  title: string;\n  description: string;\n  status: RiskStatus;\n  impact: RiskImpact;\n  probability: number; // 0-100\n  mitigation: string;\n  owner: User;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Issue-related types\nexport enum IssueStatus {\n  OPEN = 'OPEN',\n  IN_PROGRESS = 'IN_PROGRESS',\n  RESOLVED = 'RESOLVED',\n  CLOSED = 'CLOSED'\n}\n\nexport interface Issue {\n  id: string;\n  projectId: string;\n  title: string;\n  description: string;\n  status: IssueStatus;\n  impact: RiskImpact;\n  owner: User;\n  resolutionSummary?: string;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Weekly update types\nexport enum UpdateStatus {\n  DRAFT = 'DRAFT',\n  SUBMITTED = 'SUBMITTED',\n  APPROVED_BY_SUB_PMO = 'APPROVED_BY_SUB_PMO',\n  APPROVED_BY_MAIN_PMO = 'APPROVED_BY_MAIN_PMO',\n  REJECTED = 'REJECTED'\n}\n\n// Weekly Update interface for project update tracking\nexport interface WeeklyUpdate {\n  id: string;\n  projectId: string;\n  content: string;\n  weekNumber: number;\n  weekYear: number;\n  attachments: Attachment[];\n  author: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Change Request Types\nexport enum ChangeRequestType {\n  SCHEDULE = 'SCHEDULE',\n  BUDGET = 'BUDGET',\n  SCOPE = 'SCOPE',\n  RESOURCE = 'RESOURCE',\n  CLOSURE = 'CLOSURE',\n  OTHER = 'OTHER'\n}\n\nexport enum ChangeRequestStatus {\n  PENDING = 'PENDING',\n  APPROVED = 'APPROVED',\n  REJECTED = 'REJECTED'\n}\n\nexport interface ChangeRequest {\n  id: string;\n  projectId: string;\n  title: string;\n  description: string;\n  type: ChangeRequestType;\n  status: ChangeRequestStatus;\n  submittedBy: string;\n  submittedDate: Date;\n  reviewedBy?: string;\n  reviewedDate?: Date;\n  reviewNotes?: string;\n  \n  // Type-specific fields\n  newEndDate?: Date;           // For SCHEDULE type\n  additionalBudget?: number;   // For BUDGET type\n  currentBudget?: number;      // For BUDGET type\n  newBudget?: number;          // For BUDGET type\n  scopeDetails?: string;       // For SCOPE type\n  resourceDetails?: string;    // For RESOURCE type\n  closureDetails?: string;     // For CLOSURE type\n  otherDetails?: string;       // For OTHER type\n  \n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Financial types\nexport interface FinancialEntry {\n  id: string;\n  projectId: string;\n  category: string;\n  description: string;\n  amount: number;\n  type: 'BUDGET' | 'ACTUAL'; // Budget or actual expense\n  date: string;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Notification types\nexport enum NotificationType {\n  TASK_ASSIGNED = 'TASK_ASSIGNED',\n  TASK_DUE_SOON = 'TASK_DUE_SOON',\n  TASK_OVERDUE = 'TASK_OVERDUE',\n  UPDATE_DUE = 'UPDATE_DUE',\n  UPDATE_APPROVED = 'UPDATE_APPROVED',\n  UPDATE_REJECTED = 'UPDATE_REJECTED',\n  CHANGE_REQUEST_APPROVED = 'CHANGE_REQUEST_APPROVED',\n  CHANGE_REQUEST_REJECTED = 'CHANGE_REQUEST_REJECTED',\n  APPROVAL_NEEDED = 'APPROVAL_NEEDED'\n}\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  relatedItemId?: string;\n  relatedItemType?: string;\n  isRead: boolean;\n  createdAt: string;\n}\n\n// Audit log types\nexport enum AuditAction {\n  CREATE = 'CREATE',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n  LOGIN = 'LOGIN',\n  LOGOUT = 'LOGOUT',\n  APPROVE = 'APPROVE',\n  REJECT = 'REJECT',\n  SUBMIT = 'SUBMIT'\n}\n\nexport interface AuditLog {\n  id: string;\n  userId: string;\n  action: AuditAction;\n  entityType: string;\n  entityId: string;\n  details: string;\n  ipAddress: string;\n  createdAt: string;\n}\n\n// KPI types\nexport interface KPI {\n  id: string;\n  projectId: string;\n  name: string;\n  description: string;\n  target: number;\n  actual: number;\n  unit: string;\n  frequency: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY';\n  isHigherBetter: boolean;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Project Charter types\nexport interface ProjectCharter {\n  id: string;\n  projectId: string;\n  vision: string;\n  objectives: string;\n  scope: string;\n  outOfScope: string;\n  assumptions: string;\n  constraints: string;\n  stakeholders: string;\n  deliverables: string;\n  successCriteria: string;\n  risks: string;\n  approvedBy?: User;\n  approvedAt?: string;\n  createdBy: User;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Meeting-related types\nexport enum MeetingStatus {\n  SCHEDULED = 'SCHEDULED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED'\n}\n\nexport interface Meeting {\n  id: string;\n  title: string;\n  description: string;\n  startTime: string;\n  endTime: string;\n  status: MeetingStatus;\n  organizer: User;\n  participants: User[];\n  isActive: boolean;\n  meetingLink: string;\n  createdAt: string;\n  updatedAt?: string;\n}\n\nexport enum AssignmentStatus {\n  PENDING = 'PENDING',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  CANCELLED = 'CANCELLED'\n}\n\nexport interface Assignment {\n  id: string;\n  title: string;\n  description: string;\n  status: AssignmentStatus;\n  priority: TaskPriority;\n  assignedBy: User;\n  assignedTo: User;\n  dueDate: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// API Response type\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\nexport enum TaskRequestStatus {\n  PENDING = 'PENDING',\n  APPROVED = 'APPROVED',\n  REJECTED = 'REJECTED',\n  IN_REVIEW = 'IN_REVIEW'\n}\n\nexport interface TaskRequest {\n  id: string;\n  title: string;\n  description: string;\n  priority: TaskPriority;\n  dueDate: string;\n  projectId: string;\n  requestedBy: User;\n  status: TaskRequestStatus;\n  reviewer?: User;\n  reviewNotes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Goal-related types\nexport enum GoalType {\n  STRATEGIC = 'STRATEGIC',\n  ANNUAL = 'ANNUAL',\n  QUARTERLY = 'QUARTERLY',\n  MONTHLY = 'MONTHLY'\n}\n\nexport enum GoalCategory {\n  PERFORMANCE = 'PERFORMANCE',\n  FINANCIAL = 'FINANCIAL',\n  CUSTOMER = 'CUSTOMER',\n  LEARNING = 'LEARNING',\n  PROCESS = 'PROCESS'\n}\n\nexport enum GoalStatus {\n  NOT_STARTED = 'NOT_STARTED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  ON_HOLD = 'ON_HOLD'\n}\n\nexport interface Goal {\n  id: string;\n  title: string;\n  description: string;\n  type: GoalType;\n  category: GoalCategory;\n  status: GoalStatus;\n  progress: number;\n  startDate: string;\n  endDate: string;\n  assignedTo: string;\n  linkedProjects: ProjectWeight[];\n  isProgressAutoCalculated: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Define an interface for weighted project links\nexport interface ProjectWeight {\n  projectId: string;\n  weight: number; // Weight as a percentage (0-100)\n}\n\n// Add a new interface for review comments\nexport interface ReviewComment {\n  id?: string;\n  text: string;\n  createdAt: string;\n  user: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email?: string;\n  };\n  action: 'APPROVE' | 'REJECT' | 'REQUEST_CHANGES' | 'SUBMIT';\n}\n\nexport * from './project-closure';\nexport * from './change-request'; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}