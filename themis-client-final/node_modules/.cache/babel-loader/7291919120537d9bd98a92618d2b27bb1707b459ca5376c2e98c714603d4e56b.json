{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL, FEATURES } from '../config';\nimport LocalStorageService from './LocalStorageService';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ProjectStatus, TaskStatus, UserRole, TaskPriority, RiskStatus, RiskImpact, IssueStatus, AssignmentStatus, MeetingStatus, ProjectPriority, ProjectTemplateType } from '../types';\nimport { mockProjects } from './mockData';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Helper function to simulate delay\nconst delay = () => new Promise(resolve => setTimeout(resolve, 500));\n\n// Add simulateDelay function if not already present\nconst simulateDelay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Create a reusable mock IT department\nconst mockITDepartment = {\n  id: '1',\n  name: 'IT',\n  description: 'Information Technology Department',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\n// Mock Departments\nconst mockDepartments = [{\n  id: '1',\n  name: 'Engineering',\n  description: 'Software Engineering Department',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '2',\n  name: 'Design',\n  description: 'Product Design Department',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '3',\n  name: 'Product',\n  description: 'Product Management Department',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}];\n\n// Test users with different roles\nconst testUsers = {\n  admin: {\n    id: 'user-1',\n    username: 'john.smith',\n    firstName: 'John',\n    lastName: 'Smith',\n    email: 'john.smith@themis.com',\n    role: UserRole.ADMIN,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager1: {\n    id: 'user-2',\n    username: 'sarah.johnson',\n    firstName: 'Sarah',\n    lastName: 'Johnson',\n    email: 'sarah.johnson@themis.com',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager2: {\n    id: 'user-3',\n    username: 'michael.chen',\n    firstName: 'Michael',\n    lastName: 'Chen',\n    email: 'michael.chen@themis.com',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  developer: {\n    id: 'user-4',\n    username: 'emma.davis',\n    firstName: 'Emma',\n    lastName: 'Davis',\n    email: 'emma.davis@themis.com',\n    role: UserRole.DEVELOPER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  designer: {\n    id: 'user-5',\n    username: 'david.wilson',\n    firstName: 'David',\n    lastName: 'Wilson',\n    email: 'david.wilson@themis.com',\n    role: UserRole.DESIGNER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n};\n\n// Define a default projectId\nconst defaultProjectId = 'default-project-id';\n\n// Add a default project reference for the task objects\nconst getDefaultProject = projectId => {\n  return {\n    id: projectId,\n    name: 'Sample Project',\n    description: 'A sample project for task testing',\n    client: 'Sample Client',\n    status: ProjectStatus.IN_PROGRESS,\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-01-01',\n    endDate: '2023-12-31',\n    projectManager: testUsers.admin,\n    department: mockDepartments[0],\n    progress: 50,\n    budget: 100000,\n    actualCost: 50000,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z'\n  };\n};\n\n// Update the mock tasks with the required 'project' property\nconst mockTasks = [{\n  id: '1',\n  projectId: defaultProjectId,\n  title: 'Requirements Analysis',\n  description: 'Analyze the requirements for the new system',\n  status: TaskStatus.TODO,\n  priority: TaskPriority.HIGH,\n  startDate: '2023-01-15',\n  dueDate: '2023-01-31',\n  assignee: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-01T00:00:00Z',\n  updatedAt: '2023-01-01T00:00:00Z',\n  isMilestone: false,\n  project: getDefaultProject(defaultProjectId)\n}, {\n  id: '2',\n  projectId: defaultProjectId,\n  title: 'Database Schema Design',\n  description: 'Design the database schema for the new system',\n  status: TaskStatus.IN_PROGRESS,\n  priority: TaskPriority.MEDIUM,\n  startDate: '2023-02-01',\n  dueDate: '2023-02-15',\n  assignee: testUsers.developer,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-15T00:00:00Z',\n  updatedAt: '2023-01-15T00:00:00Z',\n  isMilestone: false,\n  project: getDefaultProject(defaultProjectId)\n}];\n\n/**\n * Generic API request function with error handling\n */\nexport const apiRequest = async (endpoint, method = 'GET', data, token, isFormData) => {\n  const USE_MOCK_DATA = true; // Set to true for development without backend\n\n  try {\n    // Set up the full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n\n    // Set up options\n    const headers = {};\n\n    // Set content type if not form data\n    if (!isFormData) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    // Add auth token if provided\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    const options = {\n      method,\n      headers\n    };\n\n    // Add body to the request if needed\n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      options.body = isFormData ? data : JSON.stringify(data);\n    }\n\n    // Make the request\n    if (!USE_MOCK_DATA) {\n      const response = await fetch(url, options);\n\n      // Check if the request was successful\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.message) || `Request failed with status ${response.status}`);\n      }\n\n      // Check if the response is empty\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      return await response.text();\n    } else {\n      // Return mock data (with persistence)\n      console.log(`Using mock data for endpoint: ${endpoint}, method: ${method}`);\n      return getMockData(endpoint, method, data);\n    }\n  } catch (error) {\n    console.error('API request failed:', error);\n    if (USE_MOCK_DATA) {\n      console.log(`Falling back to mock data for endpoint: ${endpoint}`);\n      return getMockData(endpoint, method, data);\n    }\n    throw error;\n  }\n};\n\n/**\n * Returns mock data for development based on the endpoint\n * Uses localStorage for persistence when available\n */\nconst getMockData = (endpoint, method = 'GET', data) => {\n  // Create a new resource (POST)\n  if (method === 'POST') {\n    // Handle creating a new project\n    if (endpoint === '/api/projects') {\n      // Generate a random ID for the new project\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n\n      // Create the new project with the provided data\n      const newProject = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n\n      // Save to local storage\n      LocalStorageService.addProject(newProject);\n      return {\n        data: newProject,\n        success: true\n      };\n    }\n\n    // Handle creating a new task for a project\n    if (endpoint.includes('/api/projects/') && endpoint.includes('/tasks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/tasks')[0];\n\n      // Generate a random ID for the new task\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n\n      // Create the new task with the provided data\n      const newTask = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n\n      // Save to local storage\n      LocalStorageService.addTask(newTask);\n      return {\n        data: newTask,\n        success: true\n      };\n    }\n\n    // Handle creating a new independent task\n    if (endpoint === '/api/tasks/independent') {\n      // Generate a random ID for the new task\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n\n      // Create the new task with the provided data\n      const newTask = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n\n      // Save to local storage\n      LocalStorageService.addIndependentTask(newTask);\n      return {\n        data: newTask,\n        success: true\n      };\n    }\n\n    // Handle creating a new meeting\n    if (endpoint === '/api/meetings') {\n      // Generate a random ID for the new meeting\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n\n      // Create the new meeting with the provided data\n      const newMeeting = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n        meetingLink: data.meetingLink || `https://meet.example.com/${newId}`,\n        status: data.status || MeetingStatus.SCHEDULED,\n        isActive: data.isActive || false,\n        organizer: data.organizer || testUsers.admin,\n        participants: data.participants || []\n      };\n\n      // Save to local storage\n      LocalStorageService.addMeeting(newMeeting);\n      return {\n        data: newMeeting,\n        success: true\n      };\n    }\n\n    // Handle creating a new risk\n    if (endpoint.includes('/projects/') && endpoint.includes('/risks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/risks')[0];\n\n      // Generate a random ID for the new risk\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n\n      // Create the new risk with the provided data\n      const newRisk = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n\n      // Save to local storage\n      LocalStorageService.addRisk(newRisk);\n      return {\n        data: newRisk,\n        success: true\n      };\n    }\n\n    // Handle creating a new issue\n    if (endpoint.includes('/projects/') && endpoint.includes('/issues')) {\n      const projectId = endpoint.split('/projects/')[1].split('/issues')[0];\n\n      // Generate a random ID for the new issue\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n\n      // Create the new issue with the provided data\n      const newIssue = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n\n      // Save to local storage\n      LocalStorageService.addIssue(newIssue);\n      return {\n        data: newIssue,\n        success: true\n      };\n    }\n\n    // Handle creating a new department\n    if (endpoint === '/api/departments') {\n      const newDepartment = {\n        id: uuidv4(),\n        name: data.name,\n        description: data.description || `${data.name} Department`,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // Save to local storage\n      LocalStorageService.addDepartment(newDepartment);\n      return {\n        data: newDepartment,\n        success: true\n      };\n    }\n  }\n\n  // Update an existing resource (PUT)\n  if (method === 'PUT') {\n    // Handle updating a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n\n      // Update the project in local storage\n      const updatedProject = LocalStorageService.updateProject(projectId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      return {\n        data: updatedProject,\n        success: !!updatedProject\n      };\n    }\n\n    // Handle updating a task for a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const taskId = parts[parts.length - 1];\n\n      // Update the task in local storage\n      const updatedTask = LocalStorageService.updateTask(projectId, taskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      return {\n        data: updatedTask,\n        success: !!updatedTask\n      };\n    }\n\n    // Handle updating an independent task\n    if (endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)) {\n      const taskId = endpoint.split('/independent/')[1];\n\n      // Update the task in local storage\n      const updatedTask = LocalStorageService.updateIndependentTask(taskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      return {\n        data: updatedTask,\n        success: !!updatedTask\n      };\n    }\n\n    // Handle updating a meeting\n    if (endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)) {\n      const meetingId = endpoint.split('/meetings/')[1];\n\n      // Update the meeting in local storage\n      const updatedMeeting = LocalStorageService.updateMeeting(meetingId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      return {\n        data: updatedMeeting,\n        success: !!updatedMeeting\n      };\n    }\n\n    // Handle updating a risk\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const riskId = parts[parts.length - 1];\n\n      // Update the risk in local storage\n      const updatedRisk = LocalStorageService.updateRisk(projectId, riskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      return {\n        data: updatedRisk,\n        success: !!updatedRisk\n      };\n    }\n\n    // Handle updating an issue\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const issueId = parts[parts.length - 1];\n\n      // Update the issue in local storage\n      const updatedIssue = LocalStorageService.updateIssue(projectId, issueId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      return {\n        data: updatedIssue,\n        success: !!updatedIssue\n      };\n    }\n  }\n\n  // Delete a resource (DELETE)\n  if (method === 'DELETE') {\n    // Handle deleting a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n\n      // Delete the project from local storage\n      LocalStorageService.deleteProject(projectId);\n      return {\n        success: true\n      };\n    }\n\n    // Handle deleting a task from a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const taskId = parts[parts.length - 1];\n\n      // Delete the task from local storage\n      LocalStorageService.deleteTask(projectId, taskId);\n      return {\n        success: true\n      };\n    }\n\n    // Handle deleting an independent task\n    if (endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)) {\n      const taskId = endpoint.split('/independent/')[1];\n\n      // Delete the task from local storage\n      LocalStorageService.deleteIndependentTask(taskId);\n      return {\n        success: true\n      };\n    }\n\n    // Handle deleting a meeting\n    if (endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)) {\n      const meetingId = endpoint.split('/meetings/')[1];\n\n      // Delete the meeting from local storage\n      LocalStorageService.deleteMeeting(meetingId);\n      return {\n        success: true\n      };\n    }\n\n    // Handle deleting a risk\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const riskId = parts[parts.length - 1];\n\n      // Delete the risk from local storage\n      LocalStorageService.deleteRisk(projectId, riskId);\n      return {\n        success: true\n      };\n    }\n\n    // Handle deleting an issue\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const issueId = parts[parts.length - 1];\n\n      // Delete the issue from local storage\n      LocalStorageService.deleteIssue(projectId, issueId);\n      return {\n        success: true\n      };\n    }\n  }\n\n  // GET requests for fetching data\n  if (method === 'GET') {\n    // Get all projects\n    if (endpoint === '/api/projects') {\n      // Get projects from local storage or use mock data if none\n      const storedProjects = LocalStorageService.getProjects();\n      if (storedProjects.length > 0) {\n        return {\n          data: storedProjects,\n          success: true\n        };\n      }\n\n      // Initialize localStorage with mockProjects from mockData.ts\n      LocalStorageService.saveProjects(mockProjects);\n      return {\n        data: mockProjects,\n        success: true\n      };\n    }\n\n    // Get a specific project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n\n      // Get project from local storage\n      const project = LocalStorageService.getProject(projectId);\n      if (project) {\n        return {\n          data: project,\n          success: true\n        };\n      }\n      return {\n        success: false,\n        message: 'Project not found'\n      };\n    }\n\n    // Get tasks for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/tasks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/tasks')[0];\n\n      // Get tasks from local storage or use mock data if none\n      const storedTasks = LocalStorageService.getTasks(projectId);\n      if (storedTasks.length > 0) {\n        return {\n          data: storedTasks,\n          success: true\n        };\n      }\n\n      // Create default tasks for this project\n      const tasks = mockTasks;\n\n      // Save default tasks to local storage\n      LocalStorageService.saveTasks(projectId, tasks);\n      return {\n        data: tasks,\n        success: true\n      };\n    }\n\n    // Get independent tasks\n    if (endpoint === '/api/tasks/independent') {\n      // Get tasks from local storage or use mock data if none\n      const storedTasks = LocalStorageService.getIndependentTasks();\n      if (storedTasks.length > 0) {\n        return {\n          data: storedTasks,\n          success: true\n        };\n      }\n\n      // Default empty response\n      return {\n        data: [],\n        success: true\n      };\n    }\n\n    // Get all meetings\n    if (endpoint === '/api/meetings') {\n      // Get meetings from local storage or use mock data if none\n      const storedMeetings = LocalStorageService.getMeetings();\n      if (storedMeetings.length > 0) {\n        return {\n          data: storedMeetings,\n          success: true\n        };\n      }\n\n      // Add isActive field for LocalStorageService compatibility\n      const meetingsWithIsActive = defaultMeetings.map(meeting => ({\n        ...meeting,\n        isActive: meeting.status === MeetingStatus.IN_PROGRESS\n      }));\n\n      // Save default meetings to local storage\n      LocalStorageService.saveMeetings(meetingsWithIsActive);\n      return {\n        data: meetingsWithIsActive,\n        success: true\n      };\n    }\n\n    // Get risks for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/risks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/risks')[0];\n\n      // Get risks from local storage or use mock data if none\n      const storedRisks = LocalStorageService.getRisks(projectId);\n      if (storedRisks.length > 0) {\n        return {\n          data: storedRisks,\n          success: true\n        };\n      }\n\n      // Default mock risks\n      const defaultRisks = createDefaultRisks(projectId);\n\n      // Save default risks to local storage\n      LocalStorageService.saveRisks(projectId, defaultRisks);\n      return {\n        data: defaultRisks,\n        success: true\n      };\n    }\n\n    // Get issues for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/issues')) {\n      const projectId = endpoint.split('/projects/')[1].split('/issues')[0];\n\n      // Get issues from local storage or use mock data if none\n      const storedIssues = LocalStorageService.getIssues(projectId);\n      if (storedIssues.length > 0) {\n        return {\n          data: storedIssues,\n          success: true\n        };\n      }\n\n      // Default mock issues\n      const defaultIssues = createDefaultIssues(projectId);\n\n      // Save default issues to local storage\n      LocalStorageService.saveIssues(projectId, defaultIssues);\n      return {\n        data: defaultIssues,\n        success: true\n      };\n    }\n\n    // Get departments\n    if (endpoint === '/api/departments') {\n      const departments = LocalStorageService.getDepartments();\n      if (departments.length > 0) {\n        return {\n          data: departments,\n          success: true\n        };\n      }\n      return {\n        data: [],\n        success: true\n      };\n    }\n  }\n\n  // Default empty response for unhandled endpoints\n  return {\n    data: [],\n    success: true\n  };\n};\n\n// Default mock meetings\nconst defaultMeetings = [{\n  id: '1',\n  title: 'Sprint Planning',\n  description: 'Plan tasks for the next sprint',\n  startTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),\n  endTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(),\n  status: MeetingStatus.SCHEDULED,\n  isActive: false,\n  meetingLink: 'https://meet.example.com/sprint-planning',\n  organizer: testUsers.admin,\n  participants: [testUsers.manager1, testUsers.developer],\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '2',\n  title: 'Project Status Review',\n  description: 'Review the current status of the Digital Transformation project',\n  startTime: new Date(Date.now() + 30 * 60 * 1000).toISOString(),\n  endTime: new Date(Date.now() + 90 * 60 * 1000).toISOString(),\n  status: MeetingStatus.SCHEDULED,\n  isActive: false,\n  meetingLink: 'https://meet.example.com/project-status',\n  organizer: testUsers.admin,\n  participants: [testUsers.manager1, testUsers.manager2],\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}];\n\n// Default mock risks\nconst createDefaultRisks = projectId => [{\n  id: '1',\n  projectId,\n  title: 'Data Migration Risk',\n  description: 'Risk of data loss during migration process',\n  status: RiskStatus.IDENTIFIED,\n  impact: RiskImpact.HIGH,\n  probability: 70,\n  mitigation: 'Create multiple backups before migration and perform test migrations on sample data',\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-10T00:00:00Z',\n  updatedAt: '2023-01-10T00:00:00Z'\n}, {\n  id: '2',\n  projectId,\n  title: 'Resource Availability Risk',\n  description: 'Risk of key team members being unavailable during critical project phases',\n  status: RiskStatus.ASSESSED,\n  impact: RiskImpact.MEDIUM,\n  probability: 50,\n  mitigation: 'Develop contingency plans and cross-train team members',\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-15T00:00:00Z',\n  updatedAt: '2023-01-15T00:00:00Z'\n}];\n\n// Default mock issues\nconst createDefaultIssues = projectId => [{\n  id: '1',\n  projectId,\n  title: 'Integration Failure with Legacy System',\n  description: 'The new system cannot properly integrate with the existing legacy system',\n  status: IssueStatus.OPEN,\n  impact: RiskImpact.HIGH,\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-02-10T00:00:00Z',\n  updatedAt: '2023-02-10T00:00:00Z'\n}, {\n  id: '2',\n  projectId,\n  title: 'Performance Bottleneck in Module A',\n  description: 'Module A performance is not meeting expected throughput requirements',\n  status: IssueStatus.IN_PROGRESS,\n  impact: RiskImpact.MEDIUM,\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-02-15T00:00:00Z',\n  updatedAt: '2023-02-20T00:00:00Z'\n}, {\n  id: '3',\n  projectId,\n  title: 'Security Vulnerability in Authentication',\n  description: 'Security audit identified a potential vulnerability in the authentication process',\n  status: IssueStatus.RESOLVED,\n  impact: RiskImpact.CRITICAL,\n  resolutionSummary: 'Implemented updated security protocols and fixed the vulnerability with patch 1.2.3',\n  owner: testUsers.admin,\n  createdBy: testUsers.admin,\n  createdAt: '2023-01-25T00:00:00Z',\n  updatedAt: '2023-02-05T00:00:00Z'\n}];\n\n// Update the defaultProjects array with the required properties\nconst defaultProjects = [{\n  id: 'proj-1',\n  name: 'Digital Transformation',\n  description: 'Enterprise digital transformation project',\n  priority: ProjectPriority.HIGH,\n  startDate: '2023-01-15',\n  endDate: '2023-12-31',\n  status: ProjectStatus.IN_PROGRESS,\n  progress: 65,\n  budget: 500000,\n  actualCost: 325000,\n  department: mockDepartments[0],\n  projectManager: testUsers.manager1,\n  createdAt: '2023-01-01T00:00:00Z',\n  updatedAt: '2023-01-01T00:00:00Z',\n  templateType: ProjectTemplateType.DEFAULT\n}, {\n  id: 'proj-2',\n  name: 'Cloud Migration',\n  description: 'Migration of on-premises infrastructure to cloud',\n  priority: ProjectPriority.MEDIUM,\n  startDate: '2023-02-01',\n  endDate: '2023-08-31',\n  status: ProjectStatus.ON_HOLD,\n  progress: 40,\n  budget: 300000,\n  actualCost: 120000,\n  department: mockDepartments[1],\n  projectManager: testUsers.manager2,\n  createdAt: '2023-01-15T00:00:00Z',\n  updatedAt: '2023-01-15T00:00:00Z',\n  templateType: ProjectTemplateType.INFRASTRUCTURE\n}, {\n  id: 'proj-3',\n  name: 'E-commerce Platform Redesign',\n  description: 'Redesign and modernization of e-commerce platform',\n  priority: ProjectPriority.CRITICAL,\n  startDate: '2023-03-01',\n  endDate: '2023-07-15',\n  status: ProjectStatus.COMPLETED,\n  progress: 100,\n  budget: 450000,\n  actualCost: 435000,\n  department: mockDepartments[0],\n  projectManager: testUsers.manager1,\n  createdAt: '2023-02-15T00:00:00Z',\n  updatedAt: '2023-07-18T00:00:00Z',\n  templateType: ProjectTemplateType.WEBSITE\n}, {\n  id: 'proj-4',\n  name: 'Mobile App Development',\n  description: 'Cross-platform mobile application for customer engagement',\n  priority: ProjectPriority.HIGH,\n  startDate: '2023-04-01',\n  endDate: '2023-10-31',\n  status: ProjectStatus.IN_PROGRESS,\n  progress: 55,\n  budget: 380000,\n  actualCost: 210000,\n  department: mockDepartments[1],\n  projectManager: testUsers.manager2,\n  createdAt: '2023-03-15T00:00:00Z',\n  updatedAt: '2023-07-20T00:00:00Z',\n  templateType: ProjectTemplateType.DEFAULT\n}, {\n  id: 'proj-5',\n  name: 'Security Infrastructure Enhancement',\n  description: 'Upgrade of security systems and implementation of advanced protection measures',\n  priority: ProjectPriority.CRITICAL,\n  startDate: '2023-01-15',\n  endDate: '2023-05-30',\n  status: ProjectStatus.COMPLETED,\n  progress: 100,\n  budget: 275000,\n  actualCost: 268000,\n  department: mockDepartments[0],\n  projectManager: testUsers.manager1,\n  createdAt: '2023-01-05T00:00:00Z',\n  updatedAt: '2023-06-02T00:00:00Z',\n  templateType: ProjectTemplateType.INFRASTRUCTURE\n}, {\n  id: 'proj-6',\n  name: 'Data Center Relocation',\n  description: 'Physical relocation of data center to new facility',\n  priority: ProjectPriority.HIGH,\n  startDate: '2023-02-15',\n  endDate: '2023-09-15',\n  status: ProjectStatus.ON_HOLD,\n  progress: 35,\n  budget: 600000,\n  actualCost: 210000,\n  department: mockDepartments[0],\n  projectManager: testUsers.manager1,\n  createdAt: '2023-02-01T00:00:00Z',\n  updatedAt: '2023-06-30T00:00:00Z',\n  templateType: ProjectTemplateType.INFRASTRUCTURE\n}, {\n  id: 'proj-7',\n  name: 'AI Chatbot Implementation',\n  description: 'Development and integration of AI-powered customer service chatbot',\n  priority: ProjectPriority.MEDIUM,\n  startDate: '2023-04-15',\n  endDate: '2023-08-15',\n  status: ProjectStatus.IN_PROGRESS,\n  progress: 70,\n  budget: 225000,\n  actualCost: 157500,\n  department: mockDepartments[1],\n  projectManager: testUsers.manager2,\n  createdAt: '2023-04-01T00:00:00Z',\n  updatedAt: '2023-07-15T00:00:00Z',\n  templateType: ProjectTemplateType.WEBSITE\n}, {\n  id: 'proj-8',\n  name: 'CRM Integration',\n  description: 'Integration of new CRM system with existing applications',\n  priority: ProjectPriority.HIGH,\n  startDate: '2023-01-10',\n  endDate: '2023-04-10',\n  status: ProjectStatus.COMPLETED,\n  progress: 100,\n  budget: 180000,\n  actualCost: 172000,\n  department: mockDepartments[1],\n  projectManager: testUsers.manager2,\n  createdAt: '2022-12-20T00:00:00Z',\n  updatedAt: '2023-04-12T00:00:00Z',\n  templateType: ProjectTemplateType.DEFAULT\n}, {\n  id: 'proj-9',\n  name: 'Financial Reporting System',\n  description: 'Implementation of new financial reporting system',\n  priority: ProjectPriority.MEDIUM,\n  startDate: '2023-05-01',\n  endDate: '2023-11-30',\n  status: ProjectStatus.PLANNING,\n  progress: 15,\n  budget: 320000,\n  actualCost: 48000,\n  department: mockDepartments[0],\n  projectManager: testUsers.manager1,\n  createdAt: '2023-04-15T00:00:00Z',\n  updatedAt: '2023-06-10T00:00:00Z',\n  templateType: ProjectTemplateType.FINANCE\n}];\n\n// Helper function to simulate login\nexport const login = async (email, password) => {\n  // For testing purposes, we'll match the email and return the corresponding test user\n  const user = Object.values(testUsers).find(u => u.email === email);\n  if (user) {\n    return {\n      success: true,\n      data: user,\n      message: 'Login successful'\n    };\n  }\n  return {\n    success: false,\n    data: null,\n    message: 'Invalid credentials'\n  };\n};\nconst defaultUsers = [{\n  id: '1',\n  username: 'john.doe',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john.doe@themis.com',\n  role: UserRole.PROJECT_MANAGER,\n  department: mockDepartments[0],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '2',\n  username: 'jane.smith',\n  firstName: 'Jane',\n  lastName: 'Smith',\n  email: 'jane.smith@themis.com',\n  role: UserRole.DEVELOPER,\n  department: mockDepartments[0],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '3',\n  username: 'mike.johnson',\n  firstName: 'Mike',\n  lastName: 'Johnson',\n  email: 'mike.johnson@themis.com',\n  role: UserRole.DESIGNER,\n  department: mockDepartments[1],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '4',\n  username: 'sarah.wilson',\n  firstName: 'Sarah',\n  lastName: 'Wilson',\n  email: 'sarah.wilson@themis.com',\n  role: UserRole.DEVELOPER,\n  department: mockDepartments[0],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '5',\n  username: 'david.brown',\n  firstName: 'David',\n  lastName: 'Brown',\n  email: 'david.brown@themis.com',\n  role: UserRole.PROJECT_MANAGER,\n  department: mockDepartments[2],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}];\nconst mockAssignments = [{\n  id: '1',\n  title: 'Implement User Authentication',\n  description: 'Set up JWT authentication and user session management for the application. Include password reset functionality and email verification.',\n  status: AssignmentStatus.IN_PROGRESS,\n  priority: TaskPriority.HIGH,\n  assignedBy: defaultUsers[0],\n  assignedTo: defaultUsers[1],\n  dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '2',\n  title: 'Design Landing Page Mockups',\n  description: 'Create high-fidelity mockups for the new landing page. Include mobile and desktop versions, with dark mode support.',\n  status: AssignmentStatus.PENDING,\n  priority: TaskPriority.MEDIUM,\n  assignedBy: defaultUsers[0],\n  assignedTo: defaultUsers[2],\n  dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '3',\n  title: 'API Performance Optimization',\n  description: 'Optimize database queries and implement caching for frequently accessed endpoints. Target 50% reduction in response times.',\n  status: AssignmentStatus.COMPLETED,\n  priority: TaskPriority.HIGH,\n  assignedBy: defaultUsers[0],\n  assignedTo: defaultUsers[3],\n  dueDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '4',\n  title: 'Write End-to-End Tests',\n  description: 'Implement comprehensive E2E tests using Cypress for critical user flows. Achieve minimum 80% coverage.',\n  status: AssignmentStatus.IN_PROGRESS,\n  priority: TaskPriority.MEDIUM,\n  assignedBy: defaultUsers[4],\n  assignedTo: defaultUsers[1],\n  dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '5',\n  title: 'Security Audit',\n  description: 'Conduct a comprehensive security audit of the application. Check for vulnerabilities, update dependencies, and implement security best practices.',\n  status: AssignmentStatus.PENDING,\n  priority: TaskPriority.HIGH,\n  assignedBy: defaultUsers[0],\n  assignedTo: defaultUsers[3],\n  dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '6',\n  title: 'Mobile Responsive Design',\n  description: 'Ensure all components are fully responsive on mobile devices. Fix any existing layout issues and implement mobile-specific optimizations.',\n  status: AssignmentStatus.IN_PROGRESS,\n  priority: TaskPriority.MEDIUM,\n  assignedBy: defaultUsers[4],\n  assignedTo: defaultUsers[2],\n  dueDate: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '7',\n  title: 'Documentation Update',\n  description: 'Update API documentation and add usage examples for all endpoints. Include authentication requirements and response formats.',\n  status: AssignmentStatus.COMPLETED,\n  priority: TaskPriority.LOW,\n  assignedBy: defaultUsers[0],\n  assignedTo: defaultUsers[1],\n  dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date().toISOString()\n}, {\n  id: '8',\n  title: 'User Analytics Dashboard',\n  description: 'Create a new dashboard to display user engagement metrics. Include charts for daily active users, session duration, and feature usage.',\n  status: AssignmentStatus.PENDING,\n  priority: TaskPriority.HIGH,\n  assignedBy: defaultUsers[4],\n  assignedTo: defaultUsers[3],\n  dueDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000).toISOString(),\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}];\nconst assignments = {\n  getAllAssignments: async token => {\n    await delay();\n    return {\n      success: true,\n      data: mockAssignments\n    };\n  },\n  getAssignmentById: async (id, token) => {\n    await delay();\n    const assignment = mockAssignments.find(a => a.id === id);\n    return {\n      success: !!assignment,\n      data: assignment || mockAssignments[0]\n    };\n  },\n  createAssignment: async (data, token) => {\n    await delay();\n    const newAssignment = {\n      id: String(mockAssignments.length + 1),\n      ...data,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    mockAssignments.push(newAssignment);\n    return {\n      success: true,\n      data: newAssignment\n    };\n  },\n  updateAssignment: async (id, data, token) => {\n    await delay();\n    const index = mockAssignments.findIndex(a => a.id === id);\n    if (index === -1) {\n      return {\n        success: false,\n        error: 'Assignment not found'\n      };\n    }\n    mockAssignments[index] = {\n      ...mockAssignments[index],\n      ...data,\n      updatedAt: new Date().toISOString()\n    };\n    return {\n      success: true,\n      data: mockAssignments[index]\n    };\n  },\n  deleteAssignment: async (id, token) => {\n    await delay();\n    const index = mockAssignments.findIndex(a => a.id === id);\n    if (index === -1) {\n      return {\n        success: false,\n        error: 'Assignment not found'\n      };\n    }\n    mockAssignments.splice(index, 1);\n    return {\n      success: true\n    };\n  }\n};\n\n// Create a named API object to export instead of using anonymous default export\nconst apiRoutes = {\n  // Auth endpoints\n  auth: {\n    login: adIdentifier => {\n      // Mock implementation for testing without backend\n      console.log('Using mock login implementation');\n      return Promise.resolve({\n        userId: '1',\n        username: adIdentifier,\n        role: UserRole.ADMIN,\n        // Defaulting to ADMIN for testing\n        departmentId: '1',\n        token: 'mock-token-' + Date.now(),\n        success: true,\n        message: 'Login successful'\n      });\n    },\n    refreshToken: refreshToken => apiRequest('/api/auth/refresh', 'POST', {\n      refreshToken\n    }),\n    logout: token => apiRequest('/api/auth/logout', 'POST', {}, token)\n  },\n  // User endpoints\n  users: {\n    getCurrentUser: token => apiRequest('/api/users/me', 'GET', undefined, token),\n    getAllUsers: async token => {\n      await delay();\n      return {\n        success: true,\n        data: defaultUsers\n      };\n    },\n    getUserById: (userId, token) => apiRequest(`/api/users/${userId}`, 'GET', undefined, token),\n    createUser: (userData, token) => apiRequest('/api/users', 'POST', userData, token),\n    updateUser: (userId, userData, token) => apiRequest(`/api/users/${userId}`, 'PUT', userData, token),\n    deleteUser: (userId, token) => apiRequest(`/api/users/${userId}`, 'DELETE', undefined, token),\n    assignRole: (userId, role, token) => apiRequest(`/api/users/${userId}/role`, 'PUT', {\n      role\n    }, token),\n    assignDepartment: (userId, departmentId, token) => apiRequest(`/api/users/${userId}/department`, 'PUT', {\n      departmentId\n    }, token),\n    getAllDepartments: token => apiRequest('/api/users/departments', 'GET', undefined, token)\n  },\n  // Project endpoints\n  projects: {\n    getAllProjects: async token => {\n      // For demo purposes, simulate fetching from API\n      await simulateDelay();\n\n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n      return {\n        data: projects\n      };\n    },\n    getProjectById: async (id, token) => {\n      await simulateDelay();\n\n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n\n      // Find the requested project\n      const project = projects.find(p => p.id === id);\n      if (!project) {\n        throw new Error(`Project with ID ${id} not found`);\n      }\n      return {\n        data: project\n      };\n    },\n    createProject: async (projectData, token) => {\n      await simulateDelay();\n\n      // Ensure the project has a templateType (default to DEFAULT if not specified)\n      const projectToCreate = {\n        ...projectData,\n        templateType: projectData.templateType || 'DEFAULT'\n      };\n\n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n\n      // Add new project to the list\n      const updatedProjects = [...projects, projectToCreate];\n\n      // Update localStorage\n      localStorage.setItem('themis_projects', JSON.stringify(updatedProjects));\n      return {\n        data: projectToCreate\n      };\n    },\n    updateProject: async (projectId, projectData, token) => {\n      await simulateDelay();\n\n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n\n      // Find the project to update\n      const projectIndex = projects.findIndex(p => p.id === projectId);\n      if (projectIndex === -1) {\n        throw new Error(`Project with ID ${projectId} not found`);\n      }\n\n      // Update the project, ensuring templateType is preserved\n      const updatedProject = {\n        ...projects[projectIndex],\n        ...projectData,\n        templateType: projectData.templateType || projects[projectIndex].templateType || 'DEFAULT'\n      };\n\n      // Update the projects array\n      const updatedProjectsArray = [...projects];\n      updatedProjectsArray[projectIndex] = updatedProject;\n\n      // Update localStorage\n      localStorage.setItem('themis_projects', JSON.stringify(updatedProjectsArray));\n      return {\n        data: updatedProject\n      };\n    },\n    deleteProject: async (projectId, token) => {\n      await simulateDelay();\n\n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n\n      // Filter out the project to delete\n      const updatedProjects = projects.filter(p => p.id !== projectId);\n      if (projects.length === updatedProjects.length) {\n        throw new Error(`Project with ID ${projectId} not found`);\n      }\n\n      // Update localStorage\n      localStorage.setItem('themis_projects', JSON.stringify(updatedProjects));\n      return {\n        data: {\n          message: 'Project deleted successfully'\n        }\n      };\n    },\n    uploadAttachment: (projectId, formData, token) => apiRequest(`/api/projects/${projectId}/attachments`, 'POST', formData, token, true),\n    getAttachments: (projectId, token) => apiRequest(`/api/projects/${projectId}/attachments`, 'GET', undefined, token),\n    deleteAttachment: (projectId, attachmentId, token) => apiRequest(`/api/projects/${projectId}/attachments/${attachmentId}`, 'DELETE', undefined, token),\n    getProject: async (projectId, token) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/projects/${projectId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n\n        // For now, return mock data\n        return {\n          data: {\n            id: projectId,\n            name: \"Mock Project\",\n            description: \"This is a mock project returned by the API\",\n            startDate: new Date().toISOString(),\n            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            status: \"IN_PROGRESS\",\n            priority: \"MEDIUM\",\n            budget: 100000,\n            progress: 50,\n            department: {\n              id: \"dept-1\",\n              name: \"IT Department\"\n            },\n            projectManager: {\n              id: \"user-1\",\n              firstName: \"John\",\n              lastName: \"Doe\"\n            },\n            approvalStatus: \"SUBMITTED\",\n            comments: \"This is a sample comment on the project\",\n            reviewHistory: [],\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching project:', error);\n        throw error;\n      }\n    }\n  },\n  // Task endpoints\n  tasks: {\n    getAllTasks: (projectId, token) => apiRequest(`/api/projects/${projectId}/tasks`, 'GET', undefined, token),\n    getAllIndependentTasks: token => apiRequest('/api/tasks/independent', 'GET', undefined, token),\n    getTaskById: (projectId, taskId, token) => apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'GET', undefined, token),\n    getIndependentTaskById: (taskId, token) => apiRequest(`/api/tasks/independent/${taskId}`, 'GET', undefined, token),\n    createTask: (projectId, taskData, token) => apiRequest(`/api/projects/${projectId}/tasks`, 'POST', taskData, token),\n    createIndependentTask: (taskData, token) => apiRequest('/api/tasks/independent', 'POST', taskData, token),\n    updateTask: (projectId, taskId, taskData, token) => apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'PUT', taskData, token),\n    updateIndependentTask: (taskId, taskData, token) => apiRequest(`/api/tasks/independent/${taskId}`, 'PUT', taskData, token),\n    deleteTask: (projectId, taskId, token) => apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'DELETE', undefined, token),\n    deleteIndependentTask: (taskId, token) => apiRequest(`/api/tasks/independent/${taskId}`, 'DELETE', undefined, token),\n    // Add task comment\n    addComment: async (projectId, taskId, commentData, token) => {\n      if (FEATURES.OFFLINE_MODE) {\n        // In offline mode, simulate API response\n        await simulateDelay();\n\n        // Get existing tasks from localStorage\n        const allTasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n\n        // Find the specific task to add the comment to\n        const taskIndex = allTasks.findIndex(t => t.id === taskId && t.projectId === projectId);\n        if (taskIndex !== -1) {\n          // Create a new comment\n          const newComment = {\n            id: `comment-${Date.now()}`,\n            taskId,\n            text: commentData.text,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            author: {\n              id: commentData.authorId,\n              firstName: commentData.authorFirstName || 'User',\n              lastName: commentData.authorLastName || commentData.authorId\n            }\n          };\n\n          // Add comment to the task\n          if (!allTasks[taskIndex].comments) {\n            allTasks[taskIndex].comments = [];\n          }\n          allTasks[taskIndex].comments.push(newComment);\n\n          // Save back to localStorage\n          localStorage.setItem('tasks', JSON.stringify(allTasks));\n          return {\n            success: true,\n            data: newComment,\n            message: 'Comment added successfully'\n          };\n        } else {\n          throw new Error('Task not found');\n        }\n      } else {\n        // In online mode, make actual API call\n        const response = await axios.post(`${API_BASE_URL}/projects/${projectId}/tasks/${taskId}/comments`, commentData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return response.data;\n      }\n    }\n  },\n  // Risk endpoints\n  risks: {\n    getAllRisks: (projectId, token) => apiRequest(`/api/projects/${projectId}/risks`, 'GET', undefined, token),\n    getRiskById: (projectId, riskId, token) => apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'GET', undefined, token),\n    createRisk: (projectId, riskData, token) => apiRequest(`/api/projects/${projectId}/risks`, 'POST', riskData, token),\n    updateRisk: (projectId, riskId, riskData, token) => apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'PUT', riskData, token),\n    deleteRisk: (projectId, riskId, token) => apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'DELETE', undefined, token)\n  },\n  // Issue endpoints\n  issues: {\n    getAllIssues: (projectId, token) => apiRequest(`/projects/${projectId}/issues`, 'GET', null, token),\n    getIssueById: (projectId, issueId, token) => apiRequest(`/projects/${projectId}/issues/${issueId}`, 'GET', null, token),\n    createIssue: (projectId, issueData, token) => apiRequest(`/projects/${projectId}/issues`, 'POST', issueData, token),\n    updateIssue: (projectId, issueId, issueData, token) => apiRequest(`/projects/${projectId}/issues/${issueId}`, 'PUT', issueData, token),\n    deleteIssue: (projectId, issueId, token) => apiRequest(`/projects/${projectId}/issues/${issueId}`, 'DELETE', null, token)\n  },\n  // Task Request endpoints\n  taskRequests: {\n    createTaskRequest: (requestData, token) => apiRequest('/api/task-requests', 'POST', requestData, token),\n    getTaskRequestsByProject: (projectId, token) => apiRequest(`/api/task-requests?projectId=${projectId}`, 'GET', undefined, token),\n    getTaskRequestById: (requestId, token) => apiRequest(`/api/task-requests/${requestId}`, 'GET', undefined, token),\n    updateTaskRequestStatus: (requestId, status, reviewNotes, token) => apiRequest(`/api/task-requests/${requestId}/status`, 'PATCH', {\n      status,\n      reviewNotes\n    }, token),\n    approveTaskRequest: (requestId, reviewNotes, token) => apiRequest(`/api/task-requests/${requestId}/approve`, 'POST', {\n      reviewNotes\n    }, token),\n    rejectTaskRequest: (requestId, reviewNotes, token) => apiRequest(`/api/task-requests/${requestId}/reject`, 'POST', {\n      reviewNotes\n    }, token)\n  },\n  // Assignment endpoints\n  assignments,\n  auditLogs: {\n    getAuditLogs: token => apiRequest('/audit-logs', 'GET', null, token),\n    getAuditLogById: (logId, token) => apiRequest(`/audit-logs/${logId}`, 'GET', null, token)\n  },\n  // Department endpoints\n  departments: {\n    getAllDepartments: async token => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/departments`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n\n        // For now, return mock data\n        return {\n          data: [{\n            id: \"dept-1\",\n            name: \"IT Department\",\n            description: \"Information Technology Department\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }, {\n            id: \"dept-2\",\n            name: \"HR Department\",\n            description: \"Human Resources Department\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }, {\n            id: \"dept-3\",\n            name: \"Finance Department\",\n            description: \"Finance and Accounting Department\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }]\n        };\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n        throw error;\n      }\n    },\n    getDepartmentById: async (departmentId, token) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/departments/${departmentId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n\n        // For now, return mock data\n        return {\n          data: {\n            id: departmentId,\n            name: \"Mock Department\",\n            description: \"This is a mock department\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching department:', error);\n        throw error;\n      }\n    },\n    createDepartment: async (departmentData, token) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.post(`${API_BASE_URL}/departments`, departmentData, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n\n        // For now, return mock data\n        return {\n          data: {\n            id: Date.now().toString(),\n            ...departmentData,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error creating department:', error);\n        throw error;\n      }\n    },\n    updateDepartment: async (departmentId, departmentData, token) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.put(`${API_BASE_URL}/departments/${departmentId}`, departmentData, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n\n        // For now, return mock data\n        return {\n          data: {\n            id: departmentId,\n            ...departmentData,\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error updating department:', error);\n        throw error;\n      }\n    },\n    deleteDepartment: async (departmentId, token) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.delete(`${API_BASE_URL}/departments/${departmentId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n\n        // For now, return mock success\n        return {\n          data: {\n            success: true,\n            message: \"Department deleted successfully\"\n          }\n        };\n      } catch (error) {\n        console.error('Error deleting department:', error);\n        throw error;\n      }\n    }\n  },\n  // Change Request endpoints\n  changeRequests: {\n    getChangeRequestsByProject: (projectId, token) => apiRequest(`/api/projects/${projectId}/change-requests`, 'GET', undefined, token),\n    getChangeRequestById: (requestId, token) => apiRequest(`/api/change-requests/${requestId}`, 'GET', undefined, token),\n    createChangeRequest: (requestData, token) => apiRequest('/api/change-requests', 'POST', requestData, token),\n    updateChangeRequestStatus: (requestId, status, reviewNotes, token) => apiRequest(`/api/change-requests/${requestId}/status`, 'PATCH', {\n      status,\n      reviewNotes\n    }, token),\n    approveChangeRequest: (requestId, reviewNotes, token) => apiRequest(`/api/change-requests/${requestId}/approve`, 'POST', {\n      reviewNotes\n    }, token),\n    rejectChangeRequest: (requestId, reviewNotes, token) => apiRequest(`/api/change-requests/${requestId}/reject`, 'POST', {\n      reviewNotes\n    }, token),\n    getAllChangeRequests: token => apiRequest('/api/change-requests', 'GET', undefined, token)\n  }\n};\nexport default apiRoutes;","map":{"version":3,"names":["axios","API_BASE_URL","FEATURES","LocalStorageService","v4","uuidv4","ProjectStatus","TaskStatus","UserRole","TaskPriority","RiskStatus","RiskImpact","IssueStatus","AssignmentStatus","MeetingStatus","ProjectPriority","ProjectTemplateType","mockProjects","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","delay","Promise","resolve","setTimeout","simulateDelay","ms","mockITDepartment","id","name","description","createdAt","Date","toISOString","updatedAt","mockDepartments","testUsers","admin","username","firstName","lastName","email","role","ADMIN","department","isActive","manager1","MANAGER","manager2","developer","DEVELOPER","designer","DESIGNER","defaultProjectId","getDefaultProject","projectId","client","status","IN_PROGRESS","priority","MEDIUM","startDate","endDate","projectManager","progress","budget","actualCost","mockTasks","title","TODO","HIGH","dueDate","assignee","createdBy","isMilestone","project","apiRequest","endpoint","method","data","isFormData","USE_MOCK_DATA","url","options","body","JSON","stringify","response","fetch","ok","errorData","json","catch","Error","message","contentType","get","includes","text","console","log","getMockData","error","newId","newProject","addProject","success","split","newTask","addTask","addIndependentTask","newMeeting","meetingLink","SCHEDULED","organizer","participants","addMeeting","newRisk","addRisk","newIssue","addIssue","newDepartment","addDepartment","match","updatedProject","updateProject","parts","length","taskId","updatedTask","updateTask","updateIndependentTask","meetingId","updatedMeeting","updateMeeting","riskId","updatedRisk","updateRisk","issueId","updatedIssue","updateIssue","deleteProject","deleteTask","deleteIndependentTask","deleteMeeting","deleteRisk","deleteIssue","storedProjects","getProjects","saveProjects","getProject","storedTasks","getTasks","tasks","saveTasks","getIndependentTasks","storedMeetings","getMeetings","meetingsWithIsActive","defaultMeetings","map","meeting","saveMeetings","storedRisks","getRisks","defaultRisks","createDefaultRisks","saveRisks","storedIssues","getIssues","defaultIssues","createDefaultIssues","saveIssues","departments","getDepartments","startTime","now","endTime","IDENTIFIED","impact","probability","mitigation","owner","ASSESSED","OPEN","RESOLVED","CRITICAL","resolutionSummary","defaultProjects","templateType","DEFAULT","ON_HOLD","INFRASTRUCTURE","COMPLETED","WEBSITE","PLANNING","FINANCE","login","password","user","Object","values","find","u","defaultUsers","PROJECT_MANAGER","mockAssignments","assignedBy","assignedTo","PENDING","LOW","assignments","getAllAssignments","getAssignmentById","assignment","a","createAssignment","newAssignment","String","push","updateAssignment","index","findIndex","deleteAssignment","splice","apiRoutes","auth","adIdentifier","userId","departmentId","refreshToken","logout","users","getCurrentUser","undefined","getAllUsers","getUserById","createUser","userData","updateUser","deleteUser","assignRole","assignDepartment","getAllDepartments","projects","getAllProjects","cachedProjects","parse","getProjectById","p","createProject","projectData","projectToCreate","updatedProjects","setItem","projectIndex","updatedProjectsArray","filter","uploadAttachment","formData","getAttachments","deleteAttachment","attachmentId","approvalStatus","comments","reviewHistory","getAllTasks","getAllIndependentTasks","getTaskById","getIndependentTaskById","createTask","taskData","createIndependentTask","addComment","commentData","OFFLINE_MODE","allTasks","taskIndex","t","newComment","author","authorId","authorFirstName","authorLastName","post","risks","getAllRisks","getRiskById","createRisk","riskData","issues","getAllIssues","getIssueById","createIssue","issueData","taskRequests","createTaskRequest","requestData","getTaskRequestsByProject","getTaskRequestById","requestId","updateTaskRequestStatus","reviewNotes","approveTaskRequest","rejectTaskRequest","auditLogs","getAuditLogs","getAuditLogById","logId","getDepartmentById","createDepartment","departmentData","toString","updateDepartment","deleteDepartment","changeRequests","getChangeRequestsByProject","getChangeRequestById","createChangeRequest","updateChangeRequestStatus","approveChangeRequest","rejectChangeRequest","getAllChangeRequests"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL, FEATURES } from '../config';\nimport LocalStorageService from './LocalStorageService';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ProjectStatus, TaskStatus, UserRole, TaskPriority, RiskStatus, RiskImpact, IssueStatus, Project, Task, User, Department, Meeting, Risk, Issue, Assignment, AssignmentStatus, ApiResponse, MeetingStatus, ProjectPriority, ProjectTemplateType } from '../types';\nimport { \n  mockProjects, \n  mockUsers, \n  mockRisks, \n  mockMeetings, \n  mockIssues \n} from './mockData';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Helper function to simulate delay\nconst delay = () => new Promise(resolve => setTimeout(resolve, 500));\n\n// Add simulateDelay function if not already present\nconst simulateDelay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Create a reusable mock IT department\nconst mockITDepartment: Department = {\n  id: '1',\n  name: 'IT',\n  description: 'Information Technology Department',\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\n// Mock Departments\nconst mockDepartments: Department[] = [\n  {\n    id: '1',\n    name: 'Engineering',\n    description: 'Software Engineering Department',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    name: 'Design',\n    description: 'Product Design Department',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    name: 'Product',\n    description: 'Product Management Department',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\n// Test users with different roles\nconst testUsers = {\n  admin: {\n    id: 'user-1',\n    username: 'john.smith',\n    firstName: 'John',\n    lastName: 'Smith',\n    email: 'john.smith@themis.com',\n    role: UserRole.ADMIN,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager1: {\n    id: 'user-2',\n    username: 'sarah.johnson',\n    firstName: 'Sarah',\n    lastName: 'Johnson',\n    email: 'sarah.johnson@themis.com',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  manager2: {\n    id: 'user-3',\n    username: 'michael.chen',\n    firstName: 'Michael',\n    lastName: 'Chen',\n    email: 'michael.chen@themis.com',\n    role: UserRole.MANAGER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  developer: {\n    id: 'user-4',\n    username: 'emma.davis',\n    firstName: 'Emma',\n    lastName: 'Davis',\n    email: 'emma.davis@themis.com',\n    role: UserRole.DEVELOPER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  designer: {\n    id: 'user-5',\n    username: 'david.wilson',\n    firstName: 'David',\n    lastName: 'Wilson',\n    email: 'david.wilson@themis.com',\n    role: UserRole.DESIGNER,\n    department: mockITDepartment,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n};\n\n// Define a default projectId\nconst defaultProjectId = 'default-project-id';\n\n// Add a default project reference for the task objects\nconst getDefaultProject = (projectId: string) => {\n  return {\n    id: projectId,\n    name: 'Sample Project',\n    description: 'A sample project for task testing',\n    client: 'Sample Client',\n    status: ProjectStatus.IN_PROGRESS,\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-01-01',\n    endDate: '2023-12-31',\n    projectManager: testUsers.admin,\n    department: mockDepartments[0],\n    progress: 50,\n    budget: 100000,\n    actualCost: 50000,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z'\n  };\n};\n\n// Update the mock tasks with the required 'project' property\nconst mockTasks: Task[] = [\n  {\n    id: '1',\n    projectId: defaultProjectId,\n    title: 'Requirements Analysis',\n    description: 'Analyze the requirements for the new system',\n    status: TaskStatus.TODO,\n    priority: TaskPriority.HIGH,\n    startDate: '2023-01-15',\n    dueDate: '2023-01-31',\n    assignee: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n    isMilestone: false,\n    project: getDefaultProject(defaultProjectId)\n  },\n  {\n    id: '2',\n    projectId: defaultProjectId,\n    title: 'Database Schema Design',\n    description: 'Design the database schema for the new system',\n    status: TaskStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    startDate: '2023-02-01',\n    dueDate: '2023-02-15',\n    assignee: testUsers.developer,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-15T00:00:00Z',\n    isMilestone: false,\n    project: getDefaultProject(defaultProjectId)\n  }\n];\n\n/**\n * Generic API request function with error handling\n */\nexport const apiRequest = async (\n  endpoint: string, \n  method: string = 'GET', \n  data?: any, \n  token?: string, \n  isFormData?: boolean\n): Promise<any> => {\n  const USE_MOCK_DATA = true; // Set to true for development without backend\n  \n  try {\n    // Set up the full URL\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    // Set up options\n    const headers: HeadersInit = {}; \n    \n    // Set content type if not form data\n    if (!isFormData) {\n      headers['Content-Type'] = 'application/json';\n    }\n    \n    // Add auth token if provided\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    const options: RequestInit = {\n      method,\n      headers,\n    };\n    \n    // Add body to the request if needed\n    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      options.body = isFormData ? data : JSON.stringify(data);\n    }\n    \n    // Make the request\n    if (!USE_MOCK_DATA) {\n      const response = await fetch(url, options);\n      \n      // Check if the request was successful\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error(errorData?.message || `Request failed with status ${response.status}`);\n      }\n      \n      // Check if the response is empty\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n      \n      return await response.text();\n    } else {\n      // Return mock data (with persistence)\n      console.log(`Using mock data for endpoint: ${endpoint}, method: ${method}`);\n      return getMockData(endpoint, method, data);\n    }\n  } catch (error) {\n    console.error('API request failed:', error);\n    if (USE_MOCK_DATA) {\n      console.log(`Falling back to mock data for endpoint: ${endpoint}`);\n      return getMockData(endpoint, method, data);\n    }\n    throw error;\n  }\n};\n\n/**\n * Returns mock data for development based on the endpoint\n * Uses localStorage for persistence when available\n */\nconst getMockData = (endpoint: string, method: string = 'GET', data?: any): any => {\n  // Create a new resource (POST)\n  if (method === 'POST') {\n    // Handle creating a new project\n    if (endpoint === '/api/projects') {\n      // Generate a random ID for the new project\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new project with the provided data\n      const newProject = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n      };\n      \n      // Save to local storage\n      LocalStorageService.addProject(newProject);\n      \n      return {\n        data: newProject,\n        success: true\n      };\n    }\n    \n    // Handle creating a new task for a project\n    if (endpoint.includes('/api/projects/') && endpoint.includes('/tasks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/tasks')[0];\n      \n      // Generate a random ID for the new task\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new task with the provided data\n      const newTask = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n      };\n      \n      // Save to local storage\n      LocalStorageService.addTask(newTask);\n      \n      return {\n        data: newTask,\n        success: true\n      };\n    }\n    \n    // Handle creating a new independent task\n    if (endpoint === '/api/tasks/independent') {\n      // Generate a random ID for the new task\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new task with the provided data\n      const newTask = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n      };\n      \n      // Save to local storage\n      LocalStorageService.addIndependentTask(newTask);\n      \n      return {\n        data: newTask,\n        success: true\n      };\n    }\n    \n    // Handle creating a new meeting\n    if (endpoint === '/api/meetings') {\n      // Generate a random ID for the new meeting\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new meeting with the provided data\n      const newMeeting: Meeting = {\n        id: newId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt,\n        meetingLink: data.meetingLink || `https://meet.example.com/${newId}`,\n        status: data.status || MeetingStatus.SCHEDULED,\n        isActive: data.isActive || false,\n        organizer: data.organizer || testUsers.admin,\n        participants: data.participants || []\n      };\n      \n      // Save to local storage\n      LocalStorageService.addMeeting(newMeeting);\n      \n      return {\n        data: newMeeting,\n        success: true\n      };\n    }\n\n    // Handle creating a new risk\n    if (endpoint.includes('/projects/') && endpoint.includes('/risks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/risks')[0];\n      \n      // Generate a random ID for the new risk\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new risk with the provided data\n      const newRisk = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n      \n      // Save to local storage\n      LocalStorageService.addRisk(newRisk);\n      \n      return {\n        data: newRisk,\n        success: true\n      };\n    }\n    \n    // Handle creating a new issue\n    if (endpoint.includes('/projects/') && endpoint.includes('/issues')) {\n      const projectId = endpoint.split('/projects/')[1].split('/issues')[0];\n      \n      // Generate a random ID for the new issue\n      const newId = uuidv4();\n      const createdAt = new Date().toISOString();\n      \n      // Create the new issue with the provided data\n      const newIssue = {\n        id: newId,\n        projectId,\n        ...data,\n        createdAt,\n        updatedAt: createdAt\n      };\n      \n      // Save to local storage\n      LocalStorageService.addIssue(newIssue);\n      \n      return {\n        data: newIssue,\n        success: true\n      };\n    }\n\n    // Handle creating a new department\n    if (endpoint === '/api/departments') {\n      const newDepartment: Department = {\n        id: uuidv4(),\n        name: data.name,\n        description: data.description || `${data.name} Department`,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      // Save to local storage\n      LocalStorageService.addDepartment(newDepartment);\n      \n      return {\n        data: newDepartment,\n        success: true\n      };\n    }\n  }\n  \n  // Update an existing resource (PUT)\n  if (method === 'PUT') {\n    // Handle updating a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n      \n      // Update the project in local storage\n      const updatedProject = LocalStorageService.updateProject(projectId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedProject,\n        success: !!updatedProject\n      };\n    }\n    \n    // Handle updating a task for a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const taskId = parts[parts.length - 1];\n      \n      // Update the task in local storage\n      const updatedTask = LocalStorageService.updateTask(projectId, taskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedTask,\n        success: !!updatedTask\n      };\n    }\n    \n    // Handle updating an independent task\n    if (endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)) {\n      const taskId = endpoint.split('/independent/')[1];\n      \n      // Update the task in local storage\n      const updatedTask = LocalStorageService.updateIndependentTask(taskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedTask,\n        success: !!updatedTask\n      };\n    }\n    \n    // Handle updating a meeting\n    if (endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)) {\n      const meetingId = endpoint.split('/meetings/')[1];\n      \n      // Update the meeting in local storage\n      const updatedMeeting = LocalStorageService.updateMeeting(meetingId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedMeeting,\n        success: !!updatedMeeting\n      };\n    }\n\n    // Handle updating a risk\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const riskId = parts[parts.length - 1];\n      \n      // Update the risk in local storage\n      const updatedRisk = LocalStorageService.updateRisk(projectId, riskId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedRisk,\n        success: !!updatedRisk\n      };\n    }\n    \n    // Handle updating an issue\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const issueId = parts[parts.length - 1];\n      \n      // Update the issue in local storage\n      const updatedIssue = LocalStorageService.updateIssue(projectId, issueId, {\n        ...data,\n        updatedAt: new Date().toISOString()\n      });\n      \n      return {\n        data: updatedIssue,\n        success: !!updatedIssue\n      };\n    }\n  }\n  \n  // Delete a resource (DELETE)\n  if (method === 'DELETE') {\n    // Handle deleting a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n      \n      // Delete the project from local storage\n      LocalStorageService.deleteProject(projectId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting a task from a project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/tasks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const taskId = parts[parts.length - 1];\n      \n      // Delete the task from local storage\n      LocalStorageService.deleteTask(projectId, taskId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting an independent task\n    if (endpoint.match(/\\/api\\/tasks\\/independent\\/[\\w-]+$/)) {\n      const taskId = endpoint.split('/independent/')[1];\n      \n      // Delete the task from local storage\n      LocalStorageService.deleteIndependentTask(taskId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting a meeting\n    if (endpoint.match(/\\/api\\/meetings\\/[\\w-]+$/)) {\n      const meetingId = endpoint.split('/meetings/')[1];\n      \n      // Delete the meeting from local storage\n      LocalStorageService.deleteMeeting(meetingId);\n      \n      return {\n        success: true\n      };\n    }\n\n    // Handle deleting a risk\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/risks\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const riskId = parts[parts.length - 1];\n      \n      // Delete the risk from local storage\n      LocalStorageService.deleteRisk(projectId, riskId);\n      \n      return {\n        success: true\n      };\n    }\n    \n    // Handle deleting an issue\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+\\/issues\\/[\\w-]+$/)) {\n      const parts = endpoint.split('/');\n      const projectId = parts[parts.length - 3];\n      const issueId = parts[parts.length - 1];\n      \n      // Delete the issue from local storage\n      LocalStorageService.deleteIssue(projectId, issueId);\n      \n      return {\n        success: true\n      };\n    }\n  }\n  \n  // GET requests for fetching data\n  if (method === 'GET') {\n    // Get all projects\n    if (endpoint === '/api/projects') {\n      // Get projects from local storage or use mock data if none\n      const storedProjects = LocalStorageService.getProjects();\n      \n      if (storedProjects.length > 0) {\n        return {\n          data: storedProjects,\n          success: true\n        };\n      }\n      \n      // Initialize localStorage with mockProjects from mockData.ts\n      LocalStorageService.saveProjects(mockProjects);\n      \n      return {\n        data: mockProjects,\n        success: true\n      };\n    }\n    \n    // Get a specific project\n    if (endpoint.match(/\\/api\\/projects\\/[\\w-]+$/)) {\n      const projectId = endpoint.split('/projects/')[1];\n      \n      // Get project from local storage\n      const project = LocalStorageService.getProject(projectId);\n      \n      if (project) {\n        return {\n          data: project,\n          success: true\n        };\n      }\n      \n      return {\n        success: false,\n        message: 'Project not found'\n      };\n    }\n    \n    // Get tasks for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/tasks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/tasks')[0];\n      \n      // Get tasks from local storage or use mock data if none\n      const storedTasks = LocalStorageService.getTasks(projectId);\n      \n      if (storedTasks.length > 0) {\n        return {\n          data: storedTasks,\n          success: true\n        };\n      }\n      \n      // Create default tasks for this project\n      const tasks = mockTasks;\n      \n      // Save default tasks to local storage\n      LocalStorageService.saveTasks(projectId, tasks);\n      \n      return {\n        data: tasks,\n        success: true\n      };\n    }\n    \n    // Get independent tasks\n    if (endpoint === '/api/tasks/independent') {\n      // Get tasks from local storage or use mock data if none\n      const storedTasks = LocalStorageService.getIndependentTasks();\n      \n      if (storedTasks.length > 0) {\n        return {\n          data: storedTasks,\n          success: true\n        };\n      }\n      \n      // Default empty response\n      return {\n        data: [],\n        success: true\n      };\n    }\n    \n    // Get all meetings\n    if (endpoint === '/api/meetings') {\n      // Get meetings from local storage or use mock data if none\n      const storedMeetings = LocalStorageService.getMeetings();\n      \n      if (storedMeetings.length > 0) {\n        return {\n          data: storedMeetings,\n          success: true\n        };\n      }\n      \n      // Add isActive field for LocalStorageService compatibility\n      const meetingsWithIsActive = defaultMeetings.map(meeting => ({\n        ...meeting,\n        isActive: meeting.status === MeetingStatus.IN_PROGRESS\n      }));\n      \n      // Save default meetings to local storage\n      LocalStorageService.saveMeetings(meetingsWithIsActive);\n      \n      return {\n        data: meetingsWithIsActive,\n        success: true\n      };\n    }\n    \n    // Get risks for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/risks')) {\n      const projectId = endpoint.split('/projects/')[1].split('/risks')[0];\n      \n      // Get risks from local storage or use mock data if none\n      const storedRisks = LocalStorageService.getRisks(projectId);\n      \n      if (storedRisks.length > 0) {\n        return {\n          data: storedRisks,\n          success: true\n        };\n      }\n      \n      // Default mock risks\n      const defaultRisks = createDefaultRisks(projectId);\n      \n      // Save default risks to local storage\n      LocalStorageService.saveRisks(projectId, defaultRisks);\n      \n      return {\n        data: defaultRisks,\n        success: true\n      };\n    }\n    \n    // Get issues for a project\n    if (endpoint.includes('/projects/') && endpoint.includes('/issues')) {\n      const projectId = endpoint.split('/projects/')[1].split('/issues')[0];\n      \n      // Get issues from local storage or use mock data if none\n      const storedIssues = LocalStorageService.getIssues(projectId);\n      \n      if (storedIssues.length > 0) {\n        return {\n          data: storedIssues,\n          success: true\n        };\n      }\n      \n      // Default mock issues\n      const defaultIssues = createDefaultIssues(projectId);\n      \n      // Save default issues to local storage\n      LocalStorageService.saveIssues(projectId, defaultIssues);\n      \n      return {\n        data: defaultIssues,\n        success: true\n      };\n    }\n    \n    // Get departments\n    if (endpoint === '/api/departments') {\n      const departments = LocalStorageService.getDepartments();\n      \n      if (departments.length > 0) {\n        return {\n          data: departments,\n          success: true\n        };\n      }\n      \n      return {\n        data: [],\n        success: true\n      };\n    }\n  }\n  \n  // Default empty response for unhandled endpoints\n  return {\n    data: [],\n    success: true\n  };\n};\n\n// Default mock meetings\nconst defaultMeetings: Meeting[] = [\n  {\n    id: '1',\n    title: 'Sprint Planning',\n    description: 'Plan tasks for the next sprint',\n    startTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),\n    endTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(),\n    status: MeetingStatus.SCHEDULED,\n    isActive: false,\n    meetingLink: 'https://meet.example.com/sprint-planning',\n    organizer: testUsers.admin,\n    participants: [testUsers.manager1, testUsers.developer],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  },\n  {\n    id: '2',\n    title: 'Project Status Review',\n    description: 'Review the current status of the Digital Transformation project',\n    startTime: new Date(Date.now() + 30 * 60 * 1000).toISOString(),\n    endTime: new Date(Date.now() + 90 * 60 * 1000).toISOString(),\n    status: MeetingStatus.SCHEDULED,\n    isActive: false,\n    meetingLink: 'https://meet.example.com/project-status',\n    organizer: testUsers.admin,\n    participants: [testUsers.manager1, testUsers.manager2],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n];\n\n// Default mock risks\nconst createDefaultRisks = (projectId: string) => [\n  {\n    id: '1',\n    projectId,\n    title: 'Data Migration Risk',\n    description: 'Risk of data loss during migration process',\n    status: RiskStatus.IDENTIFIED,\n    impact: RiskImpact.HIGH,\n    probability: 70,\n    mitigation: 'Create multiple backups before migration and perform test migrations on sample data',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-10T00:00:00Z',\n    updatedAt: '2023-01-10T00:00:00Z'\n  },\n  {\n    id: '2',\n    projectId,\n    title: 'Resource Availability Risk',\n    description: 'Risk of key team members being unavailable during critical project phases',\n    status: RiskStatus.ASSESSED,\n    impact: RiskImpact.MEDIUM,\n    probability: 50,\n    mitigation: 'Develop contingency plans and cross-train team members',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-15T00:00:00Z'\n  }\n];\n\n// Default mock issues\nconst createDefaultIssues = (projectId: string) => [\n  {\n    id: '1',\n    projectId,\n    title: 'Integration Failure with Legacy System',\n    description: 'The new system cannot properly integrate with the existing legacy system',\n    status: IssueStatus.OPEN,\n    impact: RiskImpact.HIGH,\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-02-10T00:00:00Z',\n    updatedAt: '2023-02-10T00:00:00Z'\n  },\n  {\n    id: '2',\n    projectId,\n    title: 'Performance Bottleneck in Module A',\n    description: 'Module A performance is not meeting expected throughput requirements',\n    status: IssueStatus.IN_PROGRESS,\n    impact: RiskImpact.MEDIUM,\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-02-15T00:00:00Z',\n    updatedAt: '2023-02-20T00:00:00Z'\n  },\n  {\n    id: '3',\n    projectId,\n    title: 'Security Vulnerability in Authentication',\n    description: 'Security audit identified a potential vulnerability in the authentication process',\n    status: IssueStatus.RESOLVED,\n    impact: RiskImpact.CRITICAL,\n    resolutionSummary: 'Implemented updated security protocols and fixed the vulnerability with patch 1.2.3',\n    owner: testUsers.admin,\n    createdBy: testUsers.admin,\n    createdAt: '2023-01-25T00:00:00Z',\n    updatedAt: '2023-02-05T00:00:00Z'\n  }\n];\n\n// Update the defaultProjects array with the required properties\nconst defaultProjects: Project[] = [\n  {\n    id: 'proj-1',\n    name: 'Digital Transformation',\n    description: 'Enterprise digital transformation project',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-01-15',\n    endDate: '2023-12-31',\n    status: ProjectStatus.IN_PROGRESS,\n    progress: 65,\n    budget: 500000,\n    actualCost: 325000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  },\n  {\n    id: 'proj-2',\n    name: 'Cloud Migration',\n    description: 'Migration of on-premises infrastructure to cloud',\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-02-01',\n    endDate: '2023-08-31',\n    status: ProjectStatus.ON_HOLD,\n    progress: 40,\n    budget: 300000,\n    actualCost: 120000,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-15T00:00:00Z',\n    templateType: ProjectTemplateType.INFRASTRUCTURE\n  },\n  {\n    id: 'proj-3',\n    name: 'E-commerce Platform Redesign',\n    description: 'Redesign and modernization of e-commerce platform',\n    priority: ProjectPriority.CRITICAL,\n    startDate: '2023-03-01',\n    endDate: '2023-07-15',\n    status: ProjectStatus.COMPLETED,\n    progress: 100,\n    budget: 450000,\n    actualCost: 435000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-02-15T00:00:00Z',\n    updatedAt: '2023-07-18T00:00:00Z',\n    templateType: ProjectTemplateType.WEBSITE\n  },\n  {\n    id: 'proj-4',\n    name: 'Mobile App Development',\n    description: 'Cross-platform mobile application for customer engagement',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-04-01',\n    endDate: '2023-10-31',\n    status: ProjectStatus.IN_PROGRESS,\n    progress: 55,\n    budget: 380000,\n    actualCost: 210000,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2023-03-15T00:00:00Z',\n    updatedAt: '2023-07-20T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  },\n  {\n    id: 'proj-5',\n    name: 'Security Infrastructure Enhancement',\n    description: 'Upgrade of security systems and implementation of advanced protection measures',\n    priority: ProjectPriority.CRITICAL,\n    startDate: '2023-01-15',\n    endDate: '2023-05-30',\n    status: ProjectStatus.COMPLETED,\n    progress: 100,\n    budget: 275000,\n    actualCost: 268000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-01-05T00:00:00Z',\n    updatedAt: '2023-06-02T00:00:00Z',\n    templateType: ProjectTemplateType.INFRASTRUCTURE\n  },\n  {\n    id: 'proj-6',\n    name: 'Data Center Relocation',\n    description: 'Physical relocation of data center to new facility',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-02-15',\n    endDate: '2023-09-15',\n    status: ProjectStatus.ON_HOLD,\n    progress: 35,\n    budget: 600000,\n    actualCost: 210000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-02-01T00:00:00Z',\n    updatedAt: '2023-06-30T00:00:00Z',\n    templateType: ProjectTemplateType.INFRASTRUCTURE\n  },\n  {\n    id: 'proj-7',\n    name: 'AI Chatbot Implementation',\n    description: 'Development and integration of AI-powered customer service chatbot',\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-04-15',\n    endDate: '2023-08-15',\n    status: ProjectStatus.IN_PROGRESS,\n    progress: 70,\n    budget: 225000,\n    actualCost: 157500,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2023-04-01T00:00:00Z',\n    updatedAt: '2023-07-15T00:00:00Z',\n    templateType: ProjectTemplateType.WEBSITE\n  },\n  {\n    id: 'proj-8',\n    name: 'CRM Integration',\n    description: 'Integration of new CRM system with existing applications',\n    priority: ProjectPriority.HIGH,\n    startDate: '2023-01-10',\n    endDate: '2023-04-10',\n    status: ProjectStatus.COMPLETED,\n    progress: 100,\n    budget: 180000,\n    actualCost: 172000,\n    department: mockDepartments[1],\n    projectManager: testUsers.manager2,\n    createdAt: '2022-12-20T00:00:00Z',\n    updatedAt: '2023-04-12T00:00:00Z',\n    templateType: ProjectTemplateType.DEFAULT\n  },\n  {\n    id: 'proj-9',\n    name: 'Financial Reporting System',\n    description: 'Implementation of new financial reporting system',\n    priority: ProjectPriority.MEDIUM,\n    startDate: '2023-05-01',\n    endDate: '2023-11-30',\n    status: ProjectStatus.PLANNING,\n    progress: 15,\n    budget: 320000,\n    actualCost: 48000,\n    department: mockDepartments[0],\n    projectManager: testUsers.manager1,\n    createdAt: '2023-04-15T00:00:00Z',\n    updatedAt: '2023-06-10T00:00:00Z',\n    templateType: ProjectTemplateType.FINANCE\n  }\n];\n\n// Helper function to simulate login\nexport const login = async (email: string, password: string) => {\n  // For testing purposes, we'll match the email and return the corresponding test user\n  const user = Object.values(testUsers).find(u => u.email === email);\n  \n  if (user) {\n    return {\n      success: true,\n      data: user,\n      message: 'Login successful'\n    };\n  }\n  \n  return {\n    success: false,\n    data: null,\n    message: 'Invalid credentials'\n  };\n};\n\nconst defaultUsers: User[] = [\n  {\n    id: '1',\n    username: 'john.doe',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@themis.com',\n    role: UserRole.PROJECT_MANAGER,\n    department: mockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    username: 'jane.smith',\n    firstName: 'Jane',\n    lastName: 'Smith',\n    email: 'jane.smith@themis.com',\n    role: UserRole.DEVELOPER,\n    department: mockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    username: 'mike.johnson',\n    firstName: 'Mike',\n    lastName: 'Johnson',\n    email: 'mike.johnson@themis.com',\n    role: UserRole.DESIGNER,\n    department: mockDepartments[1],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '4',\n    username: 'sarah.wilson',\n    firstName: 'Sarah',\n    lastName: 'Wilson',\n    email: 'sarah.wilson@themis.com',\n    role: UserRole.DEVELOPER,\n    department: mockDepartments[0],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '5',\n    username: 'david.brown',\n    firstName: 'David',\n    lastName: 'Brown',\n    email: 'david.brown@themis.com',\n    role: UserRole.PROJECT_MANAGER,\n    department: mockDepartments[2],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\nconst mockAssignments: Assignment[] = [\n  {\n    id: '1',\n    title: 'Implement User Authentication',\n    description: 'Set up JWT authentication and user session management for the application. Include password reset functionality and email verification.',\n    status: AssignmentStatus.IN_PROGRESS,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[1],\n    dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    title: 'Design Landing Page Mockups',\n    description: 'Create high-fidelity mockups for the new landing page. Include mobile and desktop versions, with dark mode support.',\n    status: AssignmentStatus.PENDING,\n    priority: TaskPriority.MEDIUM,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[2],\n    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    title: 'API Performance Optimization',\n    description: 'Optimize database queries and implement caching for frequently accessed endpoints. Target 50% reduction in response times.',\n    status: AssignmentStatus.COMPLETED,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[3],\n    dueDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '4',\n    title: 'Write End-to-End Tests',\n    description: 'Implement comprehensive E2E tests using Cypress for critical user flows. Achieve minimum 80% coverage.',\n    status: AssignmentStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    assignedBy: defaultUsers[4],\n    assignedTo: defaultUsers[1],\n    dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '5',\n    title: 'Security Audit',\n    description: 'Conduct a comprehensive security audit of the application. Check for vulnerabilities, update dependencies, and implement security best practices.',\n    status: AssignmentStatus.PENDING,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[3],\n    dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '6',\n    title: 'Mobile Responsive Design',\n    description: 'Ensure all components are fully responsive on mobile devices. Fix any existing layout issues and implement mobile-specific optimizations.',\n    status: AssignmentStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    assignedBy: defaultUsers[4],\n    assignedTo: defaultUsers[2],\n    dueDate: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '7',\n    title: 'Documentation Update',\n    description: 'Update API documentation and add usage examples for all endpoints. Include authentication requirements and response formats.',\n    status: AssignmentStatus.COMPLETED,\n    priority: TaskPriority.LOW,\n    assignedBy: defaultUsers[0],\n    assignedTo: defaultUsers[1],\n    dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: '8',\n    title: 'User Analytics Dashboard',\n    description: 'Create a new dashboard to display user engagement metrics. Include charts for daily active users, session duration, and feature usage.',\n    status: AssignmentStatus.PENDING,\n    priority: TaskPriority.HIGH,\n    assignedBy: defaultUsers[4],\n    assignedTo: defaultUsers[3],\n    dueDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000).toISOString(),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\nconst assignments = {\n  getAllAssignments: async (token: string): Promise<ApiResponse<Assignment[]>> => {\n    await delay();\n    return {\n      success: true,\n      data: mockAssignments,\n    };\n  },\n  \n  getAssignmentById: async (id: string, token: string): Promise<ApiResponse<Assignment>> => {\n    await delay();\n    const assignment = mockAssignments.find(a => a.id === id);\n    return {\n      success: !!assignment,\n      data: assignment || mockAssignments[0],\n    };\n  },\n\n  createAssignment: async (data: Partial<Assignment>, token: string): Promise<ApiResponse<Assignment>> => {\n    await delay();\n    const newAssignment: Assignment = {\n      id: String(mockAssignments.length + 1),\n      ...data,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    } as Assignment;\n    mockAssignments.push(newAssignment);\n    return {\n      success: true,\n      data: newAssignment,\n    };\n  },\n\n  updateAssignment: async (id: string, data: Partial<Assignment>, token: string): Promise<ApiResponse<Assignment>> => {\n    await delay();\n    const index = mockAssignments.findIndex(a => a.id === id);\n    if (index === -1) {\n      return {\n        success: false,\n        error: 'Assignment not found',\n      };\n    }\n    mockAssignments[index] = {\n      ...mockAssignments[index],\n      ...data,\n      updatedAt: new Date().toISOString(),\n    };\n    return {\n      success: true,\n      data: mockAssignments[index],\n    };\n  },\n\n  deleteAssignment: async (id: string, token: string): Promise<ApiResponse<void>> => {\n    await delay();\n    const index = mockAssignments.findIndex(a => a.id === id);\n    if (index === -1) {\n      return {\n        success: false,\n        error: 'Assignment not found',\n      };\n    }\n    mockAssignments.splice(index, 1);\n    return {\n      success: true,\n    };\n  },\n};\n\n// Create a named API object to export instead of using anonymous default export\nconst apiRoutes = {\n  // Auth endpoints\n  auth: {\n    login: (adIdentifier: string) => {\n      // Mock implementation for testing without backend\n      console.log('Using mock login implementation');\n      return Promise.resolve({\n        userId: '1',\n        username: adIdentifier,\n        role: UserRole.ADMIN, // Defaulting to ADMIN for testing\n        departmentId: '1',\n        token: 'mock-token-' + Date.now(),\n        success: true,\n        message: 'Login successful'\n      });\n    },\n    \n    refreshToken: (refreshToken: string) => \n      apiRequest('/api/auth/refresh', 'POST', { refreshToken }),\n    \n    logout: (token: string) => \n      apiRequest('/api/auth/logout', 'POST', {}, token),\n  },\n\n  // User endpoints\n  users: {\n    getCurrentUser: (token: string) => \n      apiRequest('/api/users/me', 'GET', undefined, token),\n    \n    getAllUsers: async (token: string): Promise<ApiResponse<User[]>> => {\n      await delay();\n      return {\n        success: true,\n        data: defaultUsers,\n      };\n    },\n    \n    getUserById: (userId: string, token: string) => \n      apiRequest(`/api/users/${userId}`, 'GET', undefined, token),\n    \n    createUser: (userData: any, token: string) => \n      apiRequest('/api/users', 'POST', userData, token),\n    \n    updateUser: (userId: string, userData: any, token: string) => \n      apiRequest(`/api/users/${userId}`, 'PUT', userData, token),\n    \n    deleteUser: (userId: string, token: string) => \n      apiRequest(`/api/users/${userId}`, 'DELETE', undefined, token),\n    \n    assignRole: (userId: string, role: string, token: string) => \n      apiRequest(`/api/users/${userId}/role`, 'PUT', { role }, token),\n      \n    assignDepartment: (userId: string, departmentId: string, token: string) => \n      apiRequest(`/api/users/${userId}/department`, 'PUT', { departmentId }, token),\n      \n    getAllDepartments: (token: string) => \n      apiRequest('/api/users/departments', 'GET', undefined, token),\n  },\n\n  // Project endpoints\n  projects: {\n    getAllProjects: async (token: string) => {\n      // For demo purposes, simulate fetching from API\n      await simulateDelay();\n      \n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n      \n      return {\n        data: projects\n      };\n    },\n    \n    getProjectById: async (id: string, token: string) => {\n      await simulateDelay();\n      \n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n      \n      // Find the requested project\n      const project = projects.find((p: any) => p.id === id);\n      \n      if (!project) {\n        throw new Error(`Project with ID ${id} not found`);\n      }\n      \n      return {\n        data: project\n      };\n    },\n    \n    createProject: async (projectData: any, token: string): Promise<any> => {\n      await simulateDelay();\n      \n      // Ensure the project has a templateType (default to DEFAULT if not specified)\n      const projectToCreate = {\n        ...projectData,\n        templateType: projectData.templateType || 'DEFAULT'\n      };\n      \n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n      \n      // Add new project to the list\n      const updatedProjects = [...projects, projectToCreate];\n      \n      // Update localStorage\n      localStorage.setItem('themis_projects', JSON.stringify(updatedProjects));\n      \n      return {\n        data: projectToCreate\n      };\n    },\n    \n    updateProject: async (projectId: string, projectData: any, token: string): Promise<any> => {\n      await simulateDelay();\n      \n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n      \n      // Find the project to update\n      const projectIndex = projects.findIndex((p: any) => p.id === projectId);\n      \n      if (projectIndex === -1) {\n        throw new Error(`Project with ID ${projectId} not found`);\n      }\n      \n      // Update the project, ensuring templateType is preserved\n      const updatedProject = {\n        ...projects[projectIndex],\n        ...projectData,\n        templateType: projectData.templateType || projects[projectIndex].templateType || 'DEFAULT'\n      };\n      \n      // Update the projects array\n      const updatedProjectsArray = [...projects];\n      updatedProjectsArray[projectIndex] = updatedProject;\n      \n      // Update localStorage\n      localStorage.setItem('themis_projects', JSON.stringify(updatedProjectsArray));\n      \n      return {\n        data: updatedProject\n      };\n    },\n    \n    deleteProject: async (projectId: string, token: string): Promise<any> => {\n      await simulateDelay();\n      \n      // Get cached projects or use default mock data\n      const cachedProjects = localStorage.getItem('themis_projects');\n      const projects = cachedProjects ? JSON.parse(cachedProjects) : defaultProjects;\n      \n      // Filter out the project to delete\n      const updatedProjects = projects.filter((p: any) => p.id !== projectId);\n      \n      if (projects.length === updatedProjects.length) {\n        throw new Error(`Project with ID ${projectId} not found`);\n      }\n      \n      // Update localStorage\n      localStorage.setItem('themis_projects', JSON.stringify(updatedProjects));\n      \n      return {\n        data: { message: 'Project deleted successfully' }\n      };\n    },\n      \n    uploadAttachment: (projectId: string, formData: FormData, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments`, 'POST', formData, token, true),\n      \n    getAttachments: (projectId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments`, 'GET', undefined, token),\n      \n    deleteAttachment: (projectId: string, attachmentId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/attachments/${attachmentId}`, 'DELETE', undefined, token),\n\n    getProject: async (projectId: string, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/projects/${projectId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: projectId,\n            name: \"Mock Project\",\n            description: \"This is a mock project returned by the API\",\n            startDate: new Date().toISOString(),\n            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n            status: \"IN_PROGRESS\",\n            priority: \"MEDIUM\",\n            budget: 100000,\n            progress: 50,\n            department: {\n              id: \"dept-1\",\n              name: \"IT Department\"\n            },\n            projectManager: {\n              id: \"user-1\",\n              firstName: \"John\",\n              lastName: \"Doe\"\n            },\n            approvalStatus: \"SUBMITTED\",\n            comments: \"This is a sample comment on the project\",\n            reviewHistory: [],\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching project:', error);\n        throw error;\n      }\n    },\n  },\n\n  // Task endpoints\n  tasks: {\n    getAllTasks: (projectId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks`, 'GET', undefined, token),\n    \n    getAllIndependentTasks: (token: string) => \n      apiRequest('/api/tasks/independent', 'GET', undefined, token),\n    \n    getTaskById: (projectId: string, taskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'GET', undefined, token),\n    \n    getIndependentTaskById: (taskId: string, token: string) => \n      apiRequest(`/api/tasks/independent/${taskId}`, 'GET', undefined, token),\n    \n    createTask: (projectId: string, taskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks`, 'POST', taskData, token),\n    \n    createIndependentTask: (taskData: any, token: string) => \n      apiRequest('/api/tasks/independent', 'POST', taskData, token),\n    \n    updateTask: (projectId: string, taskId: string, taskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'PUT', taskData, token),\n    \n    updateIndependentTask: (taskId: string, taskData: any, token: string) => \n      apiRequest(`/api/tasks/independent/${taskId}`, 'PUT', taskData, token),\n    \n    deleteTask: (projectId: string, taskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/tasks/${taskId}`, 'DELETE', undefined, token),\n    \n    deleteIndependentTask: (taskId: string, token: string) => \n      apiRequest(`/api/tasks/independent/${taskId}`, 'DELETE', undefined, token),\n\n    // Add task comment\n    addComment: async (projectId: string, taskId: string, commentData: any, token: string) => {\n      if (FEATURES.OFFLINE_MODE) {\n        // In offline mode, simulate API response\n        await simulateDelay();\n        \n        // Get existing tasks from localStorage\n        const allTasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n        \n        // Find the specific task to add the comment to\n        const taskIndex = allTasks.findIndex((t: any) => t.id === taskId && t.projectId === projectId);\n        \n        if (taskIndex !== -1) {\n          // Create a new comment\n          const newComment = {\n            id: `comment-${Date.now()}`,\n            taskId,\n            text: commentData.text,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            author: {\n              id: commentData.authorId,\n              firstName: commentData.authorFirstName || 'User',\n              lastName: commentData.authorLastName || commentData.authorId,\n            }\n          };\n          \n          // Add comment to the task\n          if (!allTasks[taskIndex].comments) {\n            allTasks[taskIndex].comments = [];\n          }\n          \n          allTasks[taskIndex].comments.push(newComment);\n          \n          // Save back to localStorage\n          localStorage.setItem('tasks', JSON.stringify(allTasks));\n          \n          return {\n            success: true,\n            data: newComment,\n            message: 'Comment added successfully'\n          };\n        } else {\n          throw new Error('Task not found');\n        }\n      } else {\n        // In online mode, make actual API call\n        const response = await axios.post(\n          `${API_BASE_URL}/projects/${projectId}/tasks/${taskId}/comments`,\n          commentData,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          }\n        );\n        return response.data;\n      }\n    },\n  },\n\n  // Risk endpoints\n  risks: {\n    getAllRisks: (projectId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks`, 'GET', undefined, token),\n    \n    getRiskById: (projectId: string, riskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'GET', undefined, token),\n    \n    createRisk: (projectId: string, riskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks`, 'POST', riskData, token),\n    \n    updateRisk: (projectId: string, riskId: string, riskData: any, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'PUT', riskData, token),\n    \n    deleteRisk: (projectId: string, riskId: string, token: string) => \n      apiRequest(`/api/projects/${projectId}/risks/${riskId}`, 'DELETE', undefined, token),\n  },\n\n  // Issue endpoints\n  issues: {\n    getAllIssues: (projectId: string, token: string) => \n      apiRequest(`/projects/${projectId}/issues`, 'GET', null, token),\n    getIssueById: (projectId: string, issueId: string, token: string) => \n      apiRequest(`/projects/${projectId}/issues/${issueId}`, 'GET', null, token),\n    createIssue: (projectId: string, issueData: Partial<Issue>, token: string) => \n      apiRequest(`/projects/${projectId}/issues`, 'POST', issueData, token),\n    updateIssue: (projectId: string, issueId: string, issueData: Partial<Issue>, token: string) => \n      apiRequest(`/projects/${projectId}/issues/${issueId}`, 'PUT', issueData, token),\n    deleteIssue: (projectId: string, issueId: string, token: string) => \n      apiRequest(`/projects/${projectId}/issues/${issueId}`, 'DELETE', null, token)\n  },\n\n  // Task Request endpoints\n  taskRequests: {\n    createTaskRequest: (requestData: any, token: string) =>\n      apiRequest('/api/task-requests', 'POST', requestData, token),\n      \n    getTaskRequestsByProject: (projectId: string, token: string) =>\n      apiRequest(`/api/task-requests?projectId=${projectId}`, 'GET', undefined, token),\n      \n    getTaskRequestById: (requestId: string, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}`, 'GET', undefined, token),\n      \n    updateTaskRequestStatus: (requestId: string, status: any, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}/status`, 'PATCH', { status, reviewNotes }, token),\n      \n    approveTaskRequest: (requestId: string, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}/approve`, 'POST', { reviewNotes }, token),\n      \n    rejectTaskRequest: (requestId: string, reviewNotes: string, token: string) =>\n      apiRequest(`/api/task-requests/${requestId}/reject`, 'POST', { reviewNotes }, token)\n  },\n\n  // Assignment endpoints\n  assignments,\n\n  auditLogs: {\n    getAuditLogs: (token: string) => \n      apiRequest('/audit-logs', 'GET', null, token),\n    getAuditLogById: (logId: string, token: string) => \n      apiRequest(`/audit-logs/${logId}`, 'GET', null, token)\n  },\n\n  // Department endpoints\n  departments: {\n    getAllDepartments: async (token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/departments`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: [\n            {\n              id: \"dept-1\",\n              name: \"IT Department\",\n              description: \"Information Technology Department\",\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            },\n            {\n              id: \"dept-2\",\n              name: \"HR Department\",\n              description: \"Human Resources Department\",\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            },\n            {\n              id: \"dept-3\",\n              name: \"Finance Department\",\n              description: \"Finance and Accounting Department\",\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            }\n          ]\n        };\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n        throw error;\n      }\n    },\n    \n    getDepartmentById: async (departmentId: string, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.get(`${API_BASE_URL}/departments/${departmentId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: departmentId,\n            name: \"Mock Department\",\n            description: \"This is a mock department\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error fetching department:', error);\n        throw error;\n      }\n    },\n    \n    createDepartment: async (departmentData: any, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.post(`${API_BASE_URL}/departments`, departmentData, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: Date.now().toString(),\n            ...departmentData,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error creating department:', error);\n        throw error;\n      }\n    },\n    \n    updateDepartment: async (departmentId: string, departmentData: any, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.put(`${API_BASE_URL}/departments/${departmentId}`, departmentData, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock data\n        return {\n          data: {\n            id: departmentId,\n            ...departmentData,\n            updatedAt: new Date().toISOString()\n          }\n        };\n      } catch (error) {\n        console.error('Error updating department:', error);\n        throw error;\n      }\n    },\n    \n    deleteDepartment: async (departmentId: string, token: string) => {\n      try {\n        // In a real implementation, this would call the API\n        // const response = await axios.delete(`${API_BASE_URL}/departments/${departmentId}`, {\n        //   headers: { Authorization: `Bearer ${token}` }\n        // });\n        // return response;\n        \n        // For now, return mock success\n        return {\n          data: {\n            success: true,\n            message: \"Department deleted successfully\"\n          }\n        };\n      } catch (error) {\n        console.error('Error deleting department:', error);\n        throw error;\n      }\n    }\n  },\n  \n  // Change Request endpoints\n  changeRequests: {\n    getChangeRequestsByProject: (projectId: string, token: string) =>\n      apiRequest(`/api/projects/${projectId}/change-requests`, 'GET', undefined, token),\n      \n    getChangeRequestById: (requestId: string, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}`, 'GET', undefined, token),\n      \n    createChangeRequest: (requestData: any, token: string) =>\n      apiRequest('/api/change-requests', 'POST', requestData, token),\n      \n    updateChangeRequestStatus: (requestId: string, status: any, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}/status`, 'PATCH', { status, reviewNotes }, token),\n      \n    approveChangeRequest: (requestId: string, reviewNotes: string | undefined, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}/approve`, 'POST', { reviewNotes }, token),\n      \n    rejectChangeRequest: (requestId: string, reviewNotes: string, token: string) =>\n      apiRequest(`/api/change-requests/${requestId}/reject`, 'POST', { reviewNotes }, token),\n      \n    getAllChangeRequests: (token: string) =>\n      apiRequest('/api/change-requests', 'GET', undefined, token)\n  },\n};\n\nexport default apiRoutes;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,QAAQ,QAAQ,WAAW;AAClD,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,EAAqEC,gBAAgB,EAAeC,aAAa,EAAEC,eAAe,EAAEC,mBAAmB,QAAQ,UAAU;AACxQ,SACEC,YAAY,QAKP,YAAY;AAEnB,MAAMC,GAAG,GAAGlB,KAAK,CAACmB,MAAM,CAAC;EACvBC,OAAO,EAAEnB,YAAY;EACrBoB,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,MAAMK,KAAK,GAAGA,CAAA,KAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;AAEpE;AACA,MAAME,aAAa,GAAGA,CAACC,EAAE,GAAG,GAAG,KAAK,IAAIJ,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEG,EAAE,CAAC,CAAC;;AAEnF;AACA,MAAMC,gBAA4B,GAAG;EACnCC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,IAAI;EACVC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC;;AAED;AACA,MAAME,eAA6B,GAAG,CACpC;EACEP,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,aAAa;EACnBC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,SAAS;EACfC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,CACF;;AAED;AACA,MAAMG,SAAS,GAAG;EAChBC,KAAK,EAAE;IACLT,EAAE,EAAE,QAAQ;IACZU,QAAQ,EAAE,YAAY;IACtBC,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,OAAO;IACjBC,KAAK,EAAE,uBAAuB;IAC9BC,IAAI,EAAE3C,QAAQ,CAAC4C,KAAK;IACpBC,UAAU,EAAEjB,gBAAgB;IAC5BkB,QAAQ,EAAE,IAAI;IACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EACDa,QAAQ,EAAE;IACRlB,EAAE,EAAE,QAAQ;IACZU,QAAQ,EAAE,eAAe;IACzBC,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE,SAAS;IACnBC,KAAK,EAAE,0BAA0B;IACjCC,IAAI,EAAE3C,QAAQ,CAACgD,OAAO;IACtBH,UAAU,EAAEjB,gBAAgB;IAC5BkB,QAAQ,EAAE,IAAI;IACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EACDe,QAAQ,EAAE;IACRpB,EAAE,EAAE,QAAQ;IACZU,QAAQ,EAAE,cAAc;IACxBC,SAAS,EAAE,SAAS;IACpBC,QAAQ,EAAE,MAAM;IAChBC,KAAK,EAAE,yBAAyB;IAChCC,IAAI,EAAE3C,QAAQ,CAACgD,OAAO;IACtBH,UAAU,EAAEjB,gBAAgB;IAC5BkB,QAAQ,EAAE,IAAI;IACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EACDgB,SAAS,EAAE;IACTrB,EAAE,EAAE,QAAQ;IACZU,QAAQ,EAAE,YAAY;IACtBC,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,OAAO;IACjBC,KAAK,EAAE,uBAAuB;IAC9BC,IAAI,EAAE3C,QAAQ,CAACmD,SAAS;IACxBN,UAAU,EAAEjB,gBAAgB;IAC5BkB,QAAQ,EAAE,IAAI;IACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EACDkB,QAAQ,EAAE;IACRvB,EAAE,EAAE,QAAQ;IACZU,QAAQ,EAAE,cAAc;IACxBC,SAAS,EAAE,OAAO;IAClBC,QAAQ,EAAE,QAAQ;IAClBC,KAAK,EAAE,yBAAyB;IAChCC,IAAI,EAAE3C,QAAQ,CAACqD,QAAQ;IACvBR,UAAU,EAAEjB,gBAAgB;IAC5BkB,QAAQ,EAAE,IAAI;IACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC;AACF,CAAC;;AAED;AACA,MAAMoB,gBAAgB,GAAG,oBAAoB;;AAE7C;AACA,MAAMC,iBAAiB,GAAIC,SAAiB,IAAK;EAC/C,OAAO;IACL3B,EAAE,EAAE2B,SAAS;IACb1B,IAAI,EAAE,gBAAgB;IACtBC,WAAW,EAAE,mCAAmC;IAChD0B,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE5D,aAAa,CAAC6D,WAAW;IACjCC,QAAQ,EAAErD,eAAe,CAACsD,MAAM;IAChCC,SAAS,EAAE,YAAY;IACvBC,OAAO,EAAE,YAAY;IACrBC,cAAc,EAAE3B,SAAS,CAACC,KAAK;IAC/BO,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;IAC9B6B,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,KAAK;IACjBnC,SAAS,EAAE,sBAAsB;IACjCG,SAAS,EAAE;EACb,CAAC;AACH,CAAC;;AAED;AACA,MAAMiC,SAAiB,GAAG,CACxB;EACEvC,EAAE,EAAE,GAAG;EACP2B,SAAS,EAAEF,gBAAgB;EAC3Be,KAAK,EAAE,uBAAuB;EAC9BtC,WAAW,EAAE,6CAA6C;EAC1D2B,MAAM,EAAE3D,UAAU,CAACuE,IAAI;EACvBV,QAAQ,EAAE3D,YAAY,CAACsE,IAAI;EAC3BT,SAAS,EAAE,YAAY;EACvBU,OAAO,EAAE,YAAY;EACrBC,QAAQ,EAAEpC,SAAS,CAACC,KAAK;EACzBoC,SAAS,EAAErC,SAAS,CAACC,KAAK;EAC1BN,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjCwC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAErB,iBAAiB,CAACD,gBAAgB;AAC7C,CAAC,EACD;EACEzB,EAAE,EAAE,GAAG;EACP2B,SAAS,EAAEF,gBAAgB;EAC3Be,KAAK,EAAE,wBAAwB;EAC/BtC,WAAW,EAAE,+CAA+C;EAC5D2B,MAAM,EAAE3D,UAAU,CAAC4D,WAAW;EAC9BC,QAAQ,EAAE3D,YAAY,CAAC4D,MAAM;EAC7BC,SAAS,EAAE,YAAY;EACvBU,OAAO,EAAE,YAAY;EACrBC,QAAQ,EAAEpC,SAAS,CAACa,SAAS;EAC7BwB,SAAS,EAAErC,SAAS,CAACC,KAAK;EAC1BN,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjCwC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAErB,iBAAiB,CAACD,gBAAgB;AAC7C,CAAC,CACF;;AAED;AACA;AACA;AACA,OAAO,MAAMuB,UAAU,GAAG,MAAAA,CACxBC,QAAgB,EAChBC,MAAc,GAAG,KAAK,EACtBC,IAAU,EACV9D,KAAc,EACd+D,UAAoB,KACH;EACjB,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAC;;EAE5B,IAAI;IACF;IACA,MAAMC,GAAG,GAAG,GAAG1F,YAAY,GAAGqF,QAAQ,EAAE;;IAExC;IACA,MAAMjE,OAAoB,GAAG,CAAC,CAAC;;IAE/B;IACA,IAAI,CAACoE,UAAU,EAAE;MACfpE,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IAC9C;;IAEA;IACA,IAAIK,KAAK,EAAE;MACTL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;IAC9C;IAEA,MAAMkE,OAAoB,GAAG;MAC3BL,MAAM;MACNlE;IACF,CAAC;;IAED;IACA,IAAImE,IAAI,KAAKD,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAK,OAAO,CAAC,EAAE;MACzEK,OAAO,CAACC,IAAI,GAAGJ,UAAU,GAAGD,IAAI,GAAGM,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;IACzD;;IAEA;IACA,IAAI,CAACE,aAAa,EAAE;MAClB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC;QACzD,MAAM,IAAIC,KAAK,CAAC,CAAAH,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEI,OAAO,KAAI,8BAA8BP,QAAQ,CAAC9B,MAAM,EAAE,CAAC;MACxF;;MAEA;MACA,MAAMsC,WAAW,GAAGR,QAAQ,CAAC3E,OAAO,CAACoF,GAAG,CAAC,cAAc,CAAC;MACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC3D,OAAO,MAAMV,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC9B;MAEA,OAAO,MAAMJ,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL;MACAC,OAAO,CAACC,GAAG,CAAC,iCAAiCvB,QAAQ,aAAaC,MAAM,EAAE,CAAC;MAC3E,OAAOuB,WAAW,CAACxB,QAAQ,EAAEC,MAAM,EAAEC,IAAI,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOuB,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,IAAIrB,aAAa,EAAE;MACjBkB,OAAO,CAACC,GAAG,CAAC,2CAA2CvB,QAAQ,EAAE,CAAC;MAClE,OAAOwB,WAAW,CAACxB,QAAQ,EAAEC,MAAM,EAAEC,IAAI,CAAC;IAC5C;IACA,MAAMuB,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMD,WAAW,GAAGA,CAACxB,QAAgB,EAAEC,MAAc,GAAG,KAAK,EAAEC,IAAU,KAAU;EACjF;EACA,IAAID,MAAM,KAAK,MAAM,EAAE;IACrB;IACA,IAAID,QAAQ,KAAK,eAAe,EAAE;MAChC;MACA,MAAM0B,KAAK,GAAG3G,MAAM,CAAC,CAAC;MACtB,MAAMmC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE1C;MACA,MAAMuE,UAAU,GAAG;QACjB5E,EAAE,EAAE2E,KAAK;QACT,GAAGxB,IAAI;QACPhD,SAAS;QACTG,SAAS,EAAEH;MACb,CAAC;;MAED;MACArC,mBAAmB,CAAC+G,UAAU,CAACD,UAAU,CAAC;MAE1C,OAAO;QACLzB,IAAI,EAAEyB,UAAU;QAChBE,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAACoB,QAAQ,CAAC,gBAAgB,CAAC,IAAIpB,QAAQ,CAACoB,QAAQ,CAAC,QAAQ,CAAC,EAAE;MACtE,MAAM1C,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEpE;MACA,MAAMJ,KAAK,GAAG3G,MAAM,CAAC,CAAC;MACtB,MAAMmC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE1C;MACA,MAAM2E,OAAO,GAAG;QACdhF,EAAE,EAAE2E,KAAK;QACThD,SAAS;QACT,GAAGwB,IAAI;QACPhD,SAAS;QACTG,SAAS,EAAEH;MACb,CAAC;;MAED;MACArC,mBAAmB,CAACmH,OAAO,CAACD,OAAO,CAAC;MAEpC,OAAO;QACL7B,IAAI,EAAE6B,OAAO;QACbF,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,KAAK,wBAAwB,EAAE;MACzC;MACA,MAAM0B,KAAK,GAAG3G,MAAM,CAAC,CAAC;MACtB,MAAMmC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE1C;MACA,MAAM2E,OAAO,GAAG;QACdhF,EAAE,EAAE2E,KAAK;QACT,GAAGxB,IAAI;QACPhD,SAAS;QACTG,SAAS,EAAEH;MACb,CAAC;;MAED;MACArC,mBAAmB,CAACoH,kBAAkB,CAACF,OAAO,CAAC;MAE/C,OAAO;QACL7B,IAAI,EAAE6B,OAAO;QACbF,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,KAAK,eAAe,EAAE;MAChC;MACA,MAAM0B,KAAK,GAAG3G,MAAM,CAAC,CAAC;MACtB,MAAMmC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE1C;MACA,MAAM8E,UAAmB,GAAG;QAC1BnF,EAAE,EAAE2E,KAAK;QACT,GAAGxB,IAAI;QACPhD,SAAS;QACTG,SAAS,EAAEH,SAAS;QACpBiF,WAAW,EAAEjC,IAAI,CAACiC,WAAW,IAAI,4BAA4BT,KAAK,EAAE;QACpE9C,MAAM,EAAEsB,IAAI,CAACtB,MAAM,IAAIpD,aAAa,CAAC4G,SAAS;QAC9CpE,QAAQ,EAAEkC,IAAI,CAAClC,QAAQ,IAAI,KAAK;QAChCqE,SAAS,EAAEnC,IAAI,CAACmC,SAAS,IAAI9E,SAAS,CAACC,KAAK;QAC5C8E,YAAY,EAAEpC,IAAI,CAACoC,YAAY,IAAI;MACrC,CAAC;;MAED;MACAzH,mBAAmB,CAAC0H,UAAU,CAACL,UAAU,CAAC;MAE1C,OAAO;QACLhC,IAAI,EAAEgC,UAAU;QAChBL,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAACoB,QAAQ,CAAC,YAAY,CAAC,IAAIpB,QAAQ,CAACoB,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAClE,MAAM1C,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEpE;MACA,MAAMJ,KAAK,GAAG3G,MAAM,CAAC,CAAC;MACtB,MAAMmC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE1C;MACA,MAAMoF,OAAO,GAAG;QACdzF,EAAE,EAAE2E,KAAK;QACThD,SAAS;QACT,GAAGwB,IAAI;QACPhD,SAAS;QACTG,SAAS,EAAEH;MACb,CAAC;;MAED;MACArC,mBAAmB,CAAC4H,OAAO,CAACD,OAAO,CAAC;MAEpC,OAAO;QACLtC,IAAI,EAAEsC,OAAO;QACbX,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAACoB,QAAQ,CAAC,YAAY,CAAC,IAAIpB,QAAQ,CAACoB,QAAQ,CAAC,SAAS,CAAC,EAAE;MACnE,MAAM1C,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;MAErE;MACA,MAAMJ,KAAK,GAAG3G,MAAM,CAAC,CAAC;MACtB,MAAMmC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAE1C;MACA,MAAMsF,QAAQ,GAAG;QACf3F,EAAE,EAAE2E,KAAK;QACThD,SAAS;QACT,GAAGwB,IAAI;QACPhD,SAAS;QACTG,SAAS,EAAEH;MACb,CAAC;;MAED;MACArC,mBAAmB,CAAC8H,QAAQ,CAACD,QAAQ,CAAC;MAEtC,OAAO;QACLxC,IAAI,EAAEwC,QAAQ;QACdb,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,KAAK,kBAAkB,EAAE;MACnC,MAAM4C,aAAyB,GAAG;QAChC7F,EAAE,EAAEhC,MAAM,CAAC,CAAC;QACZiC,IAAI,EAAEkD,IAAI,CAAClD,IAAI;QACfC,WAAW,EAAEiD,IAAI,CAACjD,WAAW,IAAI,GAAGiD,IAAI,CAAClD,IAAI,aAAa;QAC1DE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;;MAED;MACAvC,mBAAmB,CAACgI,aAAa,CAACD,aAAa,CAAC;MAEhD,OAAO;QACL1C,IAAI,EAAE0C,aAAa;QACnBf,OAAO,EAAE;MACX,CAAC;IACH;EACF;;EAEA;EACA,IAAI5B,MAAM,KAAK,KAAK,EAAE;IACpB;IACA,IAAID,QAAQ,CAAC8C,KAAK,CAAC,0BAA0B,CAAC,EAAE;MAC9C,MAAMpE,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACA,MAAMiB,cAAc,GAAGlI,mBAAmB,CAACmI,aAAa,CAACtE,SAAS,EAAE;QAClE,GAAGwB,IAAI;QACP7C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;MAEF,OAAO;QACL8C,IAAI,EAAE6C,cAAc;QACpBlB,OAAO,EAAE,CAAC,CAACkB;MACb,CAAC;IACH;;IAEA;IACA,IAAI/C,QAAQ,CAAC8C,KAAK,CAAC,yCAAyC,CAAC,EAAE;MAC7D,MAAMG,KAAK,GAAGjD,QAAQ,CAAC8B,KAAK,CAAC,GAAG,CAAC;MACjC,MAAMpD,SAAS,GAAGuE,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;MACzC,MAAMC,MAAM,GAAGF,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;;MAEtC;MACA,MAAME,WAAW,GAAGvI,mBAAmB,CAACwI,UAAU,CAAC3E,SAAS,EAAEyE,MAAM,EAAE;QACpE,GAAGjD,IAAI;QACP7C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;MAEF,OAAO;QACL8C,IAAI,EAAEkD,WAAW;QACjBvB,OAAO,EAAE,CAAC,CAACuB;MACb,CAAC;IACH;;IAEA;IACA,IAAIpD,QAAQ,CAAC8C,KAAK,CAAC,oCAAoC,CAAC,EAAE;MACxD,MAAMK,MAAM,GAAGnD,QAAQ,CAAC8B,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACA,MAAMsB,WAAW,GAAGvI,mBAAmB,CAACyI,qBAAqB,CAACH,MAAM,EAAE;QACpE,GAAGjD,IAAI;QACP7C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;MAEF,OAAO;QACL8C,IAAI,EAAEkD,WAAW;QACjBvB,OAAO,EAAE,CAAC,CAACuB;MACb,CAAC;IACH;;IAEA;IACA,IAAIpD,QAAQ,CAAC8C,KAAK,CAAC,0BAA0B,CAAC,EAAE;MAC9C,MAAMS,SAAS,GAAGvD,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACA,MAAM0B,cAAc,GAAG3I,mBAAmB,CAAC4I,aAAa,CAACF,SAAS,EAAE;QAClE,GAAGrD,IAAI;QACP7C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;MAEF,OAAO;QACL8C,IAAI,EAAEsD,cAAc;QACpB3B,OAAO,EAAE,CAAC,CAAC2B;MACb,CAAC;IACH;;IAEA;IACA,IAAIxD,QAAQ,CAAC8C,KAAK,CAAC,yCAAyC,CAAC,EAAE;MAC7D,MAAMG,KAAK,GAAGjD,QAAQ,CAAC8B,KAAK,CAAC,GAAG,CAAC;MACjC,MAAMpD,SAAS,GAAGuE,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;MACzC,MAAMQ,MAAM,GAAGT,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;;MAEtC;MACA,MAAMS,WAAW,GAAG9I,mBAAmB,CAAC+I,UAAU,CAAClF,SAAS,EAAEgF,MAAM,EAAE;QACpE,GAAGxD,IAAI;QACP7C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;MAEF,OAAO;QACL8C,IAAI,EAAEyD,WAAW;QACjB9B,OAAO,EAAE,CAAC,CAAC8B;MACb,CAAC;IACH;;IAEA;IACA,IAAI3D,QAAQ,CAAC8C,KAAK,CAAC,0CAA0C,CAAC,EAAE;MAC9D,MAAMG,KAAK,GAAGjD,QAAQ,CAAC8B,KAAK,CAAC,GAAG,CAAC;MACjC,MAAMpD,SAAS,GAAGuE,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;MACzC,MAAMW,OAAO,GAAGZ,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;;MAEvC;MACA,MAAMY,YAAY,GAAGjJ,mBAAmB,CAACkJ,WAAW,CAACrF,SAAS,EAAEmF,OAAO,EAAE;QACvE,GAAG3D,IAAI;QACP7C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;MAEF,OAAO;QACL8C,IAAI,EAAE4D,YAAY;QAClBjC,OAAO,EAAE,CAAC,CAACiC;MACb,CAAC;IACH;EACF;;EAEA;EACA,IAAI7D,MAAM,KAAK,QAAQ,EAAE;IACvB;IACA,IAAID,QAAQ,CAAC8C,KAAK,CAAC,0BAA0B,CAAC,EAAE;MAC9C,MAAMpE,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACAjH,mBAAmB,CAACmJ,aAAa,CAACtF,SAAS,CAAC;MAE5C,OAAO;QACLmD,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAAC8C,KAAK,CAAC,yCAAyC,CAAC,EAAE;MAC7D,MAAMG,KAAK,GAAGjD,QAAQ,CAAC8B,KAAK,CAAC,GAAG,CAAC;MACjC,MAAMpD,SAAS,GAAGuE,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;MACzC,MAAMC,MAAM,GAAGF,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;;MAEtC;MACArI,mBAAmB,CAACoJ,UAAU,CAACvF,SAAS,EAAEyE,MAAM,CAAC;MAEjD,OAAO;QACLtB,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAAC8C,KAAK,CAAC,oCAAoC,CAAC,EAAE;MACxD,MAAMK,MAAM,GAAGnD,QAAQ,CAAC8B,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACAjH,mBAAmB,CAACqJ,qBAAqB,CAACf,MAAM,CAAC;MAEjD,OAAO;QACLtB,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAAC8C,KAAK,CAAC,0BAA0B,CAAC,EAAE;MAC9C,MAAMS,SAAS,GAAGvD,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACAjH,mBAAmB,CAACsJ,aAAa,CAACZ,SAAS,CAAC;MAE5C,OAAO;QACL1B,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAAC8C,KAAK,CAAC,yCAAyC,CAAC,EAAE;MAC7D,MAAMG,KAAK,GAAGjD,QAAQ,CAAC8B,KAAK,CAAC,GAAG,CAAC;MACjC,MAAMpD,SAAS,GAAGuE,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;MACzC,MAAMQ,MAAM,GAAGT,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;;MAEtC;MACArI,mBAAmB,CAACuJ,UAAU,CAAC1F,SAAS,EAAEgF,MAAM,CAAC;MAEjD,OAAO;QACL7B,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAAC8C,KAAK,CAAC,0CAA0C,CAAC,EAAE;MAC9D,MAAMG,KAAK,GAAGjD,QAAQ,CAAC8B,KAAK,CAAC,GAAG,CAAC;MACjC,MAAMpD,SAAS,GAAGuE,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;MACzC,MAAMW,OAAO,GAAGZ,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;;MAEvC;MACArI,mBAAmB,CAACwJ,WAAW,CAAC3F,SAAS,EAAEmF,OAAO,CAAC;MAEnD,OAAO;QACLhC,OAAO,EAAE;MACX,CAAC;IACH;EACF;;EAEA;EACA,IAAI5B,MAAM,KAAK,KAAK,EAAE;IACpB;IACA,IAAID,QAAQ,KAAK,eAAe,EAAE;MAChC;MACA,MAAMsE,cAAc,GAAGzJ,mBAAmB,CAAC0J,WAAW,CAAC,CAAC;MAExD,IAAID,cAAc,CAACpB,MAAM,GAAG,CAAC,EAAE;QAC7B,OAAO;UACLhD,IAAI,EAAEoE,cAAc;UACpBzC,OAAO,EAAE;QACX,CAAC;MACH;;MAEA;MACAhH,mBAAmB,CAAC2J,YAAY,CAAC7I,YAAY,CAAC;MAE9C,OAAO;QACLuE,IAAI,EAAEvE,YAAY;QAClBkG,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAAC8C,KAAK,CAAC,0BAA0B,CAAC,EAAE;MAC9C,MAAMpE,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACA,MAAMhC,OAAO,GAAGjF,mBAAmB,CAAC4J,UAAU,CAAC/F,SAAS,CAAC;MAEzD,IAAIoB,OAAO,EAAE;QACX,OAAO;UACLI,IAAI,EAAEJ,OAAO;UACb+B,OAAO,EAAE;QACX,CAAC;MACH;MAEA,OAAO;QACLA,OAAO,EAAE,KAAK;QACdZ,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAIjB,QAAQ,CAACoB,QAAQ,CAAC,YAAY,CAAC,IAAIpB,QAAQ,CAACoB,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAClE,MAAM1C,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEpE;MACA,MAAM4C,WAAW,GAAG7J,mBAAmB,CAAC8J,QAAQ,CAACjG,SAAS,CAAC;MAE3D,IAAIgG,WAAW,CAACxB,MAAM,GAAG,CAAC,EAAE;QAC1B,OAAO;UACLhD,IAAI,EAAEwE,WAAW;UACjB7C,OAAO,EAAE;QACX,CAAC;MACH;;MAEA;MACA,MAAM+C,KAAK,GAAGtF,SAAS;;MAEvB;MACAzE,mBAAmB,CAACgK,SAAS,CAACnG,SAAS,EAAEkG,KAAK,CAAC;MAE/C,OAAO;QACL1E,IAAI,EAAE0E,KAAK;QACX/C,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,KAAK,wBAAwB,EAAE;MACzC;MACA,MAAM0E,WAAW,GAAG7J,mBAAmB,CAACiK,mBAAmB,CAAC,CAAC;MAE7D,IAAIJ,WAAW,CAACxB,MAAM,GAAG,CAAC,EAAE;QAC1B,OAAO;UACLhD,IAAI,EAAEwE,WAAW;UACjB7C,OAAO,EAAE;QACX,CAAC;MACH;;MAEA;MACA,OAAO;QACL3B,IAAI,EAAE,EAAE;QACR2B,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,KAAK,eAAe,EAAE;MAChC;MACA,MAAM+E,cAAc,GAAGlK,mBAAmB,CAACmK,WAAW,CAAC,CAAC;MAExD,IAAID,cAAc,CAAC7B,MAAM,GAAG,CAAC,EAAE;QAC7B,OAAO;UACLhD,IAAI,EAAE6E,cAAc;UACpBlD,OAAO,EAAE;QACX,CAAC;MACH;;MAEA;MACA,MAAMoD,oBAAoB,GAAGC,eAAe,CAACC,GAAG,CAACC,OAAO,KAAK;QAC3D,GAAGA,OAAO;QACVpH,QAAQ,EAAEoH,OAAO,CAACxG,MAAM,KAAKpD,aAAa,CAACqD;MAC7C,CAAC,CAAC,CAAC;;MAEH;MACAhE,mBAAmB,CAACwK,YAAY,CAACJ,oBAAoB,CAAC;MAEtD,OAAO;QACL/E,IAAI,EAAE+E,oBAAoB;QAC1BpD,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAACoB,QAAQ,CAAC,YAAY,CAAC,IAAIpB,QAAQ,CAACoB,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAClE,MAAM1C,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEpE;MACA,MAAMwD,WAAW,GAAGzK,mBAAmB,CAAC0K,QAAQ,CAAC7G,SAAS,CAAC;MAE3D,IAAI4G,WAAW,CAACpC,MAAM,GAAG,CAAC,EAAE;QAC1B,OAAO;UACLhD,IAAI,EAAEoF,WAAW;UACjBzD,OAAO,EAAE;QACX,CAAC;MACH;;MAEA;MACA,MAAM2D,YAAY,GAAGC,kBAAkB,CAAC/G,SAAS,CAAC;;MAElD;MACA7D,mBAAmB,CAAC6K,SAAS,CAAChH,SAAS,EAAE8G,YAAY,CAAC;MAEtD,OAAO;QACLtF,IAAI,EAAEsF,YAAY;QAClB3D,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,CAACoB,QAAQ,CAAC,YAAY,CAAC,IAAIpB,QAAQ,CAACoB,QAAQ,CAAC,SAAS,CAAC,EAAE;MACnE,MAAM1C,SAAS,GAAGsB,QAAQ,CAAC8B,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;MAErE;MACA,MAAM6D,YAAY,GAAG9K,mBAAmB,CAAC+K,SAAS,CAAClH,SAAS,CAAC;MAE7D,IAAIiH,YAAY,CAACzC,MAAM,GAAG,CAAC,EAAE;QAC3B,OAAO;UACLhD,IAAI,EAAEyF,YAAY;UAClB9D,OAAO,EAAE;QACX,CAAC;MACH;;MAEA;MACA,MAAMgE,aAAa,GAAGC,mBAAmB,CAACpH,SAAS,CAAC;;MAEpD;MACA7D,mBAAmB,CAACkL,UAAU,CAACrH,SAAS,EAAEmH,aAAa,CAAC;MAExD,OAAO;QACL3F,IAAI,EAAE2F,aAAa;QACnBhE,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI7B,QAAQ,KAAK,kBAAkB,EAAE;MACnC,MAAMgG,WAAW,GAAGnL,mBAAmB,CAACoL,cAAc,CAAC,CAAC;MAExD,IAAID,WAAW,CAAC9C,MAAM,GAAG,CAAC,EAAE;QAC1B,OAAO;UACLhD,IAAI,EAAE8F,WAAW;UACjBnE,OAAO,EAAE;QACX,CAAC;MACH;MAEA,OAAO;QACL3B,IAAI,EAAE,EAAE;QACR2B,OAAO,EAAE;MACX,CAAC;IACH;EACF;;EAEA;EACA,OAAO;IACL3B,IAAI,EAAE,EAAE;IACR2B,OAAO,EAAE;EACX,CAAC;AACH,CAAC;;AAED;AACA,MAAMqD,eAA0B,GAAG,CACjC;EACEnI,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,iBAAiB;EACxBtC,WAAW,EAAE,gCAAgC;EAC7CiJ,SAAS,EAAE,IAAI/I,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACvEgJ,OAAO,EAAE,IAAIjJ,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACtFwB,MAAM,EAAEpD,aAAa,CAAC4G,SAAS;EAC/BpE,QAAQ,EAAE,KAAK;EACfmE,WAAW,EAAE,0CAA0C;EACvDE,SAAS,EAAE9E,SAAS,CAACC,KAAK;EAC1B8E,YAAY,EAAE,CAAC/E,SAAS,CAACU,QAAQ,EAAEV,SAAS,CAACa,SAAS,CAAC;EACvDlB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,uBAAuB;EAC9BtC,WAAW,EAAE,iEAAiE;EAC9EiJ,SAAS,EAAE,IAAI/I,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EAC9DgJ,OAAO,EAAE,IAAIjJ,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EAC5DwB,MAAM,EAAEpD,aAAa,CAAC4G,SAAS;EAC/BpE,QAAQ,EAAE,KAAK;EACfmE,WAAW,EAAE,yCAAyC;EACtDE,SAAS,EAAE9E,SAAS,CAACC,KAAK;EAC1B8E,YAAY,EAAE,CAAC/E,SAAS,CAACU,QAAQ,EAAEV,SAAS,CAACY,QAAQ,CAAC;EACtDjB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,CACF;;AAED;AACA,MAAMqI,kBAAkB,GAAI/G,SAAiB,IAAK,CAChD;EACE3B,EAAE,EAAE,GAAG;EACP2B,SAAS;EACTa,KAAK,EAAE,qBAAqB;EAC5BtC,WAAW,EAAE,4CAA4C;EACzD2B,MAAM,EAAExD,UAAU,CAACiL,UAAU;EAC7BC,MAAM,EAAEjL,UAAU,CAACoE,IAAI;EACvB8G,WAAW,EAAE,EAAE;EACfC,UAAU,EAAE,qFAAqF;EACjGC,KAAK,EAAElJ,SAAS,CAACC,KAAK;EACtBoC,SAAS,EAAErC,SAAS,CAACC,KAAK;EAC1BN,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE;AACb,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACP2B,SAAS;EACTa,KAAK,EAAE,4BAA4B;EACnCtC,WAAW,EAAE,2EAA2E;EACxF2B,MAAM,EAAExD,UAAU,CAACsL,QAAQ;EAC3BJ,MAAM,EAAEjL,UAAU,CAAC0D,MAAM;EACzBwH,WAAW,EAAE,EAAE;EACfC,UAAU,EAAE,wDAAwD;EACpEC,KAAK,EAAElJ,SAAS,CAACC,KAAK;EACtBoC,SAAS,EAAErC,SAAS,CAACC,KAAK;EAC1BN,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACA,MAAMyI,mBAAmB,GAAIpH,SAAiB,IAAK,CACjD;EACE3B,EAAE,EAAE,GAAG;EACP2B,SAAS;EACTa,KAAK,EAAE,wCAAwC;EAC/CtC,WAAW,EAAE,0EAA0E;EACvF2B,MAAM,EAAEtD,WAAW,CAACqL,IAAI;EACxBL,MAAM,EAAEjL,UAAU,CAACoE,IAAI;EACvBgH,KAAK,EAAElJ,SAAS,CAACC,KAAK;EACtBoC,SAAS,EAAErC,SAAS,CAACC,KAAK;EAC1BN,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE;AACb,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACP2B,SAAS;EACTa,KAAK,EAAE,oCAAoC;EAC3CtC,WAAW,EAAE,sEAAsE;EACnF2B,MAAM,EAAEtD,WAAW,CAACuD,WAAW;EAC/ByH,MAAM,EAAEjL,UAAU,CAAC0D,MAAM;EACzB0H,KAAK,EAAElJ,SAAS,CAACC,KAAK;EACtBoC,SAAS,EAAErC,SAAS,CAACC,KAAK;EAC1BN,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE;AACb,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACP2B,SAAS;EACTa,KAAK,EAAE,0CAA0C;EACjDtC,WAAW,EAAE,mFAAmF;EAChG2B,MAAM,EAAEtD,WAAW,CAACsL,QAAQ;EAC5BN,MAAM,EAAEjL,UAAU,CAACwL,QAAQ;EAC3BC,iBAAiB,EAAE,qFAAqF;EACxGL,KAAK,EAAElJ,SAAS,CAACC,KAAK;EACtBoC,SAAS,EAAErC,SAAS,CAACC,KAAK;EAC1BN,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACA,MAAM0J,eAA0B,GAAG,CACjC;EACEhK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,wBAAwB;EAC9BC,WAAW,EAAE,2CAA2C;EACxD6B,QAAQ,EAAErD,eAAe,CAACgE,IAAI;EAC9BT,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAAC6D,WAAW;EACjCM,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACU,QAAQ;EAClCf,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAACuL;AACpC,CAAC,EACD;EACElK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,iBAAiB;EACvBC,WAAW,EAAE,kDAAkD;EAC/D6B,QAAQ,EAAErD,eAAe,CAACsD,MAAM;EAChCC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAACkM,OAAO;EAC7B/H,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACY,QAAQ;EAClCjB,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAACyL;AACpC,CAAC,EACD;EACEpK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,8BAA8B;EACpCC,WAAW,EAAE,mDAAmD;EAChE6B,QAAQ,EAAErD,eAAe,CAACoL,QAAQ;EAClC7H,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAACoM,SAAS;EAC/BjI,QAAQ,EAAE,GAAG;EACbC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACU,QAAQ;EAClCf,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAAC2L;AACpC,CAAC,EACD;EACEtK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,wBAAwB;EAC9BC,WAAW,EAAE,2DAA2D;EACxE6B,QAAQ,EAAErD,eAAe,CAACgE,IAAI;EAC9BT,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAAC6D,WAAW;EACjCM,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACY,QAAQ;EAClCjB,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAACuL;AACpC,CAAC,EACD;EACElK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,qCAAqC;EAC3CC,WAAW,EAAE,gFAAgF;EAC7F6B,QAAQ,EAAErD,eAAe,CAACoL,QAAQ;EAClC7H,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAACoM,SAAS;EAC/BjI,QAAQ,EAAE,GAAG;EACbC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACU,QAAQ;EAClCf,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAACyL;AACpC,CAAC,EACD;EACEpK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,wBAAwB;EAC9BC,WAAW,EAAE,oDAAoD;EACjE6B,QAAQ,EAAErD,eAAe,CAACgE,IAAI;EAC9BT,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAACkM,OAAO;EAC7B/H,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACU,QAAQ;EAClCf,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAACyL;AACpC,CAAC,EACD;EACEpK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,2BAA2B;EACjCC,WAAW,EAAE,oEAAoE;EACjF6B,QAAQ,EAAErD,eAAe,CAACsD,MAAM;EAChCC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAAC6D,WAAW;EACjCM,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACY,QAAQ;EAClCjB,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAAC2L;AACpC,CAAC,EACD;EACEtK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,iBAAiB;EACvBC,WAAW,EAAE,0DAA0D;EACvE6B,QAAQ,EAAErD,eAAe,CAACgE,IAAI;EAC9BT,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAACoM,SAAS;EAC/BjI,QAAQ,EAAE,GAAG;EACbC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,MAAM;EAClBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACY,QAAQ;EAClCjB,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAACuL;AACpC,CAAC,EACD;EACElK,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,4BAA4B;EAClCC,WAAW,EAAE,kDAAkD;EAC/D6B,QAAQ,EAAErD,eAAe,CAACsD,MAAM;EAChCC,SAAS,EAAE,YAAY;EACvBC,OAAO,EAAE,YAAY;EACrBL,MAAM,EAAE5D,aAAa,CAACsM,QAAQ;EAC9BnI,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,UAAU,EAAE,KAAK;EACjBtB,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9B4B,cAAc,EAAE3B,SAAS,CAACU,QAAQ;EAClCf,SAAS,EAAE,sBAAsB;EACjCG,SAAS,EAAE,sBAAsB;EACjC2J,YAAY,EAAEtL,mBAAmB,CAAC6L;AACpC,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAO5J,KAAa,EAAE6J,QAAgB,KAAK;EAC9D;EACA,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACrK,SAAS,CAAC,CAACsK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAClK,KAAK,KAAKA,KAAK,CAAC;EAElE,IAAI8J,IAAI,EAAE;IACR,OAAO;MACL7F,OAAO,EAAE,IAAI;MACb3B,IAAI,EAAEwH,IAAI;MACVzG,OAAO,EAAE;IACX,CAAC;EACH;EAEA,OAAO;IACLY,OAAO,EAAE,KAAK;IACd3B,IAAI,EAAE,IAAI;IACVe,OAAO,EAAE;EACX,CAAC;AACH,CAAC;AAED,MAAM8G,YAAoB,GAAG,CAC3B;EACEhL,EAAE,EAAE,GAAG;EACPU,QAAQ,EAAE,UAAU;EACpBC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAE,qBAAqB;EAC5BC,IAAI,EAAE3C,QAAQ,CAAC8M,eAAe;EAC9BjK,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9BU,QAAQ,EAAE,IAAI;EACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPU,QAAQ,EAAE,YAAY;EACtBC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,OAAO;EACjBC,KAAK,EAAE,uBAAuB;EAC9BC,IAAI,EAAE3C,QAAQ,CAACmD,SAAS;EACxBN,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9BU,QAAQ,EAAE,IAAI;EACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPU,QAAQ,EAAE,cAAc;EACxBC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,SAAS;EACnBC,KAAK,EAAE,yBAAyB;EAChCC,IAAI,EAAE3C,QAAQ,CAACqD,QAAQ;EACvBR,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9BU,QAAQ,EAAE,IAAI;EACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPU,QAAQ,EAAE,cAAc;EACxBC,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,yBAAyB;EAChCC,IAAI,EAAE3C,QAAQ,CAACmD,SAAS;EACxBN,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9BU,QAAQ,EAAE,IAAI;EACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPU,QAAQ,EAAE,aAAa;EACvBC,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE,OAAO;EACjBC,KAAK,EAAE,wBAAwB;EAC/BC,IAAI,EAAE3C,QAAQ,CAAC8M,eAAe;EAC9BjK,UAAU,EAAET,eAAe,CAAC,CAAC,CAAC;EAC9BU,QAAQ,EAAE,IAAI;EACdd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,CACF;AAED,MAAM6K,eAA6B,GAAG,CACpC;EACElL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,+BAA+B;EACtCtC,WAAW,EAAE,yIAAyI;EACtJ2B,MAAM,EAAErD,gBAAgB,CAACsD,WAAW;EACpCC,QAAQ,EAAE3D,YAAY,CAACsE,IAAI;EAC3ByI,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACrEF,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACvEC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,6BAA6B;EACpCtC,WAAW,EAAE,qHAAqH;EAClI2B,MAAM,EAAErD,gBAAgB,CAAC6M,OAAO;EAChCtJ,QAAQ,EAAE3D,YAAY,CAAC4D,MAAM;EAC7BmJ,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACrEF,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACvEC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,8BAA8B;EACrCtC,WAAW,EAAE,4HAA4H;EACzI2B,MAAM,EAAErD,gBAAgB,CAAC6L,SAAS;EAClCtI,QAAQ,EAAE3D,YAAY,CAACsE,IAAI;EAC3ByI,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACrEF,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACxEC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,wBAAwB;EAC/BtC,WAAW,EAAE,wGAAwG;EACrH2B,MAAM,EAAErD,gBAAgB,CAACsD,WAAW;EACpCC,QAAQ,EAAE3D,YAAY,CAAC4D,MAAM;EAC7BmJ,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACrEF,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACvEC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,gBAAgB;EACvBtC,WAAW,EAAE,mJAAmJ;EAChK2B,MAAM,EAAErD,gBAAgB,CAAC6M,OAAO;EAChCtJ,QAAQ,EAAE3D,YAAY,CAACsE,IAAI;EAC3ByI,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACtEF,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACvEC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,0BAA0B;EACjCtC,WAAW,EAAE,2IAA2I;EACxJ2B,MAAM,EAAErD,gBAAgB,CAACsD,WAAW;EACpCC,QAAQ,EAAE3D,YAAY,CAAC4D,MAAM;EAC7BmJ,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACrEF,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACvEC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,sBAAsB;EAC7BtC,WAAW,EAAE,8HAA8H;EAC3I2B,MAAM,EAAErD,gBAAgB,CAAC6L,SAAS;EAClCtI,QAAQ,EAAE3D,YAAY,CAACkN,GAAG;EAC1BH,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACrEF,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACvEC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPwC,KAAK,EAAE,0BAA0B;EACjCtC,WAAW,EAAE,wIAAwI;EACrJ2B,MAAM,EAAErD,gBAAgB,CAAC6M,OAAO;EAChCtJ,QAAQ,EAAE3D,YAAY,CAACsE,IAAI;EAC3ByI,UAAU,EAAEH,YAAY,CAAC,CAAC,CAAC;EAC3BI,UAAU,EAAEJ,YAAY,CAAC,CAAC,CAAC;EAC3BrI,OAAO,EAAE,IAAIvC,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;EACrEF,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC,CACF;AAED,MAAMkL,WAAW,GAAG;EAClBC,iBAAiB,EAAE,MAAOnM,KAAa,IAAyC;IAC9E,MAAMI,KAAK,CAAC,CAAC;IACb,OAAO;MACLqF,OAAO,EAAE,IAAI;MACb3B,IAAI,EAAE+H;IACR,CAAC;EACH,CAAC;EAEDO,iBAAiB,EAAE,MAAAA,CAAOzL,EAAU,EAAEX,KAAa,KAAuC;IACxF,MAAMI,KAAK,CAAC,CAAC;IACb,MAAMiM,UAAU,GAAGR,eAAe,CAACJ,IAAI,CAACa,CAAC,IAAIA,CAAC,CAAC3L,EAAE,KAAKA,EAAE,CAAC;IACzD,OAAO;MACL8E,OAAO,EAAE,CAAC,CAAC4G,UAAU;MACrBvI,IAAI,EAAEuI,UAAU,IAAIR,eAAe,CAAC,CAAC;IACvC,CAAC;EACH,CAAC;EAEDU,gBAAgB,EAAE,MAAAA,CAAOzI,IAAyB,EAAE9D,KAAa,KAAuC;IACtG,MAAMI,KAAK,CAAC,CAAC;IACb,MAAMoM,aAAyB,GAAG;MAChC7L,EAAE,EAAE8L,MAAM,CAACZ,eAAe,CAAC/E,MAAM,GAAG,CAAC,CAAC;MACtC,GAAGhD,IAAI;MACPhD,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAe;IACf6K,eAAe,CAACa,IAAI,CAACF,aAAa,CAAC;IACnC,OAAO;MACL/G,OAAO,EAAE,IAAI;MACb3B,IAAI,EAAE0I;IACR,CAAC;EACH,CAAC;EAEDG,gBAAgB,EAAE,MAAAA,CAAOhM,EAAU,EAAEmD,IAAyB,EAAE9D,KAAa,KAAuC;IAClH,MAAMI,KAAK,CAAC,CAAC;IACb,MAAMwM,KAAK,GAAGf,eAAe,CAACgB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAAC3L,EAAE,KAAKA,EAAE,CAAC;IACzD,IAAIiM,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,OAAO;QACLnH,OAAO,EAAE,KAAK;QACdJ,KAAK,EAAE;MACT,CAAC;IACH;IACAwG,eAAe,CAACe,KAAK,CAAC,GAAG;MACvB,GAAGf,eAAe,CAACe,KAAK,CAAC;MACzB,GAAG9I,IAAI;MACP7C,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IACD,OAAO;MACLyE,OAAO,EAAE,IAAI;MACb3B,IAAI,EAAE+H,eAAe,CAACe,KAAK;IAC7B,CAAC;EACH,CAAC;EAEDE,gBAAgB,EAAE,MAAAA,CAAOnM,EAAU,EAAEX,KAAa,KAAiC;IACjF,MAAMI,KAAK,CAAC,CAAC;IACb,MAAMwM,KAAK,GAAGf,eAAe,CAACgB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAAC3L,EAAE,KAAKA,EAAE,CAAC;IACzD,IAAIiM,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,OAAO;QACLnH,OAAO,EAAE,KAAK;QACdJ,KAAK,EAAE;MACT,CAAC;IACH;IACAwG,eAAe,CAACkB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAChC,OAAO;MACLnH,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC;;AAED;AACA,MAAMuH,SAAS,GAAG;EAChB;EACAC,IAAI,EAAE;IACJ7B,KAAK,EAAG8B,YAAoB,IAAK;MAC/B;MACAhI,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,OAAO9E,OAAO,CAACC,OAAO,CAAC;QACrB6M,MAAM,EAAE,GAAG;QACX9L,QAAQ,EAAE6L,YAAY;QACtBzL,IAAI,EAAE3C,QAAQ,CAAC4C,KAAK;QAAE;QACtB0L,YAAY,EAAE,GAAG;QACjBpN,KAAK,EAAE,aAAa,GAAGe,IAAI,CAACgJ,GAAG,CAAC,CAAC;QACjCtE,OAAO,EAAE,IAAI;QACbZ,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAEDwI,YAAY,EAAGA,YAAoB,IACjC1J,UAAU,CAAC,mBAAmB,EAAE,MAAM,EAAE;MAAE0J;IAAa,CAAC,CAAC;IAE3DC,MAAM,EAAGtN,KAAa,IACpB2D,UAAU,CAAC,kBAAkB,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE3D,KAAK;EACpD,CAAC;EAED;EACAuN,KAAK,EAAE;IACLC,cAAc,EAAGxN,KAAa,IAC5B2D,UAAU,CAAC,eAAe,EAAE,KAAK,EAAE8J,SAAS,EAAEzN,KAAK,CAAC;IAEtD0N,WAAW,EAAE,MAAO1N,KAAa,IAAmC;MAClE,MAAMI,KAAK,CAAC,CAAC;MACb,OAAO;QACLqF,OAAO,EAAE,IAAI;QACb3B,IAAI,EAAE6H;MACR,CAAC;IACH,CAAC;IAEDgC,WAAW,EAAEA,CAACR,MAAc,EAAEnN,KAAa,KACzC2D,UAAU,CAAC,cAAcwJ,MAAM,EAAE,EAAE,KAAK,EAAEM,SAAS,EAAEzN,KAAK,CAAC;IAE7D4N,UAAU,EAAEA,CAACC,QAAa,EAAE7N,KAAa,KACvC2D,UAAU,CAAC,YAAY,EAAE,MAAM,EAAEkK,QAAQ,EAAE7N,KAAK,CAAC;IAEnD8N,UAAU,EAAEA,CAACX,MAAc,EAAEU,QAAa,EAAE7N,KAAa,KACvD2D,UAAU,CAAC,cAAcwJ,MAAM,EAAE,EAAE,KAAK,EAAEU,QAAQ,EAAE7N,KAAK,CAAC;IAE5D+N,UAAU,EAAEA,CAACZ,MAAc,EAAEnN,KAAa,KACxC2D,UAAU,CAAC,cAAcwJ,MAAM,EAAE,EAAE,QAAQ,EAAEM,SAAS,EAAEzN,KAAK,CAAC;IAEhEgO,UAAU,EAAEA,CAACb,MAAc,EAAE1L,IAAY,EAAEzB,KAAa,KACtD2D,UAAU,CAAC,cAAcwJ,MAAM,OAAO,EAAE,KAAK,EAAE;MAAE1L;IAAK,CAAC,EAAEzB,KAAK,CAAC;IAEjEiO,gBAAgB,EAAEA,CAACd,MAAc,EAAEC,YAAoB,EAAEpN,KAAa,KACpE2D,UAAU,CAAC,cAAcwJ,MAAM,aAAa,EAAE,KAAK,EAAE;MAAEC;IAAa,CAAC,EAAEpN,KAAK,CAAC;IAE/EkO,iBAAiB,EAAGlO,KAAa,IAC/B2D,UAAU,CAAC,wBAAwB,EAAE,KAAK,EAAE8J,SAAS,EAAEzN,KAAK;EAChE,CAAC;EAED;EACAmO,QAAQ,EAAE;IACRC,cAAc,EAAE,MAAOpO,KAAa,IAAK;MACvC;MACA,MAAMQ,aAAa,CAAC,CAAC;;MAErB;MACA,MAAM6N,cAAc,GAAGpO,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC9D,MAAMiO,QAAQ,GAAGE,cAAc,GAAGjK,IAAI,CAACkK,KAAK,CAACD,cAAc,CAAC,GAAG1D,eAAe;MAE9E,OAAO;QACL7G,IAAI,EAAEqK;MACR,CAAC;IACH,CAAC;IAEDI,cAAc,EAAE,MAAAA,CAAO5N,EAAU,EAAEX,KAAa,KAAK;MACnD,MAAMQ,aAAa,CAAC,CAAC;;MAErB;MACA,MAAM6N,cAAc,GAAGpO,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC9D,MAAMiO,QAAQ,GAAGE,cAAc,GAAGjK,IAAI,CAACkK,KAAK,CAACD,cAAc,CAAC,GAAG1D,eAAe;;MAE9E;MACA,MAAMjH,OAAO,GAAGyK,QAAQ,CAAC1C,IAAI,CAAE+C,CAAM,IAAKA,CAAC,CAAC7N,EAAE,KAAKA,EAAE,CAAC;MAEtD,IAAI,CAAC+C,OAAO,EAAE;QACZ,MAAM,IAAIkB,KAAK,CAAC,mBAAmBjE,EAAE,YAAY,CAAC;MACpD;MAEA,OAAO;QACLmD,IAAI,EAAEJ;MACR,CAAC;IACH,CAAC;IAED+K,aAAa,EAAE,MAAAA,CAAOC,WAAgB,EAAE1O,KAAa,KAAmB;MACtE,MAAMQ,aAAa,CAAC,CAAC;;MAErB;MACA,MAAMmO,eAAe,GAAG;QACtB,GAAGD,WAAW;QACd9D,YAAY,EAAE8D,WAAW,CAAC9D,YAAY,IAAI;MAC5C,CAAC;;MAED;MACA,MAAMyD,cAAc,GAAGpO,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC9D,MAAMiO,QAAQ,GAAGE,cAAc,GAAGjK,IAAI,CAACkK,KAAK,CAACD,cAAc,CAAC,GAAG1D,eAAe;;MAE9E;MACA,MAAMiE,eAAe,GAAG,CAAC,GAAGT,QAAQ,EAAEQ,eAAe,CAAC;;MAEtD;MACA1O,YAAY,CAAC4O,OAAO,CAAC,iBAAiB,EAAEzK,IAAI,CAACC,SAAS,CAACuK,eAAe,CAAC,CAAC;MAExE,OAAO;QACL9K,IAAI,EAAE6K;MACR,CAAC;IACH,CAAC;IAED/H,aAAa,EAAE,MAAAA,CAAOtE,SAAiB,EAAEoM,WAAgB,EAAE1O,KAAa,KAAmB;MACzF,MAAMQ,aAAa,CAAC,CAAC;;MAErB;MACA,MAAM6N,cAAc,GAAGpO,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC9D,MAAMiO,QAAQ,GAAGE,cAAc,GAAGjK,IAAI,CAACkK,KAAK,CAACD,cAAc,CAAC,GAAG1D,eAAe;;MAE9E;MACA,MAAMmE,YAAY,GAAGX,QAAQ,CAACtB,SAAS,CAAE2B,CAAM,IAAKA,CAAC,CAAC7N,EAAE,KAAK2B,SAAS,CAAC;MAEvE,IAAIwM,YAAY,KAAK,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIlK,KAAK,CAAC,mBAAmBtC,SAAS,YAAY,CAAC;MAC3D;;MAEA;MACA,MAAMqE,cAAc,GAAG;QACrB,GAAGwH,QAAQ,CAACW,YAAY,CAAC;QACzB,GAAGJ,WAAW;QACd9D,YAAY,EAAE8D,WAAW,CAAC9D,YAAY,IAAIuD,QAAQ,CAACW,YAAY,CAAC,CAAClE,YAAY,IAAI;MACnF,CAAC;;MAED;MACA,MAAMmE,oBAAoB,GAAG,CAAC,GAAGZ,QAAQ,CAAC;MAC1CY,oBAAoB,CAACD,YAAY,CAAC,GAAGnI,cAAc;;MAEnD;MACA1G,YAAY,CAAC4O,OAAO,CAAC,iBAAiB,EAAEzK,IAAI,CAACC,SAAS,CAAC0K,oBAAoB,CAAC,CAAC;MAE7E,OAAO;QACLjL,IAAI,EAAE6C;MACR,CAAC;IACH,CAAC;IAEDiB,aAAa,EAAE,MAAAA,CAAOtF,SAAiB,EAAEtC,KAAa,KAAmB;MACvE,MAAMQ,aAAa,CAAC,CAAC;;MAErB;MACA,MAAM6N,cAAc,GAAGpO,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC9D,MAAMiO,QAAQ,GAAGE,cAAc,GAAGjK,IAAI,CAACkK,KAAK,CAACD,cAAc,CAAC,GAAG1D,eAAe;;MAE9E;MACA,MAAMiE,eAAe,GAAGT,QAAQ,CAACa,MAAM,CAAER,CAAM,IAAKA,CAAC,CAAC7N,EAAE,KAAK2B,SAAS,CAAC;MAEvE,IAAI6L,QAAQ,CAACrH,MAAM,KAAK8H,eAAe,CAAC9H,MAAM,EAAE;QAC9C,MAAM,IAAIlC,KAAK,CAAC,mBAAmBtC,SAAS,YAAY,CAAC;MAC3D;;MAEA;MACArC,YAAY,CAAC4O,OAAO,CAAC,iBAAiB,EAAEzK,IAAI,CAACC,SAAS,CAACuK,eAAe,CAAC,CAAC;MAExE,OAAO;QACL9K,IAAI,EAAE;UAAEe,OAAO,EAAE;QAA+B;MAClD,CAAC;IACH,CAAC;IAEDoK,gBAAgB,EAAEA,CAAC3M,SAAiB,EAAE4M,QAAkB,EAAElP,KAAa,KACrE2D,UAAU,CAAC,iBAAiBrB,SAAS,cAAc,EAAE,MAAM,EAAE4M,QAAQ,EAAElP,KAAK,EAAE,IAAI,CAAC;IAErFmP,cAAc,EAAEA,CAAC7M,SAAiB,EAAEtC,KAAa,KAC/C2D,UAAU,CAAC,iBAAiBrB,SAAS,cAAc,EAAE,KAAK,EAAEmL,SAAS,EAAEzN,KAAK,CAAC;IAE/EoP,gBAAgB,EAAEA,CAAC9M,SAAiB,EAAE+M,YAAoB,EAAErP,KAAa,KACvE2D,UAAU,CAAC,iBAAiBrB,SAAS,gBAAgB+M,YAAY,EAAE,EAAE,QAAQ,EAAE5B,SAAS,EAAEzN,KAAK,CAAC;IAElGqI,UAAU,EAAE,MAAAA,CAAO/F,SAAiB,EAAEtC,KAAa,KAAK;MACtD,IAAI;QACF;QACA;QACA;QACA;QACA;;QAEA;QACA,OAAO;UACL8D,IAAI,EAAE;YACJnD,EAAE,EAAE2B,SAAS;YACb1B,IAAI,EAAE,cAAc;YACpBC,WAAW,EAAE,4CAA4C;YACzD+B,SAAS,EAAE,IAAI7B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnC6B,OAAO,EAAE,IAAI9B,IAAI,CAACA,IAAI,CAACgJ,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC/I,WAAW,CAAC,CAAC;YACtEwB,MAAM,EAAE,aAAa;YACrBE,QAAQ,EAAE,QAAQ;YAClBM,MAAM,EAAE,MAAM;YACdD,QAAQ,EAAE,EAAE;YACZpB,UAAU,EAAE;cACVhB,EAAE,EAAE,QAAQ;cACZC,IAAI,EAAE;YACR,CAAC;YACDkC,cAAc,EAAE;cACdnC,EAAE,EAAE,QAAQ;cACZW,SAAS,EAAE,MAAM;cACjBC,QAAQ,EAAE;YACZ,CAAC;YACD+N,cAAc,EAAE,WAAW;YAC3BC,QAAQ,EAAE,yCAAyC;YACnDC,aAAa,EAAE,EAAE;YACjB1O,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC;MACH,CAAC,CAAC,OAAOqE,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,MAAMA,KAAK;MACb;IACF;EACF,CAAC;EAED;EACAmD,KAAK,EAAE;IACLiH,WAAW,EAAEA,CAACnN,SAAiB,EAAEtC,KAAa,KAC5C2D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,EAAE,KAAK,EAAEmL,SAAS,EAAEzN,KAAK,CAAC;IAEzE0P,sBAAsB,EAAG1P,KAAa,IACpC2D,UAAU,CAAC,wBAAwB,EAAE,KAAK,EAAE8J,SAAS,EAAEzN,KAAK,CAAC;IAE/D2P,WAAW,EAAEA,CAACrN,SAAiB,EAAEyE,MAAc,EAAE/G,KAAa,KAC5D2D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUyE,MAAM,EAAE,EAAE,KAAK,EAAE0G,SAAS,EAAEzN,KAAK,CAAC;IAEnF4P,sBAAsB,EAAEA,CAAC7I,MAAc,EAAE/G,KAAa,KACpD2D,UAAU,CAAC,0BAA0BoD,MAAM,EAAE,EAAE,KAAK,EAAE0G,SAAS,EAAEzN,KAAK,CAAC;IAEzE6P,UAAU,EAAEA,CAACvN,SAAiB,EAAEwN,QAAa,EAAE9P,KAAa,KAC1D2D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,EAAE,MAAM,EAAEwN,QAAQ,EAAE9P,KAAK,CAAC;IAEzE+P,qBAAqB,EAAEA,CAACD,QAAa,EAAE9P,KAAa,KAClD2D,UAAU,CAAC,wBAAwB,EAAE,MAAM,EAAEmM,QAAQ,EAAE9P,KAAK,CAAC;IAE/DiH,UAAU,EAAEA,CAAC3E,SAAiB,EAAEyE,MAAc,EAAE+I,QAAa,EAAE9P,KAAa,KAC1E2D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUyE,MAAM,EAAE,EAAE,KAAK,EAAE+I,QAAQ,EAAE9P,KAAK,CAAC;IAElFkH,qBAAqB,EAAEA,CAACH,MAAc,EAAE+I,QAAa,EAAE9P,KAAa,KAClE2D,UAAU,CAAC,0BAA0BoD,MAAM,EAAE,EAAE,KAAK,EAAE+I,QAAQ,EAAE9P,KAAK,CAAC;IAExE6H,UAAU,EAAEA,CAACvF,SAAiB,EAAEyE,MAAc,EAAE/G,KAAa,KAC3D2D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUyE,MAAM,EAAE,EAAE,QAAQ,EAAE0G,SAAS,EAAEzN,KAAK,CAAC;IAEtF8H,qBAAqB,EAAEA,CAACf,MAAc,EAAE/G,KAAa,KACnD2D,UAAU,CAAC,0BAA0BoD,MAAM,EAAE,EAAE,QAAQ,EAAE0G,SAAS,EAAEzN,KAAK,CAAC;IAE5E;IACAgQ,UAAU,EAAE,MAAAA,CAAO1N,SAAiB,EAAEyE,MAAc,EAAEkJ,WAAgB,EAAEjQ,KAAa,KAAK;MACxF,IAAIxB,QAAQ,CAAC0R,YAAY,EAAE;QACzB;QACA,MAAM1P,aAAa,CAAC,CAAC;;QAErB;QACA,MAAM2P,QAAQ,GAAG/L,IAAI,CAACkK,KAAK,CAACrO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;;QAElE;QACA,MAAMkQ,SAAS,GAAGD,QAAQ,CAACtD,SAAS,CAAEwD,CAAM,IAAKA,CAAC,CAAC1P,EAAE,KAAKoG,MAAM,IAAIsJ,CAAC,CAAC/N,SAAS,KAAKA,SAAS,CAAC;QAE9F,IAAI8N,SAAS,KAAK,CAAC,CAAC,EAAE;UACpB;UACA,MAAME,UAAU,GAAG;YACjB3P,EAAE,EAAE,WAAWI,IAAI,CAACgJ,GAAG,CAAC,CAAC,EAAE;YAC3BhD,MAAM;YACN9B,IAAI,EAAEgL,WAAW,CAAChL,IAAI;YACtBnE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCuP,MAAM,EAAE;cACN5P,EAAE,EAAEsP,WAAW,CAACO,QAAQ;cACxBlP,SAAS,EAAE2O,WAAW,CAACQ,eAAe,IAAI,MAAM;cAChDlP,QAAQ,EAAE0O,WAAW,CAACS,cAAc,IAAIT,WAAW,CAACO;YACtD;UACF,CAAC;;UAED;UACA,IAAI,CAACL,QAAQ,CAACC,SAAS,CAAC,CAACb,QAAQ,EAAE;YACjCY,QAAQ,CAACC,SAAS,CAAC,CAACb,QAAQ,GAAG,EAAE;UACnC;UAEAY,QAAQ,CAACC,SAAS,CAAC,CAACb,QAAQ,CAAC7C,IAAI,CAAC4D,UAAU,CAAC;;UAE7C;UACArQ,YAAY,CAAC4O,OAAO,CAAC,OAAO,EAAEzK,IAAI,CAACC,SAAS,CAAC8L,QAAQ,CAAC,CAAC;UAEvD,OAAO;YACL1K,OAAO,EAAE,IAAI;YACb3B,IAAI,EAAEwM,UAAU;YAChBzL,OAAO,EAAE;UACX,CAAC;QACH,CAAC,MAAM;UACL,MAAM,IAAID,KAAK,CAAC,gBAAgB,CAAC;QACnC;MACF,CAAC,MAAM;QACL;QACA,MAAMN,QAAQ,GAAG,MAAMhG,KAAK,CAACqS,IAAI,CAC/B,GAAGpS,YAAY,aAAa+D,SAAS,UAAUyE,MAAM,WAAW,EAChEkJ,WAAW,EACX;UACEtQ,OAAO,EAAE;YACPQ,aAAa,EAAE,UAAUH,KAAK;UAChC;QACF,CACF,CAAC;QACD,OAAOsE,QAAQ,CAACR,IAAI;MACtB;IACF;EACF,CAAC;EAED;EACA8M,KAAK,EAAE;IACLC,WAAW,EAAEA,CAACvO,SAAiB,EAAEtC,KAAa,KAC5C2D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,EAAE,KAAK,EAAEmL,SAAS,EAAEzN,KAAK,CAAC;IAEzE8Q,WAAW,EAAEA,CAACxO,SAAiB,EAAEgF,MAAc,EAAEtH,KAAa,KAC5D2D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUgF,MAAM,EAAE,EAAE,KAAK,EAAEmG,SAAS,EAAEzN,KAAK,CAAC;IAEnF+Q,UAAU,EAAEA,CAACzO,SAAiB,EAAE0O,QAAa,EAAEhR,KAAa,KAC1D2D,UAAU,CAAC,iBAAiBrB,SAAS,QAAQ,EAAE,MAAM,EAAE0O,QAAQ,EAAEhR,KAAK,CAAC;IAEzEwH,UAAU,EAAEA,CAAClF,SAAiB,EAAEgF,MAAc,EAAE0J,QAAa,EAAEhR,KAAa,KAC1E2D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUgF,MAAM,EAAE,EAAE,KAAK,EAAE0J,QAAQ,EAAEhR,KAAK,CAAC;IAElFgI,UAAU,EAAEA,CAAC1F,SAAiB,EAAEgF,MAAc,EAAEtH,KAAa,KAC3D2D,UAAU,CAAC,iBAAiBrB,SAAS,UAAUgF,MAAM,EAAE,EAAE,QAAQ,EAAEmG,SAAS,EAAEzN,KAAK;EACvF,CAAC;EAED;EACAiR,MAAM,EAAE;IACNC,YAAY,EAAEA,CAAC5O,SAAiB,EAAEtC,KAAa,KAC7C2D,UAAU,CAAC,aAAarB,SAAS,SAAS,EAAE,KAAK,EAAE,IAAI,EAAEtC,KAAK,CAAC;IACjEmR,YAAY,EAAEA,CAAC7O,SAAiB,EAAEmF,OAAe,EAAEzH,KAAa,KAC9D2D,UAAU,CAAC,aAAarB,SAAS,WAAWmF,OAAO,EAAE,EAAE,KAAK,EAAE,IAAI,EAAEzH,KAAK,CAAC;IAC5EoR,WAAW,EAAEA,CAAC9O,SAAiB,EAAE+O,SAAyB,EAAErR,KAAa,KACvE2D,UAAU,CAAC,aAAarB,SAAS,SAAS,EAAE,MAAM,EAAE+O,SAAS,EAAErR,KAAK,CAAC;IACvE2H,WAAW,EAAEA,CAACrF,SAAiB,EAAEmF,OAAe,EAAE4J,SAAyB,EAAErR,KAAa,KACxF2D,UAAU,CAAC,aAAarB,SAAS,WAAWmF,OAAO,EAAE,EAAE,KAAK,EAAE4J,SAAS,EAAErR,KAAK,CAAC;IACjFiI,WAAW,EAAEA,CAAC3F,SAAiB,EAAEmF,OAAe,EAAEzH,KAAa,KAC7D2D,UAAU,CAAC,aAAarB,SAAS,WAAWmF,OAAO,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAEzH,KAAK;EAChF,CAAC;EAED;EACAsR,YAAY,EAAE;IACZC,iBAAiB,EAAEA,CAACC,WAAgB,EAAExR,KAAa,KACjD2D,UAAU,CAAC,oBAAoB,EAAE,MAAM,EAAE6N,WAAW,EAAExR,KAAK,CAAC;IAE9DyR,wBAAwB,EAAEA,CAACnP,SAAiB,EAAEtC,KAAa,KACzD2D,UAAU,CAAC,gCAAgCrB,SAAS,EAAE,EAAE,KAAK,EAAEmL,SAAS,EAAEzN,KAAK,CAAC;IAElF0R,kBAAkB,EAAEA,CAACC,SAAiB,EAAE3R,KAAa,KACnD2D,UAAU,CAAC,sBAAsBgO,SAAS,EAAE,EAAE,KAAK,EAAElE,SAAS,EAAEzN,KAAK,CAAC;IAExE4R,uBAAuB,EAAEA,CAACD,SAAiB,EAAEnP,MAAW,EAAEqP,WAA+B,EAAE7R,KAAa,KACtG2D,UAAU,CAAC,sBAAsBgO,SAAS,SAAS,EAAE,OAAO,EAAE;MAAEnP,MAAM;MAAEqP;IAAY,CAAC,EAAE7R,KAAK,CAAC;IAE/F8R,kBAAkB,EAAEA,CAACH,SAAiB,EAAEE,WAA+B,EAAE7R,KAAa,KACpF2D,UAAU,CAAC,sBAAsBgO,SAAS,UAAU,EAAE,MAAM,EAAE;MAAEE;IAAY,CAAC,EAAE7R,KAAK,CAAC;IAEvF+R,iBAAiB,EAAEA,CAACJ,SAAiB,EAAEE,WAAmB,EAAE7R,KAAa,KACvE2D,UAAU,CAAC,sBAAsBgO,SAAS,SAAS,EAAE,MAAM,EAAE;MAAEE;IAAY,CAAC,EAAE7R,KAAK;EACvF,CAAC;EAED;EACAkM,WAAW;EAEX8F,SAAS,EAAE;IACTC,YAAY,EAAGjS,KAAa,IAC1B2D,UAAU,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,EAAE3D,KAAK,CAAC;IAC/CkS,eAAe,EAAEA,CAACC,KAAa,EAAEnS,KAAa,KAC5C2D,UAAU,CAAC,eAAewO,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAEnS,KAAK;EACzD,CAAC;EAED;EACA4J,WAAW,EAAE;IACXsE,iBAAiB,EAAE,MAAOlO,KAAa,IAAK;MAC1C,IAAI;QACF;QACA;QACA;QACA;QACA;;QAEA;QACA,OAAO;UACL8D,IAAI,EAAE,CACJ;YACEnD,EAAE,EAAE,QAAQ;YACZC,IAAI,EAAE,eAAe;YACrBC,WAAW,EAAE,mCAAmC;YAChDC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC,CAAC,EACD;YACEL,EAAE,EAAE,QAAQ;YACZC,IAAI,EAAE,eAAe;YACrBC,WAAW,EAAE,4BAA4B;YACzCC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC,CAAC,EACD;YACEL,EAAE,EAAE,QAAQ;YACZC,IAAI,EAAE,oBAAoB;YAC1BC,WAAW,EAAE,mCAAmC;YAChDC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC,CAAC;QAEL,CAAC;MACH,CAAC,CAAC,OAAOqE,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD,MAAMA,KAAK;MACb;IACF,CAAC;IAED+M,iBAAiB,EAAE,MAAAA,CAAOhF,YAAoB,EAAEpN,KAAa,KAAK;MAChE,IAAI;QACF;QACA;QACA;QACA;QACA;;QAEA;QACA,OAAO;UACL8D,IAAI,EAAE;YACJnD,EAAE,EAAEyM,YAAY;YAChBxM,IAAI,EAAE,iBAAiB;YACvBC,WAAW,EAAE,2BAA2B;YACxCC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC;MACH,CAAC,CAAC,OAAOqE,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,MAAMA,KAAK;MACb;IACF,CAAC;IAEDgN,gBAAgB,EAAE,MAAAA,CAAOC,cAAmB,EAAEtS,KAAa,KAAK;MAC9D,IAAI;QACF;QACA;QACA;QACA;QACA;;QAEA;QACA,OAAO;UACL8D,IAAI,EAAE;YACJnD,EAAE,EAAEI,IAAI,CAACgJ,GAAG,CAAC,CAAC,CAACwI,QAAQ,CAAC,CAAC;YACzB,GAAGD,cAAc;YACjBxR,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;YACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC;MACH,CAAC,CAAC,OAAOqE,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,MAAMA,KAAK;MACb;IACF,CAAC;IAEDmN,gBAAgB,EAAE,MAAAA,CAAOpF,YAAoB,EAAEkF,cAAmB,EAAEtS,KAAa,KAAK;MACpF,IAAI;QACF;QACA;QACA;QACA;QACA;;QAEA;QACA,OAAO;UACL8D,IAAI,EAAE;YACJnD,EAAE,EAAEyM,YAAY;YAChB,GAAGkF,cAAc;YACjBrR,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC;MACH,CAAC,CAAC,OAAOqE,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,MAAMA,KAAK;MACb;IACF,CAAC;IAEDoN,gBAAgB,EAAE,MAAAA,CAAOrF,YAAoB,EAAEpN,KAAa,KAAK;MAC/D,IAAI;QACF;QACA;QACA;QACA;QACA;;QAEA;QACA,OAAO;UACL8D,IAAI,EAAE;YACJ2B,OAAO,EAAE,IAAI;YACbZ,OAAO,EAAE;UACX;QACF,CAAC;MACH,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,MAAMA,KAAK;MACb;IACF;EACF,CAAC;EAED;EACAqN,cAAc,EAAE;IACdC,0BAA0B,EAAEA,CAACrQ,SAAiB,EAAEtC,KAAa,KAC3D2D,UAAU,CAAC,iBAAiBrB,SAAS,kBAAkB,EAAE,KAAK,EAAEmL,SAAS,EAAEzN,KAAK,CAAC;IAEnF4S,oBAAoB,EAAEA,CAACjB,SAAiB,EAAE3R,KAAa,KACrD2D,UAAU,CAAC,wBAAwBgO,SAAS,EAAE,EAAE,KAAK,EAAElE,SAAS,EAAEzN,KAAK,CAAC;IAE1E6S,mBAAmB,EAAEA,CAACrB,WAAgB,EAAExR,KAAa,KACnD2D,UAAU,CAAC,sBAAsB,EAAE,MAAM,EAAE6N,WAAW,EAAExR,KAAK,CAAC;IAEhE8S,yBAAyB,EAAEA,CAACnB,SAAiB,EAAEnP,MAAW,EAAEqP,WAA+B,EAAE7R,KAAa,KACxG2D,UAAU,CAAC,wBAAwBgO,SAAS,SAAS,EAAE,OAAO,EAAE;MAAEnP,MAAM;MAAEqP;IAAY,CAAC,EAAE7R,KAAK,CAAC;IAEjG+S,oBAAoB,EAAEA,CAACpB,SAAiB,EAAEE,WAA+B,EAAE7R,KAAa,KACtF2D,UAAU,CAAC,wBAAwBgO,SAAS,UAAU,EAAE,MAAM,EAAE;MAAEE;IAAY,CAAC,EAAE7R,KAAK,CAAC;IAEzFgT,mBAAmB,EAAEA,CAACrB,SAAiB,EAAEE,WAAmB,EAAE7R,KAAa,KACzE2D,UAAU,CAAC,wBAAwBgO,SAAS,SAAS,EAAE,MAAM,EAAE;MAAEE;IAAY,CAAC,EAAE7R,KAAK,CAAC;IAExFiT,oBAAoB,EAAGjT,KAAa,IAClC2D,UAAU,CAAC,sBAAsB,EAAE,KAAK,EAAE8J,SAAS,EAAEzN,KAAK;EAC9D;AACF,CAAC;AAED,eAAegN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}