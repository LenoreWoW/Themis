{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Box,CircularProgress,Typography,useTheme}from'@mui/material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CircularProgressWithLabel=_ref=>{let{value,size=40,thickness=3.6,animate=false,animationDuration=800,valuePrefix='',valueSuffix='%',color='primary',progressColor,...props}=_ref;const theme=useTheme();const[progress,setProgress]=useState(0);useEffect(()=>{if(animate){const timer=setInterval(()=>{setProgress(prevProgress=>{if(prevProgress>=value){clearInterval(timer);return value;}// Increment by a small amount each time\nconst increment=Math.max(1,Math.floor(value/20));return Math.min(prevProgress+increment,value);});},animationDuration/(value||1));return()=>{clearInterval(timer);};}else{setProgress(value);}},[value,animate,animationDuration]);// Dynamically determine color based on value\nconst getColorByValue=()=>{if(color!=='primary')return color;if(value<30){return'error';}else if(value<70){return'warning';}else{return'success';}};return/*#__PURE__*/_jsxs(Box,{sx:{position:'relative',display:'inline-flex'},children:[/*#__PURE__*/_jsx(CircularProgress,{variant:\"determinate\",size:size,thickness:thickness,value:animate?progress:value,color:getColorByValue(),sx:progressColor?{color:progressColor}:undefined,...props}),/*#__PURE__*/_jsx(Box,{sx:{top:0,left:0,bottom:0,right:0,position:'absolute',display:'flex',alignItems:'center',justifyContent:'center'},children:/*#__PURE__*/_jsx(Typography,{variant:\"caption\",component:\"div\",color:\"text.secondary\",sx:{fontWeight:'medium',fontSize:size&&size<45?'0.7rem':'0.875rem',paddingLeft:'1px'// Center visually\n},children:`${valuePrefix}${Math.round(animate?progress:value)}${valueSuffix}`})})]});};export default CircularProgressWithLabel;","map":{"version":3,"names":["React","useEffect","useState","Box","CircularProgress","Typography","useTheme","jsx","_jsx","jsxs","_jsxs","CircularProgressWithLabel","_ref","value","size","thickness","animate","animationDuration","valuePrefix","valueSuffix","color","progressColor","props","theme","progress","setProgress","timer","setInterval","prevProgress","clearInterval","increment","Math","max","floor","min","getColorByValue","sx","position","display","children","variant","undefined","top","left","bottom","right","alignItems","justifyContent","component","fontWeight","fontSize","paddingLeft","round"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/components/common/CircularProgressWithLabel.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, CircularProgress, Typography, useTheme, CircularProgressProps } from '@mui/material';\n\nexport interface CircularProgressWithLabelProps extends CircularProgressProps {\n  value: number;\n  size?: number;\n  thickness?: number;\n  animate?: boolean;\n  animationDuration?: number;\n  valuePrefix?: string;\n  valueSuffix?: string;\n  color?: 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'inherit';\n  progressColor?: string;\n}\n\nconst CircularProgressWithLabel: React.FC<CircularProgressWithLabelProps> = ({\n  value,\n  size = 40,\n  thickness = 3.6,\n  animate = false,\n  animationDuration = 800,\n  valuePrefix = '',\n  valueSuffix = '%',\n  color = 'primary',\n  progressColor,\n  ...props\n}) => {\n  const theme = useTheme();\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    if (animate) {\n      const timer = setInterval(() => {\n        setProgress((prevProgress) => {\n          if (prevProgress >= value) {\n            clearInterval(timer);\n            return value;\n          }\n          // Increment by a small amount each time\n          const increment = Math.max(1, Math.floor(value / 20));\n          return Math.min(prevProgress + increment, value);\n        });\n      }, animationDuration / (value || 1));\n\n      return () => {\n        clearInterval(timer);\n      };\n    } else {\n      setProgress(value);\n    }\n  }, [value, animate, animationDuration]);\n\n  // Dynamically determine color based on value\n  const getColorByValue = () => {\n    if (color !== 'primary') return color;\n    \n    if (value < 30) {\n      return 'error';\n    } else if (value < 70) {\n      return 'warning';\n    } else {\n      return 'success';\n    }\n  };\n\n  return (\n    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n      <CircularProgress\n        variant=\"determinate\"\n        size={size}\n        thickness={thickness}\n        value={animate ? progress : value}\n        color={getColorByValue()}\n        sx={progressColor ? { color: progressColor } : undefined}\n        {...props}\n      />\n      <Box\n        sx={{\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Typography\n          variant=\"caption\"\n          component=\"div\"\n          color=\"text.secondary\"\n          sx={{\n            fontWeight: 'medium',\n            fontSize: size && size < 45 ? '0.7rem' : '0.875rem',\n            paddingLeft: '1px', // Center visually\n          }}\n        >\n          {`${valuePrefix}${Math.round(animate ? progress : value)}${valueSuffix}`}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CircularProgressWithLabel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}