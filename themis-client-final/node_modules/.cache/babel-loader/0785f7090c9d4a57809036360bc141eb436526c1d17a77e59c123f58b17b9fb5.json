{"ast":null,"code":"import React,{createContext,useContext}from'react';import{ThemeProvider as MuiThemeProvider}from'@mui/material';import useThemeMode from'../hooks/useThemeMode';import{lightTheme,darkTheme}from'../theme/modernTheme';// Define the context type\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the context with a default value\nconst ThemeContext=/*#__PURE__*/createContext(undefined);// Create the provider component\nexport const ThemeProvider=_ref=>{let{children}=_ref;const themeHook=useThemeMode();// Use the appropriate theme based on the current mode\nconst theme=themeHook.themeMode==='dark'?darkTheme:lightTheme;return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:themeHook,children:/*#__PURE__*/_jsx(MuiThemeProvider,{theme:theme,children:children})});};// Create a custom hook to use the theme context\nexport const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};export default ThemeProvider;","map":{"version":3,"names":["React","createContext","useContext","ThemeProvider","MuiThemeProvider","useThemeMode","lightTheme","darkTheme","jsx","_jsx","ThemeContext","undefined","_ref","children","themeHook","theme","themeMode","Provider","value","useTheme","context","Error"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { ThemeProvider as MuiThemeProvider, PaletteMode } from '@mui/material';\nimport useThemeMode, { ThemeMode } from '../hooks/useThemeMode';\nimport { lightTheme, darkTheme } from '../theme/modernTheme';\n\n// Define the context type\ninterface ThemeContextType {\n  themeMode: ThemeMode;\n  isDarkMode: boolean;\n  isLightMode: boolean;\n  toggleThemeMode: () => void;\n  setThemeMode: (mode: ThemeMode) => void;\n}\n\n// Create the context with a default value\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Create the provider component\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const themeHook = useThemeMode();\n  \n  // Use the appropriate theme based on the current mode\n  const theme = themeHook.themeMode === 'dark' ? darkTheme : lightTheme;\n\n  return (\n    <ThemeContext.Provider value={themeHook}>\n      <MuiThemeProvider theme={theme}>\n        {children}\n      </MuiThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\n// Create a custom hook to use the theme context\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport default ThemeProvider; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,KAAQ,OAAO,CACxD,OAASC,aAAa,GAAI,CAAAC,gBAAgB,KAAqB,eAAe,CAC9E,MAAO,CAAAC,YAAY,KAAqB,uBAAuB,CAC/D,OAASC,UAAU,CAAEC,SAAS,KAAQ,sBAAsB,CAE5D;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBASA;AACA,KAAM,CAAAC,YAAY,cAAGT,aAAa,CAA+BU,SAAS,CAAC,CAE3E;AACA,MAAO,MAAM,CAAAR,aAAsD,CAAGS,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACjF,KAAM,CAAAE,SAAS,CAAGT,YAAY,CAAC,CAAC,CAEhC;AACA,KAAM,CAAAU,KAAK,CAAGD,SAAS,CAACE,SAAS,GAAK,MAAM,CAAGT,SAAS,CAAGD,UAAU,CAErE,mBACEG,IAAA,CAACC,YAAY,CAACO,QAAQ,EAACC,KAAK,CAAEJ,SAAU,CAAAD,QAAA,cACtCJ,IAAA,CAACL,gBAAgB,EAACW,KAAK,CAAEA,KAAM,CAAAF,QAAA,CAC5BA,QAAQ,CACO,CAAC,CACE,CAAC,CAE5B,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,QAAQ,CAAGA,CAAA,GAAwB,CAC9C,KAAM,CAAAC,OAAO,CAAGlB,UAAU,CAACQ,YAAY,CAAC,CACxC,GAAIU,OAAO,GAAKT,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAU,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,cAAe,CAAAjB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}