{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{Snackbar,Alert}from'@mui/material';// Define the interface for the context\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Create the context with a default undefined value\nconst NotificationContext=/*#__PURE__*/createContext(undefined);// Hook to use the notification context\nexport function useNotifications(){const context=useContext(NotificationContext);if(context===undefined){throw new Error('useNotifications must be used within a NotificationProvider');}return context;}// Define the props interface for the provider\n// Notification state interface\n// Provider component\nexport function NotificationProvider(_ref){let{children}=_ref;const[notifications,setNotifications]=useState([]);const[open,setOpen]=useState(false);const[currentNotification,setCurrentNotification]=useState(undefined);// Show a notification\nconst showAlert=function(message){let severity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';const newNotification={message,severity,key:new Date().getTime()};setNotifications(prevNotifications=>[...prevNotifications,newNotification]);};// Clear all notifications\nconst clearAlerts=()=>{setNotifications([]);};// Handle notification queue\nuseEffect(()=>{if(notifications.length>0&&!open){// Show the oldest notification\nsetCurrentNotification(notifications[0]);setOpen(true);// Remove this notification from the queue\nsetNotifications(notifications.slice(1));}},[notifications,open]);// Handle notification close\nconst handleClose=(event,reason)=>{if(reason==='clickaway'){return;}setOpen(false);};return/*#__PURE__*/_jsxs(NotificationContext.Provider,{value:{showAlert,clearAlerts},children:[children,currentNotification&&/*#__PURE__*/_jsx(Snackbar,{open:open,autoHideDuration:6000,onClose:handleClose,anchorOrigin:{vertical:'bottom',horizontal:'center'},children:/*#__PURE__*/_jsx(Alert,{onClose:handleClose,severity:currentNotification.severity,sx:{width:'100%'},children:currentNotification.message})},currentNotification.key)]});}export default NotificationContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Snackbar","Alert","jsx","_jsx","jsxs","_jsxs","NotificationContext","undefined","useNotifications","context","Error","NotificationProvider","_ref","children","notifications","setNotifications","open","setOpen","currentNotification","setCurrentNotification","showAlert","message","severity","arguments","length","newNotification","key","Date","getTime","prevNotifications","clearAlerts","slice","handleClose","event","reason","Provider","value","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","width"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/context/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Snackbar, Alert } from '@mui/material';\nimport { AlertColor } from '@mui/material/Alert';\nimport { useAuth } from './AuthContext';\n\n// Define the interface for the context\ninterface NotificationContextType {\n  showAlert: (message: string, severity: AlertColor) => void;\n  clearAlerts: () => void;\n}\n\n// Create the context with a default undefined value\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\n// Hook to use the notification context\nexport function useNotifications() {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}\n\n// Define the props interface for the provider\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\n// Notification state interface\ninterface Notification {\n  message: string;\n  severity: AlertColor;\n  key: number;\n}\n\n// Provider component\nexport function NotificationProvider({ children }: NotificationProviderProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [open, setOpen] = useState(false);\n  const [currentNotification, setCurrentNotification] = useState<Notification | undefined>(undefined);\n  \n  // Show a notification\n  const showAlert = (message: string, severity: AlertColor = 'info') => {\n    const newNotification: Notification = {\n      message,\n      severity,\n      key: new Date().getTime(),\n    };\n    \n    setNotifications(prevNotifications => [...prevNotifications, newNotification]);\n  };\n  \n  // Clear all notifications\n  const clearAlerts = () => {\n    setNotifications([]);\n  };\n  \n  // Handle notification queue\n  useEffect(() => {\n    if (notifications.length > 0 && !open) {\n      // Show the oldest notification\n      setCurrentNotification(notifications[0]);\n      setOpen(true);\n      // Remove this notification from the queue\n      setNotifications(notifications.slice(1));\n    }\n  }, [notifications, open]);\n  \n  // Handle notification close\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  \n  return (\n    <NotificationContext.Provider value={{ showAlert, clearAlerts }}>\n      {children}\n      {currentNotification && (\n        <Snackbar\n          key={currentNotification.key}\n          open={open}\n          autoHideDuration={6000}\n          onClose={handleClose}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        >\n          <Alert\n            onClose={handleClose}\n            severity={currentNotification.severity}\n            sx={{ width: '100%' }}\n          >\n            {currentNotification.message}\n          </Alert>\n        </Snackbar>\n      )}\n    </NotificationContext.Provider>\n  );\n}\n\nexport default NotificationContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}