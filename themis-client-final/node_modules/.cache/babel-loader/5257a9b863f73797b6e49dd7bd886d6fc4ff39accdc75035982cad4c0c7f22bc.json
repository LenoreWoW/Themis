{"ast":null,"code":"var _jsxFileName = \"/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/pages/GoalsPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Paper, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, MenuItem, IconButton, Box, Chip, LinearProgress, Slider, Tabs, Tab, FormControlLabel, Switch, Select, FormControl, InputLabel, ListItemText, Checkbox, OutlinedInput } from '@mui/material';\nimport { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, Link as LinkIcon } from '@mui/icons-material';\nimport { GridContainer, GridItem } from '../components/common/MuiGridWrapper';\nimport { useTranslation } from 'react-i18next';\nimport api from '../services/api';\n\n// Enums used in this component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar GoalType = /*#__PURE__*/function (GoalType) {\n  GoalType[\"STRATEGIC\"] = \"STRATEGIC\";\n  GoalType[\"ANNUAL\"] = \"ANNUAL\";\n  GoalType[\"QUARTERLY\"] = \"QUARTERLY\";\n  GoalType[\"MONTHLY\"] = \"MONTHLY\";\n  return GoalType;\n}(GoalType || {});\nvar GoalCategory = /*#__PURE__*/function (GoalCategory) {\n  GoalCategory[\"PERFORMANCE\"] = \"PERFORMANCE\";\n  GoalCategory[\"FINANCIAL\"] = \"FINANCIAL\";\n  GoalCategory[\"CUSTOMER\"] = \"CUSTOMER\";\n  GoalCategory[\"LEARNING\"] = \"LEARNING\";\n  GoalCategory[\"PROCESS\"] = \"PROCESS\";\n  return GoalCategory;\n}(GoalCategory || {});\nvar GoalStatus = /*#__PURE__*/function (GoalStatus) {\n  GoalStatus[\"NOT_STARTED\"] = \"NOT_STARTED\";\n  GoalStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  GoalStatus[\"COMPLETED\"] = \"COMPLETED\";\n  GoalStatus[\"ON_HOLD\"] = \"ON_HOLD\";\n  return GoalStatus;\n}(GoalStatus || {}); // Local interfaces\n// Export the initial goals for use in other components\nexport const initialStrategicGoals = [{\n  id: '1',\n  title: 'Improve Project Completion Rate',\n  description: 'Increase on-time project completion rate by 15%',\n  type: GoalType.STRATEGIC,\n  category: GoalCategory.PERFORMANCE,\n  status: GoalStatus.IN_PROGRESS,\n  progress: 65,\n  startDate: '2023-01-01',\n  endDate: '2025-12-31',\n  assignedTo: 'Department A',\n  linkedProjects: [{\n    projectId: 'p1',\n    weight: 60\n  }, {\n    projectId: 'p4',\n    weight: 40\n  }],\n  isProgressAutoCalculated: true,\n  createdAt: '2023-01-01',\n  updatedAt: '2023-01-01'\n}, {\n  id: '2',\n  title: 'Reduce Project Costs',\n  description: 'Reduce average project costs by 10%',\n  type: GoalType.STRATEGIC,\n  category: GoalCategory.FINANCIAL,\n  status: GoalStatus.NOT_STARTED,\n  progress: 0,\n  startDate: '2023-02-15',\n  endDate: '2025-11-30',\n  assignedTo: 'Department B',\n  linkedProjects: [],\n  isProgressAutoCalculated: false,\n  createdAt: '2023-02-15',\n  updatedAt: '2023-02-15'\n}];\n\n// Export the initial annual goals\nexport const initialAnnualGoals = [{\n  id: '3',\n  title: 'Client Satisfaction',\n  description: 'Achieve 90% positive client feedback',\n  type: GoalType.ANNUAL,\n  category: GoalCategory.CUSTOMER,\n  status: GoalStatus.COMPLETED,\n  progress: 100,\n  startDate: '2023-01-15',\n  endDate: '2023-12-31',\n  assignedTo: 'All Departments',\n  linkedProjects: [{\n    projectId: 'p2',\n    weight: 50\n  }, {\n    projectId: 'p3',\n    weight: 50\n  }],\n  isProgressAutoCalculated: true,\n  createdAt: '2023-01-15',\n  updatedAt: '2023-12-15'\n}, {\n  id: '4',\n  title: 'Staff Training',\n  description: 'Complete required training for all staff members',\n  type: GoalType.ANNUAL,\n  category: GoalCategory.LEARNING,\n  status: GoalStatus.IN_PROGRESS,\n  progress: 75,\n  startDate: '2023-01-01',\n  endDate: '2023-12-31',\n  assignedTo: 'HR Department',\n  linkedProjects: [],\n  isProgressAutoCalculated: false,\n  createdAt: '2023-01-01',\n  updatedAt: '2023-10-01'\n}];\n\n// Tab panel component\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `goals-tabpanel-${index}`,\n    \"aria-labelledby\": `goals-tab-${index}`,\n    ...other,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        pt: 3\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 27\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_c = TabPanel;\nfunction a11yProps(index) {\n  return {\n    id: `goals-tab-${index}`,\n    'aria-controls': `goals-tabpanel-${index}`\n  };\n}\nconst GoalsPage = () => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [tabValue, setTabValue] = useState(0);\n  const [strategicGoals, setStrategicGoals] = useState(initialStrategicGoals);\n  const [annualGoals, setAnnualGoals] = useState(initialAnnualGoals);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [currentGoal, setCurrentGoal] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [projectWeights, setProjectWeights] = useState({});\n\n  // Fetch projects when component mounts\n  useEffect(() => {\n    const fetchProjects = async () => {\n      setLoading(true);\n      try {\n        const response = await api.projects.getAllProjects('');\n        if (response.success) {\n          setProjects(response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProjects();\n  }, []);\n\n  // Calculate a goal's progress based on the progress of its linked projects\n  const calculateGoalProgressFromProjects = linkedProjectWeights => {\n    if (linkedProjectWeights.length === 0) return 0;\n    let weightedProgress = 0;\n    let totalWeight = 0;\n    linkedProjectWeights.forEach(projectWeight => {\n      const project = projects.find(p => p.id === projectWeight.projectId);\n      if (project) {\n        weightedProgress += project.progress * projectWeight.weight;\n        totalWeight += projectWeight.weight;\n      }\n    });\n\n    // Return weighted average, or 0 if no valid projects were found\n    return totalWeight > 0 ? Math.round(weightedProgress / totalWeight) : 0;\n  };\n  const handleTabChange = (_event, newValue) => {\n    setTabValue(newValue);\n  };\n  const handleOpenDialog = (goal = null, editing = false) => {\n    setIsEditing(editing);\n    if (goal) {\n      setCurrentGoal(goal);\n\n      // Initialize project weights from existing linked projects\n      const weights = {};\n      goal.linkedProjects.forEach(link => {\n        weights[link.projectId] = link.weight;\n      });\n      setProjectWeights(weights);\n    } else {\n      // Create a new goal with default values\n      setCurrentGoal({\n        id: Date.now().toString(),\n        title: '',\n        description: '',\n        type: tabValue === 0 ? GoalType.STRATEGIC : GoalType.ANNUAL,\n        category: GoalCategory.PERFORMANCE,\n        status: GoalStatus.NOT_STARTED,\n        progress: 0,\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0],\n        assignedTo: '',\n        linkedProjects: [],\n        isProgressAutoCalculated: false,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n      setProjectWeights({});\n    }\n    setOpenDialog(true);\n  };\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setCurrentGoal(null);\n    setIsEditing(false);\n    setProjectWeights({});\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCurrentGoal(prevGoal => prevGoal ? {\n      ...prevGoal,\n      [name]: value\n    } : null);\n  };\n  const handleSelectChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setCurrentGoal(prevGoal => {\n      if (!prevGoal) return prevGoal;\n      return {\n        ...prevGoal,\n        [name]: value\n      };\n    });\n  };\n  const handleProgressChange = (event, newValue) => {\n    setCurrentGoal(prevGoal => {\n      if (!prevGoal) return prevGoal;\n      return {\n        ...prevGoal,\n        progress: newValue\n      };\n    });\n  };\n  const handleLinkedProjectsChange = event => {\n    if (!currentGoal) return;\n    const selectedProjectIds = event.target.value;\n\n    // Initialize weights for newly selected projects\n    const updatedWeights = {\n      ...projectWeights\n    };\n    selectedProjectIds.forEach(projectId => {\n      // If this is a newly selected project, initialize its weight to a default value\n      if (!updatedWeights[projectId]) {\n        updatedWeights[projectId] = 100 / selectedProjectIds.length; // Default to equal weights\n      }\n    });\n\n    // Remove weights for projects that are no longer selected\n    Object.keys(updatedWeights).forEach(projectId => {\n      if (!selectedProjectIds.includes(projectId)) {\n        delete updatedWeights[projectId];\n      }\n    });\n\n    // Normalize weights to ensure they sum to 100%\n    normalizeWeights(updatedWeights);\n    setProjectWeights(updatedWeights);\n\n    // Update the linked projects with new weights\n    const updatedLinkedProjects = selectedProjectIds.map(projectId => ({\n      projectId,\n      weight: updatedWeights[projectId]\n    }));\n    setCurrentGoal({\n      ...currentGoal,\n      linkedProjects: updatedLinkedProjects\n    });\n  };\n  const handleAutoCalculateChange = event => {\n    const isAutoCalculated = event.target.checked;\n    setCurrentGoal(prevGoal => {\n      if (!prevGoal) return null;\n      const updatedGoal = {\n        ...prevGoal,\n        isProgressAutoCalculated: isAutoCalculated\n      };\n\n      // If enabling auto-calculation, update the progress based on linked projects\n      if (isAutoCalculated) {\n        updatedGoal.progress = calculateGoalProgressFromProjects(prevGoal.linkedProjects.map(p => p));\n      }\n      return updatedGoal;\n    });\n  };\n  const handleWeightChange = (projectId, newWeight) => {\n    if (!currentGoal) return;\n    const updatedWeights = {\n      ...projectWeights\n    };\n    updatedWeights[projectId] = newWeight;\n\n    // Ensure weights sum to 100%\n    normalizeWeights(updatedWeights);\n    setProjectWeights(updatedWeights);\n\n    // Update linked projects with new weights\n    const updatedLinkedProjects = currentGoal.linkedProjects.map(project => project.projectId === projectId ? {\n      ...project,\n      weight: newWeight\n    } : {\n      ...project,\n      weight: updatedWeights[project.projectId]\n    });\n    setCurrentGoal({\n      ...currentGoal,\n      linkedProjects: updatedLinkedProjects\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!currentGoal) return;\n\n    // Ensure project weights are properly set before saving\n    const finalLinkedProjects = currentGoal.linkedProjects.map(project => ({\n      projectId: project.projectId,\n      weight: projectWeights[project.projectId] || 0\n    }));\n    const finalGoal = {\n      ...currentGoal,\n      linkedProjects: finalLinkedProjects,\n      updatedAt: new Date().toISOString()\n    };\n\n    // Save the goal\n    if (isEditing) {\n      // Update existing goal\n      if (currentGoal.type === GoalType.STRATEGIC) {\n        setStrategicGoals(prevGoals => prevGoals.map(goal => goal.id === currentGoal.id ? finalGoal : goal));\n      } else {\n        setAnnualGoals(prevGoals => prevGoals.map(goal => goal.id === currentGoal.id ? finalGoal : goal));\n      }\n    } else {\n      // Add new goal\n      if (finalGoal.type === GoalType.STRATEGIC) {\n        setStrategicGoals(prevGoals => [...prevGoals, finalGoal]);\n      } else {\n        setAnnualGoals(prevGoals => [...prevGoals, finalGoal]);\n      }\n    }\n    setOpenDialog(false);\n    setCurrentGoal(null);\n    setProjectWeights({});\n  };\n  const handleDeleteGoal = id => {\n    if (tabValue === 0) {\n      setStrategicGoals(strategicGoals.filter(goal => goal.id !== id));\n    } else {\n      setAnnualGoals(annualGoals.filter(goal => goal.id !== id));\n    }\n  };\n  const getStatusColor = status => {\n    switch (status) {\n      case GoalStatus.NOT_STARTED:\n        return 'default';\n      case GoalStatus.IN_PROGRESS:\n        return 'primary';\n      case GoalStatus.COMPLETED:\n        return 'success';\n      case GoalStatus.ON_HOLD:\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n  const getTranslatedStatus = status => {\n    switch (status) {\n      case GoalStatus.NOT_STARTED:\n        return t('goals.notStarted');\n      case GoalStatus.IN_PROGRESS:\n        return t('status.inProgress');\n      case GoalStatus.COMPLETED:\n        return t('status.completed');\n      case GoalStatus.ON_HOLD:\n        return t('status.onHold');\n      default:\n        return status;\n    }\n  };\n  const getTranslatedCategory = category => {\n    switch (category) {\n      case GoalCategory.PERFORMANCE:\n        return t('goals.performance');\n      case GoalCategory.FINANCIAL:\n        return t('goals.financial');\n      case GoalCategory.CUSTOMER:\n        return t('goals.customer');\n      case GoalCategory.LEARNING:\n        return t('goals.learning');\n      case GoalCategory.PROCESS:\n        return t('goals.process');\n      default:\n        return category;\n    }\n  };\n  const renderGoalCards = goals => /*#__PURE__*/_jsxDEV(GridContainer, {\n    spacing: 3,\n    children: goals.map(goal => /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      md: 6,\n      lg: 4,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 2,\n        sx: {\n          p: 2,\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            top: 10,\n            right: 10,\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: () => handleOpenDialog(goal, true),\n            sx: {\n              mr: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: () => handleDeleteGoal(goal.id),\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: goal.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mb: 2,\n            minHeight: '40px'\n          },\n          children: goal.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Chip, {\n            label: getTranslatedStatus(goal.status),\n            size: \"small\",\n            sx: {\n              mr: 1,\n              mb: 1\n            },\n            color: getStatusColor(goal.status)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: getTranslatedCategory(goal.category),\n            size: \"small\",\n            sx: {\n              mb: 1\n            },\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            display: \"flex\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              component: \"span\",\n              sx: {\n                width: '50%',\n                fontWeight: 'bold',\n                mr: 1\n              },\n              children: [t('goals.progress'), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              component: \"span\",\n              sx: {\n                width: '50%'\n              },\n              children: [goal.progress, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n            variant: \"determinate\",\n            value: goal.progress,\n            sx: {\n              mt: 1,\n              mb: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"text.secondary\",\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: goal.isProgressAutoCalculated,\n                size: \"small\",\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 28\n              }, this),\n              label: t('goals.autoCalculated'),\n              sx: {\n                '& .MuiFormControlLabel-label': {\n                  fontSize: '0.75rem'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: [t('timeline'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [new Date(goal.startDate).toLocaleDateString(), \" - \", new Date(goal.endDate).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 'auto',\n            pt: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: [t('goals.assignedTo'), \": \", goal.assignedTo]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 13\n        }, this), goal.linkedProjects.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            sx: {\n              fontWeight: 'bold',\n              mb: 1\n            },\n            children: [t('goals.linkedProjects'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 17\n          }, this), goal.linkedProjects.map(projectWeight => {\n            const project = projects.find(p => p.id === projectWeight.projectId);\n            return /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                mb: 0.5\n              },\n              children: [/*#__PURE__*/_jsxDEV(Chip, {\n                icon: /*#__PURE__*/_jsxDEV(LinkIcon, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 31\n                }, this),\n                label: project ? project.name : projectWeight.projectId,\n                size: \"small\",\n                variant: \"outlined\",\n                sx: {\n                  mr: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                sx: {\n                  fontWeight: 'medium'\n                },\n                children: [projectWeight.weight, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 23\n              }, this)]\n            }, projectWeight.projectId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this)\n    }, goal.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 477,\n    columnNumber: 5\n  }, this);\n\n  // Function to normalize weights to sum to 100%\n  const normalizeWeights = weights => {\n    const projectIds = Object.keys(weights);\n    if (projectIds.length === 0) return;\n\n    // Calculate the total of all weights\n    const total = projectIds.reduce((sum, id) => sum + weights[id], 0);\n\n    // If the total is not 100, normalize\n    if (total !== 100 && total !== 0) {\n      projectIds.forEach(id => {\n        weights[id] = Math.round(weights[id] / total * 100);\n      });\n\n      // Handle any rounding errors to ensure the sum is exactly 100\n      const newTotal = projectIds.reduce((sum, id) => sum + weights[id], 0);\n      if (newTotal !== 100) {\n        weights[projectIds[0]] += 100 - newTotal;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mb: 3,\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: t('navigation.goals')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 22\n        }, this),\n        onClick: () => handleOpenDialog(),\n        children: t('goals.add')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        borderBottom: 1,\n        borderColor: 'divider'\n      },\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        value: tabValue,\n        onChange: handleTabChange,\n        \"aria-label\": \"goal types\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: t('goals.strategic'),\n          ...a11yProps(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: t('goals.annual'),\n          ...a11yProps(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n      value: tabValue,\n      index: 0,\n      children: renderGoalCards(strategicGoals)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n      value: tabValue,\n      index: 1,\n      children: renderGoalCards(annualGoals)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: isEditing ? t('goals.edit') : `${t('goals.addNew')} ${tabValue === 0 ? t('goals.strategic') : t('goals.annual')} ${t('goals.goal')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(GridContainer, {\n          spacing: 2,\n          sx: {\n            mt: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: t('goals.title'),\n              name: \"title\",\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.title) || '',\n              onChange: handleChange,\n              fullWidth: true,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: t('common.description'),\n              name: \"description\",\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.description) || '',\n              onChange: handleChange,\n              fullWidth: true,\n              multiline: true,\n              rows: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              select: true,\n              label: t('goals.category'),\n              name: \"category\",\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.category) || GoalCategory.PERFORMANCE,\n              onChange: handleSelectChange,\n              fullWidth: true,\n              children: Object.values(GoalCategory).map(category => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: category,\n                children: getTranslatedCategory(category)\n              }, category, false, {\n                fileName: _jsxFileName,\n                lineNumber: 704,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              select: true,\n              label: t('status.status'),\n              name: \"status\",\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.status) || GoalStatus.NOT_STARTED,\n              onChange: handleSelectChange,\n              fullWidth: true,\n              children: Object.values(GoalStatus).map(status => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: status,\n                children: getTranslatedStatus(status)\n              }, status, false, {\n                fileName: _jsxFileName,\n                lineNumber: 721,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: t('common.startDate'),\n              name: \"startDate\",\n              type: \"date\",\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.startDate) || '',\n              onChange: handleChange,\n              fullWidth: true,\n              InputLabelProps: {\n                shrink: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: t('common.endDate'),\n              name: \"endDate\",\n              type: \"date\",\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.endDate) || '',\n              onChange: handleChange,\n              fullWidth: true,\n              InputLabelProps: {\n                shrink: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: t('goals.assignedTo'),\n              name: \"assignedTo\",\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.assignedTo) || '',\n              onChange: handleChange,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              margin: \"normal\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"linked-projects-label\",\n                children: t('goals.linkedProjects')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 764,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"linked-projects-label\",\n                multiple: true,\n                value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.linkedProjects.map(p => p.projectId)) || [],\n                onChange: handleLinkedProjectsChange,\n                input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n                  label: t('goals.linkedProjects')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 770,\n                  columnNumber: 26\n                }, this),\n                renderValue: selected => /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    gap: 0.5\n                  },\n                  children: selected.map(value => {\n                    const project = projects.find(p => p.id === value);\n                    return /*#__PURE__*/_jsxDEV(Chip, {\n                      label: project ? project.name : value,\n                      size: \"small\"\n                    }, value, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 776,\n                      columnNumber: 27\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 772,\n                  columnNumber: 21\n                }, this),\n                MenuProps: {\n                  PaperProps: {\n                    style: {\n                      maxHeight: 224,\n                      width: 250\n                    }\n                  }\n                },\n                children: projects.map(project => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: project.id,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.linkedProjects.some(p => p.projectId === project.id)) || false\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 796,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: project.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 797,\n                    columnNumber: 23\n                  }, this)]\n                }, project.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 795,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 765,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.isProgressAutoCalculated) || false,\n                onChange: handleAutoCalculateChange,\n                name: \"isProgressAutoCalculated\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 19\n              }, this),\n              label: t('goals.autoCalculateProgress')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              display: \"block\",\n              children: t('goals.autoCalculateDescription')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 815,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 13\n          }, this), !(currentGoal !== null && currentGoal !== void 0 && currentGoal.isProgressAutoCalculated) && /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              id: \"progress-slider\",\n              gutterBottom: true,\n              children: [t('project.progress'), \": \", (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.progress) || 0, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              value: (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.progress) || 0,\n              onChange: handleProgressChange,\n              \"aria-labelledby\": \"progress-slider\",\n              valueLabelDisplay: \"auto\",\n              step: 5,\n              marks: true,\n              min: 0,\n              max: 100\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 825,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 15\n          }, this), (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.linkedProjects) && currentGoal.linkedProjects.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              gutterBottom: true,\n              children: t('Project Weights')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              paragraph: true,\n              children: t('Adjust the weight of each project\\'s contribution to this goal. Weights will automatically balance to 100%.')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 17\n            }, this), (currentGoal === null || currentGoal === void 0 ? void 0 : currentGoal.linkedProjects) && currentGoal.linkedProjects.map(projectLink => {\n              const project = projects.find(p => p.id === projectLink.projectId);\n              return /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mb: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: project ? project.name : projectLink.projectId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 853,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    fontWeight: \"medium\",\n                    children: [projectWeights[projectLink.projectId] || projectLink.weight, \"%\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 856,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 852,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Slider, {\n                  value: projectWeights[projectLink.projectId] || projectLink.weight,\n                  onChange: (_, newValue) => handleWeightChange(projectLink.projectId, newValue),\n                  \"aria-labelledby\": \"project-weight-slider\",\n                  valueLabelDisplay: \"auto\",\n                  step: 5,\n                  marks: true,\n                  min: 5,\n                  max: 100\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 860,\n                  columnNumber: 23\n                }, this)]\n              }, projectLink.projectId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 851,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseDialog,\n          children: t('common.cancel')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit,\n          variant: \"contained\",\n          color: \"primary\",\n          children: isEditing ? t('common.update') : t('common.create')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 879,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 634,\n    columnNumber: 5\n  }, this);\n};\n_s(GoalsPage, \"4hTrI0QZcVAWWuGgbJcO7Q4o2Fw=\", false, function () {\n  return [useTranslation];\n});\n_c2 = GoalsPage;\nexport default GoalsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"GoalsPage\");","map":{"version":3,"names":["React","useState","useEffect","Typography","Paper","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","MenuItem","IconButton","Box","Chip","LinearProgress","Slider","Tabs","Tab","FormControlLabel","Switch","Select","FormControl","InputLabel","ListItemText","Checkbox","OutlinedInput","Add","AddIcon","Edit","EditIcon","Delete","DeleteIcon","Link","LinkIcon","GridContainer","GridItem","useTranslation","api","jsxDEV","_jsxDEV","GoalType","GoalCategory","GoalStatus","initialStrategicGoals","id","title","description","type","STRATEGIC","category","PERFORMANCE","status","IN_PROGRESS","progress","startDate","endDate","assignedTo","linkedProjects","projectId","weight","isProgressAutoCalculated","createdAt","updatedAt","FINANCIAL","NOT_STARTED","initialAnnualGoals","ANNUAL","CUSTOMER","COMPLETED","LEARNING","TabPanel","props","children","value","index","other","role","hidden","sx","pt","fileName","_jsxFileName","lineNumber","columnNumber","_c","a11yProps","GoalsPage","_s","t","tabValue","setTabValue","strategicGoals","setStrategicGoals","annualGoals","setAnnualGoals","openDialog","setOpenDialog","currentGoal","setCurrentGoal","isEditing","setIsEditing","projects","setProjects","loading","setLoading","projectWeights","setProjectWeights","fetchProjects","response","getAllProjects","success","data","error","console","calculateGoalProgressFromProjects","linkedProjectWeights","length","weightedProgress","totalWeight","forEach","projectWeight","project","find","p","Math","round","handleTabChange","_event","newValue","handleOpenDialog","goal","editing","weights","link","Date","now","toString","toISOString","split","setFullYear","getFullYear","handleCloseDialog","handleChange","e","name","target","prevGoal","handleSelectChange","event","handleProgressChange","handleLinkedProjectsChange","selectedProjectIds","updatedWeights","Object","keys","includes","normalizeWeights","updatedLinkedProjects","map","handleAutoCalculateChange","isAutoCalculated","checked","updatedGoal","handleWeightChange","newWeight","handleSubmit","preventDefault","finalLinkedProjects","finalGoal","prevGoals","handleDeleteGoal","filter","getStatusColor","ON_HOLD","getTranslatedStatus","getTranslatedCategory","PROCESS","renderGoalCards","goals","spacing","xs","md","lg","elevation","height","display","flexDirection","position","top","right","size","onClick","mr","fontSize","variant","gutterBottom","color","mb","minHeight","label","alignItems","component","width","fontWeight","mt","control","disabled","toLocaleDateString","justifyContent","icon","projectIds","total","reduce","sum","newTotal","startIcon","borderBottom","borderColor","onChange","open","onClose","maxWidth","fullWidth","required","multiline","rows","sm","select","values","InputLabelProps","shrink","margin","labelId","multiple","input","renderValue","selected","flexWrap","gap","MenuProps","PaperProps","style","maxHeight","some","primary","valueLabelDisplay","step","marks","min","max","paragraph","projectLink","_","_c2","$RefreshReg$"],"sources":["/Users/hassanalsahli/Desktop/Themis/themis-client-final/src/pages/GoalsPage.tsx"],"sourcesContent":["import React, { useState, useEffect, ReactNode, ChangeEvent, MouseEvent } from 'react';\nimport {\n  Typography,\n  Paper,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  MenuItem,\n  IconButton,\n  Box,\n  Chip,\n  LinearProgress,\n  Slider,\n  Tabs,\n  Tab,\n  FormControlLabel,\n  Switch,\n  Select,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  Checkbox,\n  OutlinedInput,\n  SelectChangeEvent\n} from '@mui/material';\nimport { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, Link as LinkIcon } from '@mui/icons-material';\nimport { GridContainer, GridItem } from '../components/common/MuiGridWrapper';\nimport { useTranslation } from 'react-i18next';\nimport api from '../services/api';\n\n// Enums used in this component\nenum GoalType {\n  STRATEGIC = 'STRATEGIC',\n  ANNUAL = 'ANNUAL',\n  QUARTERLY = 'QUARTERLY',\n  MONTHLY = 'MONTHLY'\n}\n\nenum GoalCategory {\n  PERFORMANCE = 'PERFORMANCE',\n  FINANCIAL = 'FINANCIAL',\n  CUSTOMER = 'CUSTOMER',\n  LEARNING = 'LEARNING',\n  PROCESS = 'PROCESS'\n}\n\nenum GoalStatus {\n  NOT_STARTED = 'NOT_STARTED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  ON_HOLD = 'ON_HOLD'\n}\n\n// Local interfaces\ninterface GoalInterface {\n  id: string;\n  title: string;\n  description: string;\n  type: GoalType;\n  category: GoalCategory;\n  status: GoalStatus;\n  progress: number;\n  startDate: string;\n  endDate: string;\n  assignedTo: string;\n  linkedProjects: ProjectWeight[];\n  isProgressAutoCalculated: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ProjectWeight {\n  projectId: string;\n  weight: number; // Weight as a percentage (0-100)\n}\n\ninterface Project {\n  id: string;\n  name: string;\n  status: string;\n  progress: number;\n}\n\n// Export the initial goals for use in other components\nexport const initialStrategicGoals = [\n  {\n    id: '1',\n    title: 'Improve Project Completion Rate',\n    description: 'Increase on-time project completion rate by 15%',\n    type: GoalType.STRATEGIC,\n    category: GoalCategory.PERFORMANCE,\n    status: GoalStatus.IN_PROGRESS,\n    progress: 65,\n    startDate: '2023-01-01',\n    endDate: '2025-12-31',\n    assignedTo: 'Department A',\n    linkedProjects: [\n      { projectId: 'p1', weight: 60 },\n      { projectId: 'p4', weight: 40 }\n    ],\n    isProgressAutoCalculated: true,\n    createdAt: '2023-01-01',\n    updatedAt: '2023-01-01'\n  },\n  {\n    id: '2',\n    title: 'Reduce Project Costs',\n    description: 'Reduce average project costs by 10%',\n    type: GoalType.STRATEGIC,\n    category: GoalCategory.FINANCIAL,\n    status: GoalStatus.NOT_STARTED,\n    progress: 0,\n    startDate: '2023-02-15',\n    endDate: '2025-11-30',\n    assignedTo: 'Department B',\n    linkedProjects: [],\n    isProgressAutoCalculated: false,\n    createdAt: '2023-02-15',\n    updatedAt: '2023-02-15'\n  },\n];\n\n// Export the initial annual goals\nexport const initialAnnualGoals = [\n  {\n    id: '3',\n    title: 'Client Satisfaction',\n    description: 'Achieve 90% positive client feedback',\n    type: GoalType.ANNUAL,\n    category: GoalCategory.CUSTOMER,\n    status: GoalStatus.COMPLETED,\n    progress: 100,\n    startDate: '2023-01-15',\n    endDate: '2023-12-31',\n    assignedTo: 'All Departments',\n    linkedProjects: [\n      { projectId: 'p2', weight: 50 },\n      { projectId: 'p3', weight: 50 }\n    ],\n    isProgressAutoCalculated: true,\n    createdAt: '2023-01-15',\n    updatedAt: '2023-12-15'\n  },\n  {\n    id: '4',\n    title: 'Staff Training',\n    description: 'Complete required training for all staff members',\n    type: GoalType.ANNUAL,\n    category: GoalCategory.LEARNING,\n    status: GoalStatus.IN_PROGRESS,\n    progress: 75,\n    startDate: '2023-01-01',\n    endDate: '2023-12-31',\n    assignedTo: 'HR Department',\n    linkedProjects: [],\n    isProgressAutoCalculated: false,\n    createdAt: '2023-01-01',\n    updatedAt: '2023-10-01'\n  },\n];\n\n// Tab panel component\ninterface TabPanelProps {\n  children?: ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`goals-tabpanel-${index}`}\n      aria-labelledby={`goals-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `goals-tab-${index}`,\n    'aria-controls': `goals-tabpanel-${index}`,\n  };\n}\n\nconst GoalsPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [tabValue, setTabValue] = useState(0);\n  const [strategicGoals, setStrategicGoals] = useState<GoalInterface[]>(initialStrategicGoals);\n  const [annualGoals, setAnnualGoals] = useState<GoalInterface[]>(initialAnnualGoals);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [currentGoal, setCurrentGoal] = useState<GoalInterface | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [projectWeights, setProjectWeights] = useState<{ [key: string]: number }>({});\n\n  // Fetch projects when component mounts\n  useEffect(() => {\n    const fetchProjects = async () => {\n      setLoading(true);\n      try {\n        const response = await api.projects.getAllProjects('');\n        if (response.success) {\n          setProjects(response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProjects();\n  }, []);\n\n  // Calculate a goal's progress based on the progress of its linked projects\n  const calculateGoalProgressFromProjects = (linkedProjectWeights: ProjectWeight[]): number => {\n    if (linkedProjectWeights.length === 0) return 0;\n    \n    let weightedProgress = 0;\n    let totalWeight = 0;\n    \n    linkedProjectWeights.forEach(projectWeight => {\n      const project = projects.find(p => p.id === projectWeight.projectId);\n      if (project) {\n        weightedProgress += (project.progress * projectWeight.weight);\n        totalWeight += projectWeight.weight;\n      }\n    });\n    \n    // Return weighted average, or 0 if no valid projects were found\n    return totalWeight > 0 ? Math.round(weightedProgress / totalWeight) : 0;\n  };\n\n  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleOpenDialog = (goal: GoalInterface | null = null, editing = false) => {\n    setIsEditing(editing);\n    \n    if (goal) {\n      setCurrentGoal(goal);\n      \n      // Initialize project weights from existing linked projects\n      const weights: { [key: string]: number } = {};\n      goal.linkedProjects.forEach(link => {\n        weights[link.projectId] = link.weight;\n      });\n      setProjectWeights(weights);\n    } else {\n      // Create a new goal with default values\n      setCurrentGoal({\n        id: Date.now().toString(),\n        title: '',\n        description: '',\n        type: tabValue === 0 ? GoalType.STRATEGIC : GoalType.ANNUAL,\n        category: GoalCategory.PERFORMANCE,\n        status: GoalStatus.NOT_STARTED,\n        progress: 0,\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0],\n        assignedTo: '',\n        linkedProjects: [],\n        isProgressAutoCalculated: false,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n      setProjectWeights({});\n    }\n    \n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setCurrentGoal(null);\n    setIsEditing(false);\n    setProjectWeights({});\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setCurrentGoal(prevGoal => prevGoal ? { ...prevGoal, [name]: value } : null);\n  };\n\n  const handleSelectChange = (event: SelectChangeEvent<string>) => {\n    const { name, value } = event.target;\n    setCurrentGoal(prevGoal => {\n      if (!prevGoal) return prevGoal;\n      return { ...prevGoal, [name]: value };\n    });\n  };\n\n  const handleProgressChange = (event: Event, newValue: number | number[]) => {\n    setCurrentGoal(prevGoal => {\n      if (!prevGoal) return prevGoal;\n      return { ...prevGoal, progress: newValue as number };\n    });\n  };\n\n  const handleLinkedProjectsChange = (event: SelectChangeEvent<string[]>) => {\n    if (!currentGoal) return;\n    \n    const selectedProjectIds = event.target.value as string[];\n    \n    // Initialize weights for newly selected projects\n    const updatedWeights = { ...projectWeights };\n    \n    selectedProjectIds.forEach(projectId => {\n      // If this is a newly selected project, initialize its weight to a default value\n      if (!updatedWeights[projectId]) {\n        updatedWeights[projectId] = 100 / selectedProjectIds.length; // Default to equal weights\n      }\n    });\n    \n    // Remove weights for projects that are no longer selected\n    Object.keys(updatedWeights).forEach(projectId => {\n      if (!selectedProjectIds.includes(projectId)) {\n        delete updatedWeights[projectId];\n      }\n    });\n    \n    // Normalize weights to ensure they sum to 100%\n    normalizeWeights(updatedWeights);\n    setProjectWeights(updatedWeights);\n    \n    // Update the linked projects with new weights\n    const updatedLinkedProjects = selectedProjectIds.map(projectId => ({\n      projectId,\n      weight: updatedWeights[projectId]\n    }));\n    \n    setCurrentGoal({\n      ...currentGoal,\n      linkedProjects: updatedLinkedProjects\n    });\n  };\n\n  const handleAutoCalculateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const isAutoCalculated = event.target.checked;\n    \n    setCurrentGoal(prevGoal => {\n      if (!prevGoal) return null;\n      \n      const updatedGoal = { ...prevGoal, isProgressAutoCalculated: isAutoCalculated };\n      \n      // If enabling auto-calculation, update the progress based on linked projects\n      if (isAutoCalculated) {\n        updatedGoal.progress = calculateGoalProgressFromProjects(prevGoal.linkedProjects.map(p => p));\n      }\n      \n      return updatedGoal;\n    });\n  };\n\n  const handleWeightChange = (projectId: string, newWeight: number) => {\n    if (!currentGoal) return;\n    \n    const updatedWeights = { ...projectWeights };\n    updatedWeights[projectId] = newWeight;\n    \n    // Ensure weights sum to 100%\n    normalizeWeights(updatedWeights);\n    setProjectWeights(updatedWeights);\n    \n    // Update linked projects with new weights\n    const updatedLinkedProjects = currentGoal.linkedProjects.map(project => \n      project.projectId === projectId \n        ? { ...project, weight: newWeight }\n        : { ...project, weight: updatedWeights[project.projectId] }\n    );\n    \n    setCurrentGoal({\n      ...currentGoal,\n      linkedProjects: updatedLinkedProjects\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!currentGoal) return;\n    \n    // Ensure project weights are properly set before saving\n    const finalLinkedProjects = currentGoal.linkedProjects.map(project => ({\n      projectId: project.projectId,\n      weight: projectWeights[project.projectId] || 0\n    }));\n    \n    const finalGoal = {\n      ...currentGoal,\n      linkedProjects: finalLinkedProjects,\n      updatedAt: new Date().toISOString()\n    };\n    \n    // Save the goal\n    if (isEditing) {\n      // Update existing goal\n      if (currentGoal.type === GoalType.STRATEGIC) {\n        setStrategicGoals(prevGoals =>\n          prevGoals.map(goal => goal.id === currentGoal.id ? finalGoal : goal)\n        );\n      } else {\n        setAnnualGoals(prevGoals =>\n          prevGoals.map(goal => goal.id === currentGoal.id ? finalGoal : goal)\n        );\n      }\n    } else {\n      // Add new goal\n      if (finalGoal.type === GoalType.STRATEGIC) {\n        setStrategicGoals(prevGoals => [...prevGoals, finalGoal]);\n      } else {\n        setAnnualGoals(prevGoals => [...prevGoals, finalGoal]);\n      }\n    }\n    \n    setOpenDialog(false);\n    setCurrentGoal(null);\n    setProjectWeights({});\n  };\n\n  const handleDeleteGoal = (id: string) => {\n    if (tabValue === 0) {\n      setStrategicGoals(strategicGoals.filter(goal => goal.id !== id));\n    } else {\n      setAnnualGoals(annualGoals.filter(goal => goal.id !== id));\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case GoalStatus.NOT_STARTED:\n        return 'default';\n      case GoalStatus.IN_PROGRESS:\n        return 'primary';\n      case GoalStatus.COMPLETED:\n        return 'success';\n      case GoalStatus.ON_HOLD:\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const getTranslatedStatus = (status: string): string => {\n    switch (status) {\n      case GoalStatus.NOT_STARTED: return t('goals.notStarted');\n      case GoalStatus.IN_PROGRESS: return t('status.inProgress');\n      case GoalStatus.COMPLETED: return t('status.completed');\n      case GoalStatus.ON_HOLD: return t('status.onHold');\n      default: return status;\n    }\n  };\n\n  const getTranslatedCategory = (category: string): string => {\n    switch (category) {\n      case GoalCategory.PERFORMANCE: return t('goals.performance');\n      case GoalCategory.FINANCIAL: return t('goals.financial');\n      case GoalCategory.CUSTOMER: return t('goals.customer');\n      case GoalCategory.LEARNING: return t('goals.learning');\n      case GoalCategory.PROCESS: return t('goals.process');\n      default: return category;\n    }\n  };\n\n  const renderGoalCards = (goals: GoalInterface[]) => (\n    <GridContainer spacing={3}>\n      {goals.map(goal => (\n        <GridItem key={goal.id} xs={12} md={6} lg={4}>\n          <Paper \n            elevation={2} \n            sx={{ \n              p: 2, \n              height: '100%', \n              display: 'flex', \n              flexDirection: 'column',\n              position: 'relative'\n            }}\n          >\n            <Box sx={{ \n              position: 'absolute', \n              top: 10, \n              right: 10,\n              display: 'flex'\n            }}>\n              <IconButton \n                size=\"small\" \n                onClick={() => handleOpenDialog(goal, true)}\n                sx={{ mr: 1 }}\n              >\n                <EditIcon fontSize=\"small\" />\n              </IconButton>\n              <IconButton \n                size=\"small\" \n                onClick={() => handleDeleteGoal(goal.id)}\n              >\n                <DeleteIcon fontSize=\"small\" />\n              </IconButton>\n            </Box>\n            \n            <Typography variant=\"h6\" gutterBottom>\n              {goal.title}\n            </Typography>\n\n            <Typography \n              variant=\"body2\" \n              color=\"text.secondary\" \n              sx={{ mb: 2, minHeight: '40px' }}\n            >\n              {goal.description}\n            </Typography>\n            \n            <Box sx={{ mb: 2 }}>\n              <Chip \n                label={getTranslatedStatus(goal.status)} \n                size=\"small\" \n                sx={{ mr: 1, mb: 1 }}\n                color={getStatusColor(goal.status)}\n              />\n              <Chip \n                label={getTranslatedCategory(goal.category)} \n                size=\"small\"\n                sx={{ mb: 1 }}\n                variant=\"outlined\"\n              />\n            </Box>\n            \n            <Box sx={{ mb: 1 }}>\n              <Typography variant=\"body2\" display=\"flex\" alignItems=\"center\">\n                <Box component=\"span\" sx={{ width: '50%', fontWeight: 'bold', mr: 1 }}>\n                  {t('goals.progress')}:\n                </Box>\n                <Box component=\"span\" sx={{ width: '50%' }}>\n                  {goal.progress}%\n                </Box>\n              </Typography>\n              <LinearProgress \n                variant=\"determinate\" \n                value={goal.progress} \n                sx={{ mt: 1, mb: 1 }}\n              />\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                <FormControlLabel\n                  control={<Checkbox checked={goal.isProgressAutoCalculated} size=\"small\" disabled />}\n                  label={t('goals.autoCalculated')}\n                  sx={{ '& .MuiFormControlLabel-label': { fontSize: '0.75rem' } }}\n                />\n              </Typography>\n            </Box>\n            \n            <Box sx={{ mb: 1 }}>\n              <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                {t('timeline')}:\n              </Typography>\n              <Typography variant=\"body2\">\n                {new Date(goal.startDate).toLocaleDateString()} - {new Date(goal.endDate).toLocaleDateString()}\n              </Typography>\n            </Box>\n            \n            <Box sx={{ mt: 'auto', pt: 1 }}>\n              <Typography variant=\"body2\">\n                {t('goals.assignedTo')}: {goal.assignedTo}\n              </Typography>\n            </Box>\n            \n            {goal.linkedProjects.length > 0 && (\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                  {t('goals.linkedProjects')}:\n                </Typography>\n                {goal.linkedProjects.map((projectWeight) => {\n                  const project = projects.find(p => p.id === projectWeight.projectId);\n                  return (\n                    <Box key={projectWeight.projectId} sx={{ \n                      display: 'flex', \n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                      mb: 0.5 \n                    }}>\n                      <Chip\n                        icon={<LinkIcon fontSize=\"small\" />}\n                        label={project ? project.name : projectWeight.projectId}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        sx={{ mr: 1 }}\n                      />\n                      <Typography variant=\"caption\" sx={{ fontWeight: 'medium' }}>\n                        {projectWeight.weight}%\n                      </Typography>\n                    </Box>\n                  );\n                })}\n              </Box>\n            )}\n          </Paper>\n        </GridItem>\n      ))}\n    </GridContainer>\n  );\n\n  // Function to normalize weights to sum to 100%\n  const normalizeWeights = (weights: { [key: string]: number }) => {\n    const projectIds = Object.keys(weights);\n    if (projectIds.length === 0) return;\n    \n    // Calculate the total of all weights\n    const total = projectIds.reduce((sum, id) => sum + weights[id], 0);\n    \n    // If the total is not 100, normalize\n    if (total !== 100 && total !== 0) {\n      projectIds.forEach(id => {\n        weights[id] = Math.round((weights[id] / total) * 100);\n      });\n      \n      // Handle any rounding errors to ensure the sum is exactly 100\n      const newTotal = projectIds.reduce((sum, id) => sum + weights[id], 0);\n      if (newTotal !== 100) {\n        weights[projectIds[0]] += (100 - newTotal);\n      }\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3, alignItems: 'center' }}>\n        <Typography variant=\"h4\">{t('navigation.goals')}</Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<AddIcon />}\n          onClick={() => handleOpenDialog()}\n        >\n          {t('goals.add')}\n        </Button>\n      </Box>\n\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"goal types\">\n          <Tab label={t('goals.strategic')} {...a11yProps(0)} />\n          <Tab label={t('goals.annual')} {...a11yProps(1)} />\n        </Tabs>\n      </Box>\n      \n      <TabPanel value={tabValue} index={0}>\n        {renderGoalCards(strategicGoals)}\n      </TabPanel>\n      \n      <TabPanel value={tabValue} index={1}>\n        {renderGoalCards(annualGoals)}\n      </TabPanel>\n\n      {/* Goal Edit/Create Dialog */}\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {isEditing \n            ? t('goals.edit')\n            : `${t('goals.addNew')} ${tabValue === 0 ? t('goals.strategic') : t('goals.annual')} ${t('goals.goal')}`}\n        </DialogTitle>\n        <DialogContent>\n          <GridContainer spacing={2} sx={{ mt: 1 }}>\n            <GridItem xs={12}>\n              <TextField\n                label={t('goals.title')}\n                name=\"title\"\n                value={currentGoal?.title || ''}\n                onChange={handleChange}\n                fullWidth\n                required\n              />\n            </GridItem>\n            \n            <GridItem xs={12}>\n              <TextField\n                label={t('common.description')}\n                name=\"description\"\n                value={currentGoal?.description || ''}\n                onChange={handleChange}\n                fullWidth\n                multiline\n                rows={3}\n              />\n            </GridItem>\n            \n            <GridItem xs={12} sm={6}>\n              <TextField\n                select\n                label={t('goals.category')}\n                name=\"category\"\n                value={currentGoal?.category || GoalCategory.PERFORMANCE}\n                onChange={handleSelectChange as any}\n                fullWidth\n              >\n                {Object.values(GoalCategory).map((category) => (\n                  <MenuItem key={category} value={category}>\n                    {getTranslatedCategory(category as string)}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </GridItem>\n            \n            <GridItem xs={12} sm={6}>\n              <TextField\n                select\n                label={t('status.status')}\n                name=\"status\"\n                value={currentGoal?.status || GoalStatus.NOT_STARTED}\n                onChange={handleSelectChange as any}\n                fullWidth\n              >\n                {Object.values(GoalStatus).map((status) => (\n                  <MenuItem key={status} value={status}>\n                    {getTranslatedStatus(status as string)}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </GridItem>\n            \n            <GridItem xs={12} sm={6}>\n              <TextField\n                label={t('common.startDate')}\n                name=\"startDate\"\n                type=\"date\"\n                value={currentGoal?.startDate || ''}\n                onChange={handleChange}\n                fullWidth\n                InputLabelProps={{ shrink: true }}\n              />\n            </GridItem>\n            \n            <GridItem xs={12} sm={6}>\n              <TextField\n                label={t('common.endDate')}\n                name=\"endDate\"\n                type=\"date\"\n                value={currentGoal?.endDate || ''}\n                onChange={handleChange}\n                fullWidth\n                InputLabelProps={{ shrink: true }}\n              />\n            </GridItem>\n            \n            <GridItem xs={12}>\n              <TextField\n                label={t('goals.assignedTo')}\n                name=\"assignedTo\"\n                value={currentGoal?.assignedTo || ''}\n                onChange={handleChange}\n                fullWidth\n              />\n            </GridItem>\n            \n            <GridItem xs={12}>\n              <FormControl fullWidth margin=\"normal\">\n                <InputLabel id=\"linked-projects-label\">{t('goals.linkedProjects')}</InputLabel>\n                <Select\n                  labelId=\"linked-projects-label\"\n                  multiple\n                  value={currentGoal?.linkedProjects.map(p => p.projectId) || []}\n                  onChange={handleLinkedProjectsChange}\n                  input={<OutlinedInput label={t('goals.linkedProjects')} />}\n                  renderValue={(selected) => (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {selected.map((value) => {\n                        const project = projects.find(p => p.id === value);\n                        return (\n                          <Chip \n                            key={value} \n                            label={project ? project.name : value} \n                            size=\"small\" \n                          />\n                        );\n                      })}\n                    </Box>\n                  )}\n                  MenuProps={{\n                    PaperProps: {\n                      style: {\n                        maxHeight: 224,\n                        width: 250,\n                      },\n                    },\n                  }}\n                >\n                  {projects.map((project) => (\n                    <MenuItem key={project.id} value={project.id}>\n                      <Checkbox checked={currentGoal?.linkedProjects.some(p => p.projectId === project.id) || false} />\n                      <ListItemText primary={project.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </GridItem>\n            \n            <GridItem xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={currentGoal?.isProgressAutoCalculated || false}\n                    onChange={handleAutoCalculateChange}\n                    name=\"isProgressAutoCalculated\"\n                  />\n                }\n                label={t('goals.autoCalculateProgress')}\n              />\n              <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                {t('goals.autoCalculateDescription')}\n              </Typography>\n            </GridItem>\n            \n            {!currentGoal?.isProgressAutoCalculated && (\n              <GridItem xs={12}>\n                <Typography id=\"progress-slider\" gutterBottom>\n                  {t('project.progress')}: {currentGoal?.progress || 0}%\n                </Typography>\n                <Slider\n                  value={currentGoal?.progress || 0}\n                  onChange={handleProgressChange}\n                  aria-labelledby=\"progress-slider\"\n                  valueLabelDisplay=\"auto\"\n                  step={5}\n                  marks\n                  min={0}\n                  max={100}\n                />\n              </GridItem>\n            )}\n            \n            {/* Project Weights Section */}\n            {currentGoal?.linkedProjects && currentGoal.linkedProjects.length > 0 && (\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  {t('Project Weights')}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\" paragraph>\n                  {t('Adjust the weight of each project\\'s contribution to this goal. Weights will automatically balance to 100%.')}\n                </Typography>\n                \n                {currentGoal?.linkedProjects && currentGoal.linkedProjects.map((projectLink) => {\n                  const project = projects.find(p => p.id === projectLink.projectId);\n                  return (\n                    <Box key={projectLink.projectId} sx={{ mb: 2 }}>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                        <Typography variant=\"body2\">\n                          {project ? project.name : projectLink.projectId}\n                        </Typography>\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {projectWeights[projectLink.projectId] || projectLink.weight}%\n                        </Typography>\n                      </Box>\n                      <Slider\n                        value={projectWeights[projectLink.projectId] || projectLink.weight}\n                        onChange={(_, newValue) => handleWeightChange(projectLink.projectId, newValue as number)}\n                        aria-labelledby=\"project-weight-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={5}\n                        marks\n                        min={5}\n                        max={100}\n                      />\n                    </Box>\n                  );\n                })}\n              </Box>\n            )}\n          </GridContainer>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>{t('common.cancel')}</Button>\n          <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n            {isEditing ? t('common.update') : t('common.create')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default GoalsPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}